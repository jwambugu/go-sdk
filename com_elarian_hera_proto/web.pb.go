// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: web.proto

package com_elarian_hera_proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AuthTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AuthTokenRequest) Reset() {
	*x = AuthTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthTokenRequest) ProtoMessage() {}

func (x *AuthTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthTokenRequest.ProtoReflect.Descriptor instead.
func (*AuthTokenRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{0}
}

func (x *AuthTokenRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AuthTokenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string             `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Lifetime *duration.Duration `protobuf:"bytes,2,opt,name=lifetime,proto3" json:"lifetime,omitempty"`
}

func (x *AuthTokenReply) Reset() {
	*x = AuthTokenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthTokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthTokenReply) ProtoMessage() {}

func (x *AuthTokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthTokenReply.ProtoReflect.Descriptor instead.
func (*AuthTokenReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{1}
}

func (x *AuthTokenReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AuthTokenReply) GetLifetime() *duration.Duration {
	if x != nil {
		return x.Lifetime
	}
	return nil
}

type GetCustomerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*GetCustomerStateRequest_CustomerId
	//	*GetCustomerStateRequest_CustomerNumber
	Customer isGetCustomerStateRequest_Customer `protobuf_oneof:"customer"`
}

func (x *GetCustomerStateRequest) Reset() {
	*x = GetCustomerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerStateRequest) ProtoMessage() {}

func (x *GetCustomerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerStateRequest.ProtoReflect.Descriptor instead.
func (*GetCustomerStateRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{2}
}

func (x *GetCustomerStateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *GetCustomerStateRequest) GetCustomer() isGetCustomerStateRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *GetCustomerStateRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*GetCustomerStateRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *GetCustomerStateRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*GetCustomerStateRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

type isGetCustomerStateRequest_Customer interface {
	isGetCustomerStateRequest_Customer()
}

type GetCustomerStateRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type GetCustomerStateRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*GetCustomerStateRequest_CustomerId) isGetCustomerStateRequest_Customer() {}

func (*GetCustomerStateRequest_CustomerNumber) isGetCustomerStateRequest_Customer() {}

type GetCustomerStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool                    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Description string                  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Data        *CustomerStateReplyData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetCustomerStateReply) Reset() {
	*x = GetCustomerStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCustomerStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCustomerStateReply) ProtoMessage() {}

func (x *GetCustomerStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCustomerStateReply.ProtoReflect.Descriptor instead.
func (*GetCustomerStateReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{3}
}

func (x *GetCustomerStateReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *GetCustomerStateReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCustomerStateReply) GetData() *CustomerStateReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CustomerStateReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagingState *MessagingState   `protobuf:"bytes,1,opt,name=messaging_state,json=messagingState,proto3" json:"messaging_state,omitempty"`
	UssdState      *UssdState        `protobuf:"bytes,2,opt,name=ussd_state,json=ussdState,proto3" json:"ussd_state,omitempty"`
	VoiceState     *VoiceState       `protobuf:"bytes,3,opt,name=voice_state,json=voiceState,proto3" json:"voice_state,omitempty"`
	PaymentState   *PaymentState     `protobuf:"bytes,4,opt,name=payment_state,json=paymentState,proto3" json:"payment_state,omitempty"`
	Tags           []*CustomerIndex  `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecondaryIds   []*CustomerIndex  `protobuf:"bytes,7,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
}

func (x *CustomerStateReplyData) Reset() {
	*x = CustomerStateReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerStateReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerStateReplyData) ProtoMessage() {}

func (x *CustomerStateReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerStateReplyData.ProtoReflect.Descriptor instead.
func (*CustomerStateReplyData) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{4}
}

func (x *CustomerStateReplyData) GetMessagingState() *MessagingState {
	if x != nil {
		return x.MessagingState
	}
	return nil
}

func (x *CustomerStateReplyData) GetUssdState() *UssdState {
	if x != nil {
		return x.UssdState
	}
	return nil
}

func (x *CustomerStateReplyData) GetVoiceState() *VoiceState {
	if x != nil {
		return x.VoiceState
	}
	return nil
}

func (x *CustomerStateReplyData) GetPaymentState() *PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return nil
}

func (x *CustomerStateReplyData) GetTags() []*CustomerIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CustomerStateReplyData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CustomerStateReplyData) GetSecondaryIds() []*CustomerIndex {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

type AdoptCustomerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// Types that are assignable to OtherCustomer:
	//	*AdoptCustomerStateRequest_OtherCustomerId
	//	*AdoptCustomerStateRequest_OtherCustomerNumber
	OtherCustomer isAdoptCustomerStateRequest_OtherCustomer `protobuf_oneof:"other_customer"`
}

func (x *AdoptCustomerStateRequest) Reset() {
	*x = AdoptCustomerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdoptCustomerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdoptCustomerStateRequest) ProtoMessage() {}

func (x *AdoptCustomerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdoptCustomerStateRequest.ProtoReflect.Descriptor instead.
func (*AdoptCustomerStateRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{5}
}

func (x *AdoptCustomerStateRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AdoptCustomerStateRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (m *AdoptCustomerStateRequest) GetOtherCustomer() isAdoptCustomerStateRequest_OtherCustomer {
	if m != nil {
		return m.OtherCustomer
	}
	return nil
}

func (x *AdoptCustomerStateRequest) GetOtherCustomerId() string {
	if x, ok := x.GetOtherCustomer().(*AdoptCustomerStateRequest_OtherCustomerId); ok {
		return x.OtherCustomerId
	}
	return ""
}

func (x *AdoptCustomerStateRequest) GetOtherCustomerNumber() *CustomerNumber {
	if x, ok := x.GetOtherCustomer().(*AdoptCustomerStateRequest_OtherCustomerNumber); ok {
		return x.OtherCustomerNumber
	}
	return nil
}

type isAdoptCustomerStateRequest_OtherCustomer interface {
	isAdoptCustomerStateRequest_OtherCustomer()
}

type AdoptCustomerStateRequest_OtherCustomerId struct {
	OtherCustomerId string `protobuf:"bytes,3,opt,name=other_customer_id,json=otherCustomerId,proto3,oneof"`
}

type AdoptCustomerStateRequest_OtherCustomerNumber struct {
	OtherCustomerNumber *CustomerNumber `protobuf:"bytes,4,opt,name=other_customer_number,json=otherCustomerNumber,proto3,oneof"`
}

func (*AdoptCustomerStateRequest_OtherCustomerId) isAdoptCustomerStateRequest_OtherCustomer() {}

func (*AdoptCustomerStateRequest_OtherCustomerNumber) isAdoptCustomerStateRequest_OtherCustomer() {}

type AddCustomerReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*AddCustomerReminderRequest_CustomerId
	//	*AddCustomerReminderRequest_CustomerNumber
	Customer isAddCustomerReminderRequest_Customer `protobuf_oneof:"customer"`
	Reminder *CustomerReminder                     `protobuf:"bytes,5,opt,name=reminder,proto3" json:"reminder,omitempty"`
}

func (x *AddCustomerReminderRequest) Reset() {
	*x = AddCustomerReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomerReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerReminderRequest) ProtoMessage() {}

func (x *AddCustomerReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerReminderRequest.ProtoReflect.Descriptor instead.
func (*AddCustomerReminderRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{6}
}

func (x *AddCustomerReminderRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *AddCustomerReminderRequest) GetCustomer() isAddCustomerReminderRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *AddCustomerReminderRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*AddCustomerReminderRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *AddCustomerReminderRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*AddCustomerReminderRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *AddCustomerReminderRequest) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

type isAddCustomerReminderRequest_Customer interface {
	isAddCustomerReminderRequest_Customer()
}

type AddCustomerReminderRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type AddCustomerReminderRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*AddCustomerReminderRequest_CustomerId) isAddCustomerReminderRequest_Customer() {}

func (*AddCustomerReminderRequest_CustomerNumber) isAddCustomerReminderRequest_Customer() {}

type AddCustomerReminderTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    string            `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Tag      *IndexMapping     `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Reminder *CustomerReminder `protobuf:"bytes,3,opt,name=reminder,proto3" json:"reminder,omitempty"`
}

func (x *AddCustomerReminderTagRequest) Reset() {
	*x = AddCustomerReminderTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCustomerReminderTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCustomerReminderTagRequest) ProtoMessage() {}

func (x *AddCustomerReminderTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCustomerReminderTagRequest.ProtoReflect.Descriptor instead.
func (*AddCustomerReminderTagRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{7}
}

func (x *AddCustomerReminderTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AddCustomerReminderTagRequest) GetTag() *IndexMapping {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *AddCustomerReminderTagRequest) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

type CancelCustomerReminderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*CancelCustomerReminderRequest_CustomerId
	//	*CancelCustomerReminderRequest_CustomerNumber
	Customer  isCancelCustomerReminderRequest_Customer `protobuf_oneof:"customer"`
	ProductId string                                   `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Key       string                                   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CancelCustomerReminderRequest) Reset() {
	*x = CancelCustomerReminderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCustomerReminderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCustomerReminderRequest) ProtoMessage() {}

func (x *CancelCustomerReminderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCustomerReminderRequest.ProtoReflect.Descriptor instead.
func (*CancelCustomerReminderRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{8}
}

func (x *CancelCustomerReminderRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *CancelCustomerReminderRequest) GetCustomer() isCancelCustomerReminderRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *CancelCustomerReminderRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*CancelCustomerReminderRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *CancelCustomerReminderRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*CancelCustomerReminderRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *CancelCustomerReminderRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CancelCustomerReminderRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type isCancelCustomerReminderRequest_Customer interface {
	isCancelCustomerReminderRequest_Customer()
}

type CancelCustomerReminderRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type CancelCustomerReminderRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*CancelCustomerReminderRequest_CustomerId) isCancelCustomerReminderRequest_Customer() {}

func (*CancelCustomerReminderRequest_CustomerNumber) isCancelCustomerReminderRequest_Customer() {}

type CancelCustomerReminderTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string        `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Tag       *IndexMapping `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ProductId string        `protobuf:"bytes,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Key       string        `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CancelCustomerReminderTagRequest) Reset() {
	*x = CancelCustomerReminderTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelCustomerReminderTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelCustomerReminderTagRequest) ProtoMessage() {}

func (x *CancelCustomerReminderTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelCustomerReminderTagRequest.ProtoReflect.Descriptor instead.
func (*CancelCustomerReminderTagRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{9}
}

func (x *CancelCustomerReminderTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CancelCustomerReminderTagRequest) GetTag() *IndexMapping {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *CancelCustomerReminderTagRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CancelCustomerReminderTagRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type UpdateCustomerTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*UpdateCustomerTagRequest_CustomerId
	//	*UpdateCustomerTagRequest_CustomerNumber
	Customer isUpdateCustomerTagRequest_Customer `protobuf_oneof:"customer"`
	Tags     []*CustomerIndex                    `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *UpdateCustomerTagRequest) Reset() {
	*x = UpdateCustomerTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerTagRequest) ProtoMessage() {}

func (x *UpdateCustomerTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerTagRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerTagRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateCustomerTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *UpdateCustomerTagRequest) GetCustomer() isUpdateCustomerTagRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *UpdateCustomerTagRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*UpdateCustomerTagRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerTagRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*UpdateCustomerTagRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *UpdateCustomerTagRequest) GetTags() []*CustomerIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isUpdateCustomerTagRequest_Customer interface {
	isUpdateCustomerTagRequest_Customer()
}

type UpdateCustomerTagRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type UpdateCustomerTagRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*UpdateCustomerTagRequest_CustomerId) isUpdateCustomerTagRequest_Customer() {}

func (*UpdateCustomerTagRequest_CustomerNumber) isUpdateCustomerTagRequest_Customer() {}

type DeleteCustomerTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*DeleteCustomerTagRequest_CustomerId
	//	*DeleteCustomerTagRequest_CustomerNumber
	Customer isDeleteCustomerTagRequest_Customer `protobuf_oneof:"customer"`
	Tags     []string                            `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *DeleteCustomerTagRequest) Reset() {
	*x = DeleteCustomerTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerTagRequest) ProtoMessage() {}

func (x *DeleteCustomerTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerTagRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCustomerTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *DeleteCustomerTagRequest) GetCustomer() isDeleteCustomerTagRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *DeleteCustomerTagRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*DeleteCustomerTagRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *DeleteCustomerTagRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*DeleteCustomerTagRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *DeleteCustomerTagRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type isDeleteCustomerTagRequest_Customer interface {
	isDeleteCustomerTagRequest_Customer()
}

type DeleteCustomerTagRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type DeleteCustomerTagRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*DeleteCustomerTagRequest_CustomerId) isDeleteCustomerTagRequest_Customer() {}

func (*DeleteCustomerTagRequest_CustomerNumber) isDeleteCustomerTagRequest_Customer() {}

type UpdateCustomerSecondaryIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	// Types that are assignable to Customer:
	//	*UpdateCustomerSecondaryIdRequest_CustomerId
	//	*UpdateCustomerSecondaryIdRequest_CustomerNumber
	Customer     isUpdateCustomerSecondaryIdRequest_Customer `protobuf_oneof:"customer"`
	SecondaryIds []*CustomerIndex                            `protobuf:"bytes,4,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
}

func (x *UpdateCustomerSecondaryIdRequest) Reset() {
	*x = UpdateCustomerSecondaryIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerSecondaryIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerSecondaryIdRequest) ProtoMessage() {}

func (x *UpdateCustomerSecondaryIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerSecondaryIdRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerSecondaryIdRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCustomerSecondaryIdRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *UpdateCustomerSecondaryIdRequest) GetCustomer() isUpdateCustomerSecondaryIdRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *UpdateCustomerSecondaryIdRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*UpdateCustomerSecondaryIdRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerSecondaryIdRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*UpdateCustomerSecondaryIdRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *UpdateCustomerSecondaryIdRequest) GetSecondaryIds() []*CustomerIndex {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

type isUpdateCustomerSecondaryIdRequest_Customer interface {
	isUpdateCustomerSecondaryIdRequest_Customer()
}

type UpdateCustomerSecondaryIdRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type UpdateCustomerSecondaryIdRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*UpdateCustomerSecondaryIdRequest_CustomerId) isUpdateCustomerSecondaryIdRequest_Customer() {}

func (*UpdateCustomerSecondaryIdRequest_CustomerNumber) isUpdateCustomerSecondaryIdRequest_Customer() {
}

type DeleteCustomerSecondaryIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*DeleteCustomerSecondaryIdRequest_CustomerId
	//	*DeleteCustomerSecondaryIdRequest_CustomerNumber
	Customer     isDeleteCustomerSecondaryIdRequest_Customer `protobuf_oneof:"customer"`
	SecondaryIds []*IndexMapping                             `protobuf:"bytes,4,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
}

func (x *DeleteCustomerSecondaryIdRequest) Reset() {
	*x = DeleteCustomerSecondaryIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerSecondaryIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerSecondaryIdRequest) ProtoMessage() {}

func (x *DeleteCustomerSecondaryIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerSecondaryIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerSecondaryIdRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteCustomerSecondaryIdRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *DeleteCustomerSecondaryIdRequest) GetCustomer() isDeleteCustomerSecondaryIdRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *DeleteCustomerSecondaryIdRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*DeleteCustomerSecondaryIdRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *DeleteCustomerSecondaryIdRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*DeleteCustomerSecondaryIdRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *DeleteCustomerSecondaryIdRequest) GetSecondaryIds() []*IndexMapping {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

type isDeleteCustomerSecondaryIdRequest_Customer interface {
	isDeleteCustomerSecondaryIdRequest_Customer()
}

type DeleteCustomerSecondaryIdRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type DeleteCustomerSecondaryIdRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*DeleteCustomerSecondaryIdRequest_CustomerId) isDeleteCustomerSecondaryIdRequest_Customer() {}

func (*DeleteCustomerSecondaryIdRequest_CustomerNumber) isDeleteCustomerSecondaryIdRequest_Customer() {
}

type UpdateCustomerMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*UpdateCustomerMetadataRequest_CustomerId
	//	*UpdateCustomerMetadataRequest_CustomerNumber
	Customer isUpdateCustomerMetadataRequest_Customer `protobuf_oneof:"customer"`
	Metadata map[string]string                        `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateCustomerMetadataRequest) Reset() {
	*x = UpdateCustomerMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerMetadataRequest) ProtoMessage() {}

func (x *UpdateCustomerMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateCustomerMetadataRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCustomerMetadataRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *UpdateCustomerMetadataRequest) GetCustomer() isUpdateCustomerMetadataRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *UpdateCustomerMetadataRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*UpdateCustomerMetadataRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *UpdateCustomerMetadataRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*UpdateCustomerMetadataRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *UpdateCustomerMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isUpdateCustomerMetadataRequest_Customer interface {
	isUpdateCustomerMetadataRequest_Customer()
}

type UpdateCustomerMetadataRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type UpdateCustomerMetadataRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*UpdateCustomerMetadataRequest_CustomerId) isUpdateCustomerMetadataRequest_Customer() {}

func (*UpdateCustomerMetadataRequest_CustomerNumber) isUpdateCustomerMetadataRequest_Customer() {}

type DeleteCustomerMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*DeleteCustomerMetadataRequest_CustomerId
	//	*DeleteCustomerMetadataRequest_CustomerNumber
	Customer isDeleteCustomerMetadataRequest_Customer `protobuf_oneof:"customer"`
	Metadata []string                                 `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *DeleteCustomerMetadataRequest) Reset() {
	*x = DeleteCustomerMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCustomerMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCustomerMetadataRequest) ProtoMessage() {}

func (x *DeleteCustomerMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCustomerMetadataRequest.ProtoReflect.Descriptor instead.
func (*DeleteCustomerMetadataRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCustomerMetadataRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *DeleteCustomerMetadataRequest) GetCustomer() isDeleteCustomerMetadataRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *DeleteCustomerMetadataRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*DeleteCustomerMetadataRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *DeleteCustomerMetadataRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*DeleteCustomerMetadataRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *DeleteCustomerMetadataRequest) GetMetadata() []string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type isDeleteCustomerMetadataRequest_Customer interface {
	isDeleteCustomerMetadataRequest_Customer()
}

type DeleteCustomerMetadataRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type DeleteCustomerMetadataRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*DeleteCustomerMetadataRequest_CustomerId) isDeleteCustomerMetadataRequest_Customer() {}

func (*DeleteCustomerMetadataRequest_CustomerNumber) isDeleteCustomerMetadataRequest_Customer() {}

type SendMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Types that are assignable to Customer:
	//	*SendMessageRequest_CustomerId
	//	*SendMessageRequest_CustomerNumber
	Customer      isSendMessageRequest_Customer `protobuf_oneof:"customer"`
	ChannelNumber *MessagingChannelNumber       `protobuf:"bytes,5,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Body          *CustomerMessageBody          `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{16}
}

func (x *SendMessageRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SendMessageRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (m *SendMessageRequest) GetCustomer() isSendMessageRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *SendMessageRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*SendMessageRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *SendMessageRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*SendMessageRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *SendMessageRequest) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *SendMessageRequest) GetBody() *CustomerMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type isSendMessageRequest_Customer interface {
	isSendMessageRequest_Customer()
}

type SendMessageRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,3,opt,name=customerId,proto3,oneof"`
}

type SendMessageRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*SendMessageRequest_CustomerId) isSendMessageRequest_Customer() {}

func (*SendMessageRequest_CustomerNumber) isSendMessageRequest_Customer() {}

type SendMessageTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         string                  `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId     string                  `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	Tag           *IndexMapping           `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	ChannelNumber *MessagingChannelNumber `protobuf:"bytes,4,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Body          *CustomerMessageBody    `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *SendMessageTagRequest) Reset() {
	*x = SendMessageTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageTagRequest) ProtoMessage() {}

func (x *SendMessageTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageTagRequest.ProtoReflect.Descriptor instead.
func (*SendMessageTagRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{17}
}

func (x *SendMessageTagRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SendMessageTagRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *SendMessageTagRequest) GetTag() *IndexMapping {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *SendMessageTagRequest) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *SendMessageTagRequest) GetBody() *CustomerMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type ReplyToMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string               `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId        string               `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId       string               `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	ReplyToMessageId string               `protobuf:"bytes,4,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"`
	Body             *CustomerMessageBody `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ReplyToMessageRequest) Reset() {
	*x = ReplyToMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyToMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyToMessageRequest) ProtoMessage() {}

func (x *ReplyToMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyToMessageRequest.ProtoReflect.Descriptor instead.
func (*ReplyToMessageRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{18}
}

func (x *ReplyToMessageRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ReplyToMessageRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReplyToMessageRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReplyToMessageRequest) GetReplyToMessageId() string {
	if x != nil {
		return x.ReplyToMessageId
	}
	return ""
}

func (x *ReplyToMessageRequest) GetBody() *CustomerMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

type SendMessageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      MessageDeliveryStatus `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MessageId   *wrappers.StringValue `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	CustomerId  *wrappers.StringValue `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *SendMessageReply) Reset() {
	*x = SendMessageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReply) ProtoMessage() {}

func (x *SendMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReply.ProtoReflect.Descriptor instead.
func (*SendMessageReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{19}
}

func (x *SendMessageReply) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

func (x *SendMessageReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SendMessageReply) GetMessageId() *wrappers.StringValue {
	if x != nil {
		return x.MessageId
	}
	return nil
}

func (x *SendMessageReply) GetCustomerId() *wrappers.StringValue {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type MessagingConsentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// Types that are assignable to Customer:
	//	*MessagingConsentRequest_CustomerId
	//	*MessagingConsentRequest_CustomerNumber
	Customer      isMessagingConsentRequest_Customer `protobuf_oneof:"customer"`
	ChannelNumber *MessagingChannelNumber            `protobuf:"bytes,4,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Action        MessagingConsentAction             `protobuf:"varint,5,opt,name=action,proto3,enum=com.elarian.hera.proto.MessagingConsentAction" json:"action,omitempty"`
}

func (x *MessagingConsentRequest) Reset() {
	*x = MessagingConsentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentRequest) ProtoMessage() {}

func (x *MessagingConsentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentRequest.ProtoReflect.Descriptor instead.
func (*MessagingConsentRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{20}
}

func (x *MessagingConsentRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (m *MessagingConsentRequest) GetCustomer() isMessagingConsentRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *MessagingConsentRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*MessagingConsentRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingConsentRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*MessagingConsentRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingConsentRequest) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingConsentRequest) GetAction() MessagingConsentAction {
	if x != nil {
		return x.Action
	}
	return MessagingConsentAction_MESSAGING_CONSENT_ACTION_UNSPECIFIED
}

type isMessagingConsentRequest_Customer interface {
	isMessagingConsentRequest_Customer()
}

type MessagingConsentRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type MessagingConsentRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,3,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*MessagingConsentRequest_CustomerId) isMessagingConsentRequest_Customer() {}

func (*MessagingConsentRequest_CustomerNumber) isMessagingConsentRequest_Customer() {}

type MessagingConsentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      MessagingConsentStatus `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CustomerId  *wrappers.StringValue  `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *MessagingConsentReply) Reset() {
	*x = MessagingConsentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentReply) ProtoMessage() {}

func (x *MessagingConsentReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentReply.ProtoReflect.Descriptor instead.
func (*MessagingConsentReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{21}
}

func (x *MessagingConsentReply) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

func (x *MessagingConsentReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MessagingConsentReply) GetCustomerId() *wrappers.StringValue {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type SendPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Types that are assignable to Customer:
	//	*SendPaymentRequest_CustomerId
	//	*SendPaymentRequest_CustomerNumber
	Customer      isSendPaymentRequest_Customer `protobuf_oneof:"customer"`
	ChannelNumber *PaymentChannelNumber         `protobuf:"bytes,5,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Value         *Cash                         `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SendPaymentRequest) Reset() {
	*x = SendPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentRequest) ProtoMessage() {}

func (x *SendPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentRequest.ProtoReflect.Descriptor instead.
func (*SendPaymentRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{22}
}

func (x *SendPaymentRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SendPaymentRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (m *SendPaymentRequest) GetCustomer() isSendPaymentRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *SendPaymentRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*SendPaymentRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *SendPaymentRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*SendPaymentRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *SendPaymentRequest) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *SendPaymentRequest) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

type isSendPaymentRequest_Customer interface {
	isSendPaymentRequest_Customer()
}

type SendPaymentRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type SendPaymentRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*SendPaymentRequest_CustomerId) isSendPaymentRequest_Customer() {}

func (*SendPaymentRequest_CustomerNumber) isSendPaymentRequest_Customer() {}

type SendPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        PaymentStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
	Description   string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TransactionId *wrappers.StringValue `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CustomerId    *wrappers.StringValue `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *SendPaymentReply) Reset() {
	*x = SendPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPaymentReply) ProtoMessage() {}

func (x *SendPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPaymentReply.ProtoReflect.Descriptor instead.
func (*SendPaymentReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{23}
}

func (x *SendPaymentReply) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

func (x *SendPaymentReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SendPaymentReply) GetTransactionId() *wrappers.StringValue {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *SendPaymentReply) GetCustomerId() *wrappers.StringValue {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type CheckoutPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Types that are assignable to Customer:
	//	*CheckoutPaymentRequest_CustomerId
	//	*CheckoutPaymentRequest_CustomerNumber
	Customer      isCheckoutPaymentRequest_Customer `protobuf_oneof:"customer"`
	ChannelNumber *PaymentChannelNumber             `protobuf:"bytes,5,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Value         *Cash                             `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CheckoutPaymentRequest) Reset() {
	*x = CheckoutPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutPaymentRequest) ProtoMessage() {}

func (x *CheckoutPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutPaymentRequest.ProtoReflect.Descriptor instead.
func (*CheckoutPaymentRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{24}
}

func (x *CheckoutPaymentRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CheckoutPaymentRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (m *CheckoutPaymentRequest) GetCustomer() isCheckoutPaymentRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *CheckoutPaymentRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*CheckoutPaymentRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *CheckoutPaymentRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*CheckoutPaymentRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *CheckoutPaymentRequest) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *CheckoutPaymentRequest) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

type isCheckoutPaymentRequest_Customer interface {
	isCheckoutPaymentRequest_Customer()
}

type CheckoutPaymentRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type CheckoutPaymentRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*CheckoutPaymentRequest_CustomerId) isCheckoutPaymentRequest_Customer() {}

func (*CheckoutPaymentRequest_CustomerNumber) isCheckoutPaymentRequest_Customer() {}

type CheckoutPaymentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        PaymentStatus         `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
	Description   string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	TransactionId *wrappers.StringValue `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CustomerId    *wrappers.StringValue `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *CheckoutPaymentReply) Reset() {
	*x = CheckoutPaymentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckoutPaymentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckoutPaymentReply) ProtoMessage() {}

func (x *CheckoutPaymentReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckoutPaymentReply.ProtoReflect.Descriptor instead.
func (*CheckoutPaymentReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{25}
}

func (x *CheckoutPaymentReply) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

func (x *CheckoutPaymentReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CheckoutPaymentReply) GetTransactionId() *wrappers.StringValue {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *CheckoutPaymentReply) GetCustomerId() *wrappers.StringValue {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type MakeVoiceCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// Types that are assignable to Customer:
	//	*MakeVoiceCallRequest_CustomerId
	//	*MakeVoiceCallRequest_CustomerNumber
	Customer      isMakeVoiceCallRequest_Customer `protobuf_oneof:"customer"`
	ChannelNumber *VoiceChannelNumber             `protobuf:"bytes,5,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
}

func (x *MakeVoiceCallRequest) Reset() {
	*x = MakeVoiceCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeVoiceCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeVoiceCallRequest) ProtoMessage() {}

func (x *MakeVoiceCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeVoiceCallRequest.ProtoReflect.Descriptor instead.
func (*MakeVoiceCallRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{26}
}

func (x *MakeVoiceCallRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MakeVoiceCallRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (m *MakeVoiceCallRequest) GetCustomer() isMakeVoiceCallRequest_Customer {
	if m != nil {
		return m.Customer
	}
	return nil
}

func (x *MakeVoiceCallRequest) GetCustomerId() string {
	if x, ok := x.GetCustomer().(*MakeVoiceCallRequest_CustomerId); ok {
		return x.CustomerId
	}
	return ""
}

func (x *MakeVoiceCallRequest) GetCustomerNumber() *CustomerNumber {
	if x, ok := x.GetCustomer().(*MakeVoiceCallRequest_CustomerNumber); ok {
		return x.CustomerNumber
	}
	return nil
}

func (x *MakeVoiceCallRequest) GetChannelNumber() *VoiceChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

type isMakeVoiceCallRequest_Customer interface {
	isMakeVoiceCallRequest_Customer()
}

type MakeVoiceCallRequest_CustomerId struct {
	CustomerId string `protobuf:"bytes,3,opt,name=customer_id,json=customerId,proto3,oneof"`
}

type MakeVoiceCallRequest_CustomerNumber struct {
	CustomerNumber *CustomerNumber `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3,oneof"`
}

func (*MakeVoiceCallRequest_CustomerId) isMakeVoiceCallRequest_Customer() {}

func (*MakeVoiceCallRequest_CustomerNumber) isMakeVoiceCallRequest_Customer() {}

type MakeVoiceCallReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      VoiceCallStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.VoiceCallStatus" json:"status,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SessionId   *wrappers.StringValue `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CustomerId  *wrappers.StringValue `protobuf:"bytes,4,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
}

func (x *MakeVoiceCallReply) Reset() {
	*x = MakeVoiceCallReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeVoiceCallReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeVoiceCallReply) ProtoMessage() {}

func (x *MakeVoiceCallReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeVoiceCallReply.ProtoReflect.Descriptor instead.
func (*MakeVoiceCallReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{27}
}

func (x *MakeVoiceCallReply) GetStatus() VoiceCallStatus {
	if x != nil {
		return x.Status
	}
	return VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED
}

func (x *MakeVoiceCallReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MakeVoiceCallReply) GetSessionId() *wrappers.StringValue {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *MakeVoiceCallReply) GetCustomerId() *wrappers.StringValue {
	if x != nil {
		return x.CustomerId
	}
	return nil
}

type UpdateCustomerStateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdateCustomerStateReply) Reset() {
	*x = UpdateCustomerStateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCustomerStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCustomerStateReply) ProtoMessage() {}

func (x *UpdateCustomerStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCustomerStateReply.ProtoReflect.Descriptor instead.
func (*UpdateCustomerStateReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateCustomerStateReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *UpdateCustomerStateReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type TagCommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Description string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	WorkId      *wrappers.StringValue `protobuf:"bytes,3,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty"`
}

func (x *TagCommandReply) Reset() {
	*x = TagCommandReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagCommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagCommandReply) ProtoMessage() {}

func (x *TagCommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagCommandReply.ProtoReflect.Descriptor instead.
func (*TagCommandReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{29}
}

func (x *TagCommandReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *TagCommandReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TagCommandReply) GetWorkId() *wrappers.StringValue {
	if x != nil {
		return x.WorkId
	}
	return nil
}

type StreamNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *StreamNotificationRequest) Reset() {
	*x = StreamNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamNotificationRequest) ProtoMessage() {}

func (x *StreamNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamNotificationRequest.ProtoReflect.Descriptor instead.
func (*StreamNotificationRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{30}
}

func (x *StreamNotificationRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type MessagingConsentStatusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId     string                  `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Status         MessagingConsentStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
}

func (x *MessagingConsentStatusNotification) Reset() {
	*x = MessagingConsentStatusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentStatusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentStatusNotification) ProtoMessage() {}

func (x *MessagingConsentStatusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentStatusNotification.ProtoReflect.Descriptor instead.
func (*MessagingConsentStatusNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{31}
}

func (x *MessagingConsentStatusNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingConsentStatusNotification) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingConsentStatusNotification) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingConsentStatusNotification) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

type MessagingSessionStatusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId     string                  `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Expiration     *timestamp.Timestamp    `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Status         MessagingSessionStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingSessionStatus" json:"status,omitempty"`
}

func (x *MessagingSessionStatusNotification) Reset() {
	*x = MessagingSessionStatusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingSessionStatusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingSessionStatusNotification) ProtoMessage() {}

func (x *MessagingSessionStatusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingSessionStatusNotification.ProtoReflect.Descriptor instead.
func (*MessagingSessionStatusNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{32}
}

func (x *MessagingSessionStatusNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingSessionStatusNotification) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingSessionStatusNotification) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingSessionStatusNotification) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *MessagingSessionStatusNotification) GetStatus() MessagingSessionStatus {
	if x != nil {
		return x.Status
	}
	return MessagingSessionStatus_MESSAGING_SESSION_STATUSN_UNSPECIFIED
}

type ReminderNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  string                `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Reminder   *CustomerReminder     `protobuf:"bytes,3,opt,name=reminder,proto3" json:"reminder,omitempty"`
	Tag        *CustomerIndex        `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	WorkId     *wrappers.StringValue `protobuf:"bytes,5,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty"`
}

func (x *ReminderNotification) Reset() {
	*x = ReminderNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReminderNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderNotification) ProtoMessage() {}

func (x *ReminderNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderNotification.ProtoReflect.Descriptor instead.
func (*ReminderNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{33}
}

func (x *ReminderNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReminderNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReminderNotification) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

func (x *ReminderNotification) GetTag() *CustomerIndex {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ReminderNotification) GetWorkId() *wrappers.StringValue {
	if x != nil {
		return x.WorkId
	}
	return nil
}

type ReceivedMessageNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      string                  `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId     string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	MessageId      string                  `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,5,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,6,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Text           *wrappers.StringValue   `protobuf:"bytes,7,opt,name=text,proto3" json:"text,omitempty"`
	Media          []*MediaMessageBody     `protobuf:"bytes,8,rep,name=media,proto3" json:"media,omitempty"`
	Location       *LocationMessageBody    `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ReceivedMessageNotification) Reset() {
	*x = ReceivedMessageNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedMessageNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedMessageNotification) ProtoMessage() {}

func (x *ReceivedMessageNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedMessageNotification.ProtoReflect.Descriptor instead.
func (*ReceivedMessageNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{34}
}

func (x *ReceivedMessageNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReceivedMessageNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReceivedMessageNotification) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ReceivedMessageNotification) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *ReceivedMessageNotification) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *ReceivedMessageNotification) GetText() *wrappers.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *ReceivedMessageNotification) GetMedia() []*MediaMessageBody {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *ReceivedMessageNotification) GetLocation() *LocationMessageBody {
	if x != nil {
		return x.Location
	}
	return nil
}

type MessageStatusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  string                `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	MessageId  string                `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Status     MessageDeliveryStatus `protobuf:"varint,4,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
}

func (x *MessageStatusNotification) Reset() {
	*x = MessageStatusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStatusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStatusNotification) ProtoMessage() {}

func (x *MessageStatusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStatusNotification.ProtoReflect.Descriptor instead.
func (*MessageStatusNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{35}
}

func (x *MessageStatusNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *MessageStatusNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessageStatusNotification) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageStatusNotification) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

type UssdSessionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      string                `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId     string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	SessionId      string                `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChannelNumber  string                `protobuf:"bytes,4,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	CustomerNumber string                `protobuf:"bytes,5,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	Input          *wrappers.StringValue `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *UssdSessionNotification) Reset() {
	*x = UssdSessionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdSessionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdSessionNotification) ProtoMessage() {}

func (x *UssdSessionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdSessionNotification.ProtoReflect.Descriptor instead.
func (*UssdSessionNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{36}
}

func (x *UssdSessionNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *UssdSessionNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UssdSessionNotification) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UssdSessionNotification) GetChannelNumber() string {
	if x != nil {
		return x.ChannelNumber
	}
	return ""
}

func (x *UssdSessionNotification) GetCustomerNumber() string {
	if x != nil {
		return x.CustomerNumber
	}
	return ""
}

func (x *UssdSessionNotification) GetInput() *wrappers.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

type VoiceCallNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      string                 `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId     string                 `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	SessionId      string                 `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ChannelNumber  *VoiceChannelNumber    `protobuf:"bytes,4,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	CustomerNumber *CustomerNumber        `protobuf:"bytes,5,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	Direction      CustomerEventDirection `protobuf:"varint,6,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	Input          *VoiceCallHopInput     `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Duration       *duration.Duration     `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Cost           *Cash                  `protobuf:"bytes,9,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *VoiceCallNotification) Reset() {
	*x = VoiceCallNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallNotification) ProtoMessage() {}

func (x *VoiceCallNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallNotification.ProtoReflect.Descriptor instead.
func (*VoiceCallNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{37}
}

func (x *VoiceCallNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *VoiceCallNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *VoiceCallNotification) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *VoiceCallNotification) GetChannelNumber() *VoiceChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *VoiceCallNotification) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *VoiceCallNotification) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *VoiceCallNotification) GetInput() *VoiceCallHopInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *VoiceCallNotification) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *VoiceCallNotification) GetCost() *Cash {
	if x != nil {
		return x.Cost
	}
	return nil
}

type ReceivedPaymentNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId      string                `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId     string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	TransactionId  string                `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	CustomerNumber *CustomerNumber       `protobuf:"bytes,4,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *PaymentChannelNumber `protobuf:"bytes,5,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Value          *Cash                 `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Status         PaymentStatus         `protobuf:"varint,7,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
}

func (x *ReceivedPaymentNotification) Reset() {
	*x = ReceivedPaymentNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceivedPaymentNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedPaymentNotification) ProtoMessage() {}

func (x *ReceivedPaymentNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedPaymentNotification.ProtoReflect.Descriptor instead.
func (*ReceivedPaymentNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{38}
}

func (x *ReceivedPaymentNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ReceivedPaymentNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReceivedPaymentNotification) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ReceivedPaymentNotification) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *ReceivedPaymentNotification) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *ReceivedPaymentNotification) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ReceivedPaymentNotification) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

type PaymentStatusNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId     string        `protobuf:"bytes,1,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	CustomerId    string        `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	TransactionId string        `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Status        PaymentStatus `protobuf:"varint,4,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
}

func (x *PaymentStatusNotification) Reset() {
	*x = PaymentStatusNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentStatusNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentStatusNotification) ProtoMessage() {}

func (x *PaymentStatusNotification) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentStatusNotification.ProtoReflect.Descriptor instead.
func (*PaymentStatusNotification) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{39}
}

func (x *PaymentStatusNotification) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *PaymentStatusNotification) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *PaymentStatusNotification) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PaymentStatusNotification) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

type WebhookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string               `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to Entry:
	//	*WebhookRequest_MessagingConsentStatus
	//	*WebhookRequest_MessagingSessionStatus
	//	*WebhookRequest_Reminder
	//	*WebhookRequest_ReceivedMessage
	//	*WebhookRequest_MessageStatus
	//	*WebhookRequest_UssdSession
	//	*WebhookRequest_VoiceCall
	//	*WebhookRequest_ReceivedPayment
	//	*WebhookRequest_PaymentStatus
	Entry isWebhookRequest_Entry `protobuf_oneof:"entry"`
}

func (x *WebhookRequest) Reset() {
	*x = WebhookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookRequest) ProtoMessage() {}

func (x *WebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookRequest.ProtoReflect.Descriptor instead.
func (*WebhookRequest) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{40}
}

func (x *WebhookRequest) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WebhookRequest) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *WebhookRequest) GetEntry() isWebhookRequest_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *WebhookRequest) GetMessagingConsentStatus() *MessagingConsentStatusNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_MessagingConsentStatus); ok {
		return x.MessagingConsentStatus
	}
	return nil
}

func (x *WebhookRequest) GetMessagingSessionStatus() *MessagingSessionStatusNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_MessagingSessionStatus); ok {
		return x.MessagingSessionStatus
	}
	return nil
}

func (x *WebhookRequest) GetReminder() *ReminderNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_Reminder); ok {
		return x.Reminder
	}
	return nil
}

func (x *WebhookRequest) GetReceivedMessage() *ReceivedMessageNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_ReceivedMessage); ok {
		return x.ReceivedMessage
	}
	return nil
}

func (x *WebhookRequest) GetMessageStatus() *MessageStatusNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_MessageStatus); ok {
		return x.MessageStatus
	}
	return nil
}

func (x *WebhookRequest) GetUssdSession() *UssdSessionNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_UssdSession); ok {
		return x.UssdSession
	}
	return nil
}

func (x *WebhookRequest) GetVoiceCall() *VoiceCallNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_VoiceCall); ok {
		return x.VoiceCall
	}
	return nil
}

func (x *WebhookRequest) GetReceivedPayment() *ReceivedPaymentNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_ReceivedPayment); ok {
		return x.ReceivedPayment
	}
	return nil
}

func (x *WebhookRequest) GetPaymentStatus() *PaymentStatusNotification {
	if x, ok := x.GetEntry().(*WebhookRequest_PaymentStatus); ok {
		return x.PaymentStatus
	}
	return nil
}

type isWebhookRequest_Entry interface {
	isWebhookRequest_Entry()
}

type WebhookRequest_MessagingConsentStatus struct {
	MessagingConsentStatus *MessagingConsentStatusNotification `protobuf:"bytes,3,opt,name=messaging_consent_status,json=messagingConsentStatus,proto3,oneof"`
}

type WebhookRequest_MessagingSessionStatus struct {
	MessagingSessionStatus *MessagingSessionStatusNotification `protobuf:"bytes,4,opt,name=messaging_session_status,json=messagingSessionStatus,proto3,oneof"`
}

type WebhookRequest_Reminder struct {
	Reminder *ReminderNotification `protobuf:"bytes,5,opt,name=reminder,proto3,oneof"`
}

type WebhookRequest_ReceivedMessage struct {
	ReceivedMessage *ReceivedMessageNotification `protobuf:"bytes,6,opt,name=received_message,json=receivedMessage,proto3,oneof"`
}

type WebhookRequest_MessageStatus struct {
	MessageStatus *MessageStatusNotification `protobuf:"bytes,7,opt,name=message_status,json=messageStatus,proto3,oneof"`
}

type WebhookRequest_UssdSession struct {
	UssdSession *UssdSessionNotification `protobuf:"bytes,8,opt,name=ussd_session,json=ussdSession,proto3,oneof"`
}

type WebhookRequest_VoiceCall struct {
	VoiceCall *VoiceCallNotification `protobuf:"bytes,9,opt,name=voice_call,json=voiceCall,proto3,oneof"`
}

type WebhookRequest_ReceivedPayment struct {
	ReceivedPayment *ReceivedPaymentNotification `protobuf:"bytes,10,opt,name=received_payment,json=receivedPayment,proto3,oneof"`
}

type WebhookRequest_PaymentStatus struct {
	PaymentStatus *PaymentStatusNotification `protobuf:"bytes,11,opt,name=payment_status,json=paymentStatus,proto3,oneof"`
}

func (*WebhookRequest_MessagingConsentStatus) isWebhookRequest_Entry() {}

func (*WebhookRequest_MessagingSessionStatus) isWebhookRequest_Entry() {}

func (*WebhookRequest_Reminder) isWebhookRequest_Entry() {}

func (*WebhookRequest_ReceivedMessage) isWebhookRequest_Entry() {}

func (*WebhookRequest_MessageStatus) isWebhookRequest_Entry() {}

func (*WebhookRequest_UssdSession) isWebhookRequest_Entry() {}

func (*WebhookRequest_VoiceCall) isWebhookRequest_Entry() {}

func (*WebhookRequest_ReceivedPayment) isWebhookRequest_Entry() {}

func (*WebhookRequest_PaymentStatus) isWebhookRequest_Entry() {}

type WebhookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId            string             `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SessionId        string             `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	UssdMenu         *UssdMenu          `protobuf:"bytes,3,opt,name=ussd_menu,json=ussdMenu,proto3" json:"ussd_menu,omitempty"`
	VoiceCallActions []*VoiceCallAction `protobuf:"bytes,4,rep,name=voice_call_actions,json=voiceCallActions,proto3" json:"voice_call_actions,omitempty"`
}

func (x *WebhookResponse) Reset() {
	*x = WebhookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookResponse) ProtoMessage() {}

func (x *WebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookResponse.ProtoReflect.Descriptor instead.
func (*WebhookResponse) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{41}
}

func (x *WebhookResponse) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *WebhookResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WebhookResponse) GetUssdMenu() *UssdMenu {
	if x != nil {
		return x.UssdMenu
	}
	return nil
}

func (x *WebhookResponse) GetVoiceCallActions() []*VoiceCallAction {
	if x != nil {
		return x.VoiceCallActions
	}
	return nil
}

type WebhookResponseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      bool   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *WebhookResponseReply) Reset() {
	*x = WebhookResponseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebhookResponseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookResponseReply) ProtoMessage() {}

func (x *WebhookResponseReply) ProtoReflect() protoreflect.Message {
	mi := &file_web_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookResponseReply.ProtoReflect.Descriptor instead.
func (*WebhookResponseReply) Descriptor() ([]byte, []int) {
	return file_web_proto_rawDescGZIP(), []int{42}
}

func (x *WebhookResponseReply) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *WebhookResponseReply) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_web_proto protoreflect.FileDescriptor

var file_web_proto_rawDesc = []byte{
	0x0a, 0x09, 0x77, 0x65, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x29, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x5d, 0x0a,
	0x0e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x22, 0x95, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd9, 0x04, 0x0a, 0x16, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x75, 0x73, 0x73, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x75, 0x73,
	0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x58, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x15, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x41, 0x64,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xe9,
	0x01, 0x0a, 0x1d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x20, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0xee, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x22, 0xc7, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x20, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x22, 0x86, 0x02, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xd6, 0x02, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x5f, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xd4, 0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xe3, 0x02, 0x0a,
	0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd1, 0x02,
	0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0xf7, 0x01, 0x0a,
	0x10, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd9, 0x02, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x22, 0xfb, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xa1, 0x02, 0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x82, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xb5, 0x02, 0x0a, 0x22, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xf1, 0x02, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44,
	0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x35, 0x0a,
	0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x64, 0x22, 0xdf, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a,
	0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x47, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x55,
	0x73, 0x73, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x92, 0x04, 0x0a, 0x15, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x9d,
	0x03, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xc8, 0x07, 0x0a, 0x0e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x76, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x76,
	0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x60, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x54, 0x0a, 0x0c, 0x75, 0x73, 0x73, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x73, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x73, 0x73, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xdd, 0x01,
	0x0a, 0x0f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x73, 0x73, 0x64, 0x5f,
	0x6d, 0x65, 0x6e, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x08, 0x75, 0x73,
	0x73, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x55, 0x0a, 0x12, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x50, 0x0a,
	0x14, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x32,
	0xeb, 0x14, 0x0a, 0x0e, 0x47, 0x72, 0x70, 0x63, 0x57, 0x65, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x5f, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x12, 0x41, 0x64, 0x6f,
	0x70, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x61,
	0x67, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x35,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x42, 0x79, 0x54, 0x61, 0x67, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x79,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x54, 0x61, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x12, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x89, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x38,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a,
	0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x79,
	0x54, 0x61, 0x67, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x10, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0d, 0x4d, 0x61,
	0x6b, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6e, 0x0a,
	0x13, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_proto_rawDescOnce sync.Once
	file_web_proto_rawDescData = file_web_proto_rawDesc
)

func file_web_proto_rawDescGZIP() []byte {
	file_web_proto_rawDescOnce.Do(func() {
		file_web_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_proto_rawDescData)
	})
	return file_web_proto_rawDescData
}

var file_web_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_web_proto_goTypes = []interface{}{
	(*AuthTokenRequest)(nil),                   // 0: com.elarian.hera.proto.AuthTokenRequest
	(*AuthTokenReply)(nil),                     // 1: com.elarian.hera.proto.AuthTokenReply
	(*GetCustomerStateRequest)(nil),            // 2: com.elarian.hera.proto.GetCustomerStateRequest
	(*GetCustomerStateReply)(nil),              // 3: com.elarian.hera.proto.GetCustomerStateReply
	(*CustomerStateReplyData)(nil),             // 4: com.elarian.hera.proto.CustomerStateReplyData
	(*AdoptCustomerStateRequest)(nil),          // 5: com.elarian.hera.proto.AdoptCustomerStateRequest
	(*AddCustomerReminderRequest)(nil),         // 6: com.elarian.hera.proto.AddCustomerReminderRequest
	(*AddCustomerReminderTagRequest)(nil),      // 7: com.elarian.hera.proto.AddCustomerReminderTagRequest
	(*CancelCustomerReminderRequest)(nil),      // 8: com.elarian.hera.proto.CancelCustomerReminderRequest
	(*CancelCustomerReminderTagRequest)(nil),   // 9: com.elarian.hera.proto.CancelCustomerReminderTagRequest
	(*UpdateCustomerTagRequest)(nil),           // 10: com.elarian.hera.proto.UpdateCustomerTagRequest
	(*DeleteCustomerTagRequest)(nil),           // 11: com.elarian.hera.proto.DeleteCustomerTagRequest
	(*UpdateCustomerSecondaryIdRequest)(nil),   // 12: com.elarian.hera.proto.UpdateCustomerSecondaryIdRequest
	(*DeleteCustomerSecondaryIdRequest)(nil),   // 13: com.elarian.hera.proto.DeleteCustomerSecondaryIdRequest
	(*UpdateCustomerMetadataRequest)(nil),      // 14: com.elarian.hera.proto.UpdateCustomerMetadataRequest
	(*DeleteCustomerMetadataRequest)(nil),      // 15: com.elarian.hera.proto.DeleteCustomerMetadataRequest
	(*SendMessageRequest)(nil),                 // 16: com.elarian.hera.proto.SendMessageRequest
	(*SendMessageTagRequest)(nil),              // 17: com.elarian.hera.proto.SendMessageTagRequest
	(*ReplyToMessageRequest)(nil),              // 18: com.elarian.hera.proto.ReplyToMessageRequest
	(*SendMessageReply)(nil),                   // 19: com.elarian.hera.proto.SendMessageReply
	(*MessagingConsentRequest)(nil),            // 20: com.elarian.hera.proto.MessagingConsentRequest
	(*MessagingConsentReply)(nil),              // 21: com.elarian.hera.proto.MessagingConsentReply
	(*SendPaymentRequest)(nil),                 // 22: com.elarian.hera.proto.SendPaymentRequest
	(*SendPaymentReply)(nil),                   // 23: com.elarian.hera.proto.SendPaymentReply
	(*CheckoutPaymentRequest)(nil),             // 24: com.elarian.hera.proto.CheckoutPaymentRequest
	(*CheckoutPaymentReply)(nil),               // 25: com.elarian.hera.proto.CheckoutPaymentReply
	(*MakeVoiceCallRequest)(nil),               // 26: com.elarian.hera.proto.MakeVoiceCallRequest
	(*MakeVoiceCallReply)(nil),                 // 27: com.elarian.hera.proto.MakeVoiceCallReply
	(*UpdateCustomerStateReply)(nil),           // 28: com.elarian.hera.proto.UpdateCustomerStateReply
	(*TagCommandReply)(nil),                    // 29: com.elarian.hera.proto.TagCommandReply
	(*StreamNotificationRequest)(nil),          // 30: com.elarian.hera.proto.StreamNotificationRequest
	(*MessagingConsentStatusNotification)(nil), // 31: com.elarian.hera.proto.MessagingConsentStatusNotification
	(*MessagingSessionStatusNotification)(nil), // 32: com.elarian.hera.proto.MessagingSessionStatusNotification
	(*ReminderNotification)(nil),               // 33: com.elarian.hera.proto.ReminderNotification
	(*ReceivedMessageNotification)(nil),        // 34: com.elarian.hera.proto.ReceivedMessageNotification
	(*MessageStatusNotification)(nil),          // 35: com.elarian.hera.proto.MessageStatusNotification
	(*UssdSessionNotification)(nil),            // 36: com.elarian.hera.proto.UssdSessionNotification
	(*VoiceCallNotification)(nil),              // 37: com.elarian.hera.proto.VoiceCallNotification
	(*ReceivedPaymentNotification)(nil),        // 38: com.elarian.hera.proto.ReceivedPaymentNotification
	(*PaymentStatusNotification)(nil),          // 39: com.elarian.hera.proto.PaymentStatusNotification
	(*WebhookRequest)(nil),                     // 40: com.elarian.hera.proto.WebhookRequest
	(*WebhookResponse)(nil),                    // 41: com.elarian.hera.proto.WebhookResponse
	(*WebhookResponseReply)(nil),               // 42: com.elarian.hera.proto.WebhookResponseReply
	nil,                                        // 43: com.elarian.hera.proto.CustomerStateReplyData.MetadataEntry
	nil,                                        // 44: com.elarian.hera.proto.UpdateCustomerMetadataRequest.MetadataEntry
	(*duration.Duration)(nil),                  // 45: google.protobuf.Duration
	(*CustomerNumber)(nil),                     // 46: com.elarian.hera.proto.CustomerNumber
	(*MessagingState)(nil),                     // 47: com.elarian.hera.proto.MessagingState
	(*UssdState)(nil),                          // 48: com.elarian.hera.proto.UssdState
	(*VoiceState)(nil),                         // 49: com.elarian.hera.proto.VoiceState
	(*PaymentState)(nil),                       // 50: com.elarian.hera.proto.PaymentState
	(*CustomerIndex)(nil),                      // 51: com.elarian.hera.proto.CustomerIndex
	(*CustomerReminder)(nil),                   // 52: com.elarian.hera.proto.CustomerReminder
	(*IndexMapping)(nil),                       // 53: com.elarian.hera.proto.IndexMapping
	(*MessagingChannelNumber)(nil),             // 54: com.elarian.hera.proto.MessagingChannelNumber
	(*CustomerMessageBody)(nil),                // 55: com.elarian.hera.proto.CustomerMessageBody
	(MessageDeliveryStatus)(0),                 // 56: com.elarian.hera.proto.MessageDeliveryStatus
	(*wrappers.StringValue)(nil),               // 57: google.protobuf.StringValue
	(MessagingConsentAction)(0),                // 58: com.elarian.hera.proto.MessagingConsentAction
	(MessagingConsentStatus)(0),                // 59: com.elarian.hera.proto.MessagingConsentStatus
	(*PaymentChannelNumber)(nil),               // 60: com.elarian.hera.proto.PaymentChannelNumber
	(*Cash)(nil),                               // 61: com.elarian.hera.proto.Cash
	(PaymentStatus)(0),                         // 62: com.elarian.hera.proto.PaymentStatus
	(*VoiceChannelNumber)(nil),                 // 63: com.elarian.hera.proto.VoiceChannelNumber
	(VoiceCallStatus)(0),                       // 64: com.elarian.hera.proto.VoiceCallStatus
	(*timestamp.Timestamp)(nil),                // 65: google.protobuf.Timestamp
	(MessagingSessionStatus)(0),                // 66: com.elarian.hera.proto.MessagingSessionStatus
	(*MediaMessageBody)(nil),                   // 67: com.elarian.hera.proto.MediaMessageBody
	(*LocationMessageBody)(nil),                // 68: com.elarian.hera.proto.LocationMessageBody
	(CustomerEventDirection)(0),                // 69: com.elarian.hera.proto.CustomerEventDirection
	(*VoiceCallHopInput)(nil),                  // 70: com.elarian.hera.proto.VoiceCallHopInput
	(*UssdMenu)(nil),                           // 71: com.elarian.hera.proto.UssdMenu
	(*VoiceCallAction)(nil),                    // 72: com.elarian.hera.proto.VoiceCallAction
}
var file_web_proto_depIdxs = []int32{
	45,  // 0: com.elarian.hera.proto.AuthTokenReply.lifetime:type_name -> google.protobuf.Duration
	46,  // 1: com.elarian.hera.proto.GetCustomerStateRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	4,   // 2: com.elarian.hera.proto.GetCustomerStateReply.data:type_name -> com.elarian.hera.proto.CustomerStateReplyData
	47,  // 3: com.elarian.hera.proto.CustomerStateReplyData.messaging_state:type_name -> com.elarian.hera.proto.MessagingState
	48,  // 4: com.elarian.hera.proto.CustomerStateReplyData.ussd_state:type_name -> com.elarian.hera.proto.UssdState
	49,  // 5: com.elarian.hera.proto.CustomerStateReplyData.voice_state:type_name -> com.elarian.hera.proto.VoiceState
	50,  // 6: com.elarian.hera.proto.CustomerStateReplyData.payment_state:type_name -> com.elarian.hera.proto.PaymentState
	51,  // 7: com.elarian.hera.proto.CustomerStateReplyData.tags:type_name -> com.elarian.hera.proto.CustomerIndex
	43,  // 8: com.elarian.hera.proto.CustomerStateReplyData.metadata:type_name -> com.elarian.hera.proto.CustomerStateReplyData.MetadataEntry
	51,  // 9: com.elarian.hera.proto.CustomerStateReplyData.secondary_ids:type_name -> com.elarian.hera.proto.CustomerIndex
	46,  // 10: com.elarian.hera.proto.AdoptCustomerStateRequest.other_customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	46,  // 11: com.elarian.hera.proto.AddCustomerReminderRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	52,  // 12: com.elarian.hera.proto.AddCustomerReminderRequest.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	53,  // 13: com.elarian.hera.proto.AddCustomerReminderTagRequest.tag:type_name -> com.elarian.hera.proto.IndexMapping
	52,  // 14: com.elarian.hera.proto.AddCustomerReminderTagRequest.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	46,  // 15: com.elarian.hera.proto.CancelCustomerReminderRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	53,  // 16: com.elarian.hera.proto.CancelCustomerReminderTagRequest.tag:type_name -> com.elarian.hera.proto.IndexMapping
	46,  // 17: com.elarian.hera.proto.UpdateCustomerTagRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	51,  // 18: com.elarian.hera.proto.UpdateCustomerTagRequest.tags:type_name -> com.elarian.hera.proto.CustomerIndex
	46,  // 19: com.elarian.hera.proto.DeleteCustomerTagRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	46,  // 20: com.elarian.hera.proto.UpdateCustomerSecondaryIdRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	51,  // 21: com.elarian.hera.proto.UpdateCustomerSecondaryIdRequest.secondary_ids:type_name -> com.elarian.hera.proto.CustomerIndex
	46,  // 22: com.elarian.hera.proto.DeleteCustomerSecondaryIdRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	53,  // 23: com.elarian.hera.proto.DeleteCustomerSecondaryIdRequest.secondary_ids:type_name -> com.elarian.hera.proto.IndexMapping
	46,  // 24: com.elarian.hera.proto.UpdateCustomerMetadataRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	44,  // 25: com.elarian.hera.proto.UpdateCustomerMetadataRequest.metadata:type_name -> com.elarian.hera.proto.UpdateCustomerMetadataRequest.MetadataEntry
	46,  // 26: com.elarian.hera.proto.DeleteCustomerMetadataRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	46,  // 27: com.elarian.hera.proto.SendMessageRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	54,  // 28: com.elarian.hera.proto.SendMessageRequest.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	55,  // 29: com.elarian.hera.proto.SendMessageRequest.body:type_name -> com.elarian.hera.proto.CustomerMessageBody
	53,  // 30: com.elarian.hera.proto.SendMessageTagRequest.tag:type_name -> com.elarian.hera.proto.IndexMapping
	54,  // 31: com.elarian.hera.proto.SendMessageTagRequest.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	55,  // 32: com.elarian.hera.proto.SendMessageTagRequest.body:type_name -> com.elarian.hera.proto.CustomerMessageBody
	55,  // 33: com.elarian.hera.proto.ReplyToMessageRequest.body:type_name -> com.elarian.hera.proto.CustomerMessageBody
	56,  // 34: com.elarian.hera.proto.SendMessageReply.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	57,  // 35: com.elarian.hera.proto.SendMessageReply.message_id:type_name -> google.protobuf.StringValue
	57,  // 36: com.elarian.hera.proto.SendMessageReply.customer_id:type_name -> google.protobuf.StringValue
	46,  // 37: com.elarian.hera.proto.MessagingConsentRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	54,  // 38: com.elarian.hera.proto.MessagingConsentRequest.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	58,  // 39: com.elarian.hera.proto.MessagingConsentRequest.action:type_name -> com.elarian.hera.proto.MessagingConsentAction
	59,  // 40: com.elarian.hera.proto.MessagingConsentReply.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	57,  // 41: com.elarian.hera.proto.MessagingConsentReply.customer_id:type_name -> google.protobuf.StringValue
	46,  // 42: com.elarian.hera.proto.SendPaymentRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	60,  // 43: com.elarian.hera.proto.SendPaymentRequest.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	61,  // 44: com.elarian.hera.proto.SendPaymentRequest.value:type_name -> com.elarian.hera.proto.Cash
	62,  // 45: com.elarian.hera.proto.SendPaymentReply.status:type_name -> com.elarian.hera.proto.PaymentStatus
	57,  // 46: com.elarian.hera.proto.SendPaymentReply.transaction_id:type_name -> google.protobuf.StringValue
	57,  // 47: com.elarian.hera.proto.SendPaymentReply.customer_id:type_name -> google.protobuf.StringValue
	46,  // 48: com.elarian.hera.proto.CheckoutPaymentRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	60,  // 49: com.elarian.hera.proto.CheckoutPaymentRequest.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	61,  // 50: com.elarian.hera.proto.CheckoutPaymentRequest.value:type_name -> com.elarian.hera.proto.Cash
	62,  // 51: com.elarian.hera.proto.CheckoutPaymentReply.status:type_name -> com.elarian.hera.proto.PaymentStatus
	57,  // 52: com.elarian.hera.proto.CheckoutPaymentReply.transaction_id:type_name -> google.protobuf.StringValue
	57,  // 53: com.elarian.hera.proto.CheckoutPaymentReply.customer_id:type_name -> google.protobuf.StringValue
	46,  // 54: com.elarian.hera.proto.MakeVoiceCallRequest.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	63,  // 55: com.elarian.hera.proto.MakeVoiceCallRequest.channel_number:type_name -> com.elarian.hera.proto.VoiceChannelNumber
	64,  // 56: com.elarian.hera.proto.MakeVoiceCallReply.status:type_name -> com.elarian.hera.proto.VoiceCallStatus
	57,  // 57: com.elarian.hera.proto.MakeVoiceCallReply.session_id:type_name -> google.protobuf.StringValue
	57,  // 58: com.elarian.hera.proto.MakeVoiceCallReply.customer_id:type_name -> google.protobuf.StringValue
	57,  // 59: com.elarian.hera.proto.TagCommandReply.work_id:type_name -> google.protobuf.StringValue
	46,  // 60: com.elarian.hera.proto.MessagingConsentStatusNotification.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	54,  // 61: com.elarian.hera.proto.MessagingConsentStatusNotification.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	59,  // 62: com.elarian.hera.proto.MessagingConsentStatusNotification.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	46,  // 63: com.elarian.hera.proto.MessagingSessionStatusNotification.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	54,  // 64: com.elarian.hera.proto.MessagingSessionStatusNotification.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	65,  // 65: com.elarian.hera.proto.MessagingSessionStatusNotification.expiration:type_name -> google.protobuf.Timestamp
	66,  // 66: com.elarian.hera.proto.MessagingSessionStatusNotification.status:type_name -> com.elarian.hera.proto.MessagingSessionStatus
	52,  // 67: com.elarian.hera.proto.ReminderNotification.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	51,  // 68: com.elarian.hera.proto.ReminderNotification.tag:type_name -> com.elarian.hera.proto.CustomerIndex
	57,  // 69: com.elarian.hera.proto.ReminderNotification.work_id:type_name -> google.protobuf.StringValue
	46,  // 70: com.elarian.hera.proto.ReceivedMessageNotification.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	54,  // 71: com.elarian.hera.proto.ReceivedMessageNotification.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	57,  // 72: com.elarian.hera.proto.ReceivedMessageNotification.text:type_name -> google.protobuf.StringValue
	67,  // 73: com.elarian.hera.proto.ReceivedMessageNotification.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	68,  // 74: com.elarian.hera.proto.ReceivedMessageNotification.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	56,  // 75: com.elarian.hera.proto.MessageStatusNotification.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	57,  // 76: com.elarian.hera.proto.UssdSessionNotification.input:type_name -> google.protobuf.StringValue
	63,  // 77: com.elarian.hera.proto.VoiceCallNotification.channel_number:type_name -> com.elarian.hera.proto.VoiceChannelNumber
	46,  // 78: com.elarian.hera.proto.VoiceCallNotification.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	69,  // 79: com.elarian.hera.proto.VoiceCallNotification.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	70,  // 80: com.elarian.hera.proto.VoiceCallNotification.input:type_name -> com.elarian.hera.proto.VoiceCallHopInput
	45,  // 81: com.elarian.hera.proto.VoiceCallNotification.duration:type_name -> google.protobuf.Duration
	61,  // 82: com.elarian.hera.proto.VoiceCallNotification.cost:type_name -> com.elarian.hera.proto.Cash
	46,  // 83: com.elarian.hera.proto.ReceivedPaymentNotification.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	60,  // 84: com.elarian.hera.proto.ReceivedPaymentNotification.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	61,  // 85: com.elarian.hera.proto.ReceivedPaymentNotification.value:type_name -> com.elarian.hera.proto.Cash
	62,  // 86: com.elarian.hera.proto.ReceivedPaymentNotification.status:type_name -> com.elarian.hera.proto.PaymentStatus
	62,  // 87: com.elarian.hera.proto.PaymentStatusNotification.status:type_name -> com.elarian.hera.proto.PaymentStatus
	65,  // 88: com.elarian.hera.proto.WebhookRequest.timestamp:type_name -> google.protobuf.Timestamp
	31,  // 89: com.elarian.hera.proto.WebhookRequest.messaging_consent_status:type_name -> com.elarian.hera.proto.MessagingConsentStatusNotification
	32,  // 90: com.elarian.hera.proto.WebhookRequest.messaging_session_status:type_name -> com.elarian.hera.proto.MessagingSessionStatusNotification
	33,  // 91: com.elarian.hera.proto.WebhookRequest.reminder:type_name -> com.elarian.hera.proto.ReminderNotification
	34,  // 92: com.elarian.hera.proto.WebhookRequest.received_message:type_name -> com.elarian.hera.proto.ReceivedMessageNotification
	35,  // 93: com.elarian.hera.proto.WebhookRequest.message_status:type_name -> com.elarian.hera.proto.MessageStatusNotification
	36,  // 94: com.elarian.hera.proto.WebhookRequest.ussd_session:type_name -> com.elarian.hera.proto.UssdSessionNotification
	37,  // 95: com.elarian.hera.proto.WebhookRequest.voice_call:type_name -> com.elarian.hera.proto.VoiceCallNotification
	38,  // 96: com.elarian.hera.proto.WebhookRequest.received_payment:type_name -> com.elarian.hera.proto.ReceivedPaymentNotification
	39,  // 97: com.elarian.hera.proto.WebhookRequest.payment_status:type_name -> com.elarian.hera.proto.PaymentStatusNotification
	71,  // 98: com.elarian.hera.proto.WebhookResponse.ussd_menu:type_name -> com.elarian.hera.proto.UssdMenu
	72,  // 99: com.elarian.hera.proto.WebhookResponse.voice_call_actions:type_name -> com.elarian.hera.proto.VoiceCallAction
	0,   // 100: com.elarian.hera.proto.GrpcWebService.AuthToken:input_type -> com.elarian.hera.proto.AuthTokenRequest
	2,   // 101: com.elarian.hera.proto.GrpcWebService.GetCustomerState:input_type -> com.elarian.hera.proto.GetCustomerStateRequest
	5,   // 102: com.elarian.hera.proto.GrpcWebService.AdoptCustomerState:input_type -> com.elarian.hera.proto.AdoptCustomerStateRequest
	6,   // 103: com.elarian.hera.proto.GrpcWebService.AddCustomerReminder:input_type -> com.elarian.hera.proto.AddCustomerReminderRequest
	7,   // 104: com.elarian.hera.proto.GrpcWebService.AddCustomerReminderByTag:input_type -> com.elarian.hera.proto.AddCustomerReminderTagRequest
	8,   // 105: com.elarian.hera.proto.GrpcWebService.CancelCustomerReminder:input_type -> com.elarian.hera.proto.CancelCustomerReminderRequest
	9,   // 106: com.elarian.hera.proto.GrpcWebService.CancelCustomerReminderByTag:input_type -> com.elarian.hera.proto.CancelCustomerReminderTagRequest
	10,  // 107: com.elarian.hera.proto.GrpcWebService.UpdateCustomerTag:input_type -> com.elarian.hera.proto.UpdateCustomerTagRequest
	11,  // 108: com.elarian.hera.proto.GrpcWebService.DeleteCustomerTag:input_type -> com.elarian.hera.proto.DeleteCustomerTagRequest
	12,  // 109: com.elarian.hera.proto.GrpcWebService.UpdateCustomerSecondaryId:input_type -> com.elarian.hera.proto.UpdateCustomerSecondaryIdRequest
	13,  // 110: com.elarian.hera.proto.GrpcWebService.DeleteCustomerSecondaryId:input_type -> com.elarian.hera.proto.DeleteCustomerSecondaryIdRequest
	14,  // 111: com.elarian.hera.proto.GrpcWebService.UpdateCustomerMetadata:input_type -> com.elarian.hera.proto.UpdateCustomerMetadataRequest
	15,  // 112: com.elarian.hera.proto.GrpcWebService.DeleteCustomerMetadata:input_type -> com.elarian.hera.proto.DeleteCustomerMetadataRequest
	16,  // 113: com.elarian.hera.proto.GrpcWebService.SendMessage:input_type -> com.elarian.hera.proto.SendMessageRequest
	17,  // 114: com.elarian.hera.proto.GrpcWebService.SendMessageByTag:input_type -> com.elarian.hera.proto.SendMessageTagRequest
	18,  // 115: com.elarian.hera.proto.GrpcWebService.ReplyToMessage:input_type -> com.elarian.hera.proto.ReplyToMessageRequest
	20,  // 116: com.elarian.hera.proto.GrpcWebService.MessagingConsent:input_type -> com.elarian.hera.proto.MessagingConsentRequest
	22,  // 117: com.elarian.hera.proto.GrpcWebService.SendPayment:input_type -> com.elarian.hera.proto.SendPaymentRequest
	24,  // 118: com.elarian.hera.proto.GrpcWebService.CheckoutPayment:input_type -> com.elarian.hera.proto.CheckoutPaymentRequest
	26,  // 119: com.elarian.hera.proto.GrpcWebService.MakeVoiceCall:input_type -> com.elarian.hera.proto.MakeVoiceCallRequest
	30,  // 120: com.elarian.hera.proto.GrpcWebService.StreamNotifications:input_type -> com.elarian.hera.proto.StreamNotificationRequest
	41,  // 121: com.elarian.hera.proto.GrpcWebService.SendWebhookResponse:input_type -> com.elarian.hera.proto.WebhookResponse
	1,   // 122: com.elarian.hera.proto.GrpcWebService.AuthToken:output_type -> com.elarian.hera.proto.AuthTokenReply
	3,   // 123: com.elarian.hera.proto.GrpcWebService.GetCustomerState:output_type -> com.elarian.hera.proto.GetCustomerStateReply
	28,  // 124: com.elarian.hera.proto.GrpcWebService.AdoptCustomerState:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 125: com.elarian.hera.proto.GrpcWebService.AddCustomerReminder:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	29,  // 126: com.elarian.hera.proto.GrpcWebService.AddCustomerReminderByTag:output_type -> com.elarian.hera.proto.TagCommandReply
	28,  // 127: com.elarian.hera.proto.GrpcWebService.CancelCustomerReminder:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	29,  // 128: com.elarian.hera.proto.GrpcWebService.CancelCustomerReminderByTag:output_type -> com.elarian.hera.proto.TagCommandReply
	28,  // 129: com.elarian.hera.proto.GrpcWebService.UpdateCustomerTag:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 130: com.elarian.hera.proto.GrpcWebService.DeleteCustomerTag:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 131: com.elarian.hera.proto.GrpcWebService.UpdateCustomerSecondaryId:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 132: com.elarian.hera.proto.GrpcWebService.DeleteCustomerSecondaryId:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 133: com.elarian.hera.proto.GrpcWebService.UpdateCustomerMetadata:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	28,  // 134: com.elarian.hera.proto.GrpcWebService.DeleteCustomerMetadata:output_type -> com.elarian.hera.proto.UpdateCustomerStateReply
	19,  // 135: com.elarian.hera.proto.GrpcWebService.SendMessage:output_type -> com.elarian.hera.proto.SendMessageReply
	29,  // 136: com.elarian.hera.proto.GrpcWebService.SendMessageByTag:output_type -> com.elarian.hera.proto.TagCommandReply
	19,  // 137: com.elarian.hera.proto.GrpcWebService.ReplyToMessage:output_type -> com.elarian.hera.proto.SendMessageReply
	21,  // 138: com.elarian.hera.proto.GrpcWebService.MessagingConsent:output_type -> com.elarian.hera.proto.MessagingConsentReply
	23,  // 139: com.elarian.hera.proto.GrpcWebService.SendPayment:output_type -> com.elarian.hera.proto.SendPaymentReply
	25,  // 140: com.elarian.hera.proto.GrpcWebService.CheckoutPayment:output_type -> com.elarian.hera.proto.CheckoutPaymentReply
	27,  // 141: com.elarian.hera.proto.GrpcWebService.MakeVoiceCall:output_type -> com.elarian.hera.proto.MakeVoiceCallReply
	40,  // 142: com.elarian.hera.proto.GrpcWebService.StreamNotifications:output_type -> com.elarian.hera.proto.WebhookRequest
	42,  // 143: com.elarian.hera.proto.GrpcWebService.SendWebhookResponse:output_type -> com.elarian.hera.proto.WebhookResponseReply
	122, // [122:144] is the sub-list for method output_type
	100, // [100:122] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_web_proto_init() }
func file_web_proto_init() {
	if File_web_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_web_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthTokenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCustomerStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerStateReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdoptCustomerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomerReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCustomerReminderTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCustomerReminderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelCustomerReminderTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerSecondaryIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerSecondaryIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCustomerMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyToMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckoutPaymentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeVoiceCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeVoiceCallReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCustomerStateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagCommandReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentStatusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingSessionStatusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReminderNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedMessageNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStatusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdSessionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceivedPaymentNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentStatusNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebhookResponseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_web_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetCustomerStateRequest_CustomerId)(nil),
		(*GetCustomerStateRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AdoptCustomerStateRequest_OtherCustomerId)(nil),
		(*AdoptCustomerStateRequest_OtherCustomerNumber)(nil),
	}
	file_web_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*AddCustomerReminderRequest_CustomerId)(nil),
		(*AddCustomerReminderRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*CancelCustomerReminderRequest_CustomerId)(nil),
		(*CancelCustomerReminderRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*UpdateCustomerTagRequest_CustomerId)(nil),
		(*UpdateCustomerTagRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*DeleteCustomerTagRequest_CustomerId)(nil),
		(*DeleteCustomerTagRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*UpdateCustomerSecondaryIdRequest_CustomerId)(nil),
		(*UpdateCustomerSecondaryIdRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DeleteCustomerSecondaryIdRequest_CustomerId)(nil),
		(*DeleteCustomerSecondaryIdRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*UpdateCustomerMetadataRequest_CustomerId)(nil),
		(*UpdateCustomerMetadataRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*DeleteCustomerMetadataRequest_CustomerId)(nil),
		(*DeleteCustomerMetadataRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SendMessageRequest_CustomerId)(nil),
		(*SendMessageRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*MessagingConsentRequest_CustomerId)(nil),
		(*MessagingConsentRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SendPaymentRequest_CustomerId)(nil),
		(*SendPaymentRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*CheckoutPaymentRequest_CustomerId)(nil),
		(*CheckoutPaymentRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*MakeVoiceCallRequest_CustomerId)(nil),
		(*MakeVoiceCallRequest_CustomerNumber)(nil),
	}
	file_web_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*WebhookRequest_MessagingConsentStatus)(nil),
		(*WebhookRequest_MessagingSessionStatus)(nil),
		(*WebhookRequest_Reminder)(nil),
		(*WebhookRequest_ReceivedMessage)(nil),
		(*WebhookRequest_MessageStatus)(nil),
		(*WebhookRequest_UssdSession)(nil),
		(*WebhookRequest_VoiceCall)(nil),
		(*WebhookRequest_ReceivedPayment)(nil),
		(*WebhookRequest_PaymentStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web_proto_goTypes,
		DependencyIndexes: file_web_proto_depIdxs,
		MessageInfos:      file_web_proto_msgTypes,
	}.Build()
	File_web_proto = out.File
	file_web_proto_rawDesc = nil
	file_web_proto_goTypes = nil
	file_web_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GrpcWebServiceClient is the client API for GrpcWebService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcWebServiceClient interface {
	AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error)
	GetCustomerState(ctx context.Context, in *GetCustomerStateRequest, opts ...grpc.CallOption) (*GetCustomerStateReply, error)
	AdoptCustomerState(ctx context.Context, in *AdoptCustomerStateRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	AddCustomerReminder(ctx context.Context, in *AddCustomerReminderRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	AddCustomerReminderByTag(ctx context.Context, in *AddCustomerReminderTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error)
	CancelCustomerReminder(ctx context.Context, in *CancelCustomerReminderRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	CancelCustomerReminderByTag(ctx context.Context, in *CancelCustomerReminderTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error)
	UpdateCustomerTag(ctx context.Context, in *UpdateCustomerTagRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	DeleteCustomerTag(ctx context.Context, in *DeleteCustomerTagRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	UpdateCustomerSecondaryId(ctx context.Context, in *UpdateCustomerSecondaryIdRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	DeleteCustomerSecondaryId(ctx context.Context, in *DeleteCustomerSecondaryIdRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	UpdateCustomerMetadata(ctx context.Context, in *UpdateCustomerMetadataRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	DeleteCustomerMetadata(ctx context.Context, in *DeleteCustomerMetadataRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	SendMessageByTag(ctx context.Context, in *SendMessageTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error)
	ReplyToMessage(ctx context.Context, in *ReplyToMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	MessagingConsent(ctx context.Context, in *MessagingConsentRequest, opts ...grpc.CallOption) (*MessagingConsentReply, error)
	SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentReply, error)
	CheckoutPayment(ctx context.Context, in *CheckoutPaymentRequest, opts ...grpc.CallOption) (*CheckoutPaymentReply, error)
	MakeVoiceCall(ctx context.Context, in *MakeVoiceCallRequest, opts ...grpc.CallOption) (*MakeVoiceCallReply, error)
	StreamNotifications(ctx context.Context, in *StreamNotificationRequest, opts ...grpc.CallOption) (GrpcWebService_StreamNotificationsClient, error)
	SendWebhookResponse(ctx context.Context, in *WebhookResponse, opts ...grpc.CallOption) (*WebhookResponseReply, error)
}

type grpcWebServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcWebServiceClient(cc grpc.ClientConnInterface) GrpcWebServiceClient {
	return &grpcWebServiceClient{cc}
}

func (c *grpcWebServiceClient) AuthToken(ctx context.Context, in *AuthTokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error) {
	out := new(AuthTokenReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/AuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) GetCustomerState(ctx context.Context, in *GetCustomerStateRequest, opts ...grpc.CallOption) (*GetCustomerStateReply, error) {
	out := new(GetCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/GetCustomerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) AdoptCustomerState(ctx context.Context, in *AdoptCustomerStateRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/AdoptCustomerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) AddCustomerReminder(ctx context.Context, in *AddCustomerReminderRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/AddCustomerReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) AddCustomerReminderByTag(ctx context.Context, in *AddCustomerReminderTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error) {
	out := new(TagCommandReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/AddCustomerReminderByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) CancelCustomerReminder(ctx context.Context, in *CancelCustomerReminderRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/CancelCustomerReminder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) CancelCustomerReminderByTag(ctx context.Context, in *CancelCustomerReminderTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error) {
	out := new(TagCommandReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/CancelCustomerReminderByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) UpdateCustomerTag(ctx context.Context, in *UpdateCustomerTagRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) DeleteCustomerTag(ctx context.Context, in *DeleteCustomerTagRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) UpdateCustomerSecondaryId(ctx context.Context, in *UpdateCustomerSecondaryIdRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerSecondaryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) DeleteCustomerSecondaryId(ctx context.Context, in *DeleteCustomerSecondaryIdRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerSecondaryId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) UpdateCustomerMetadata(ctx context.Context, in *UpdateCustomerMetadataRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) DeleteCustomerMetadata(ctx context.Context, in *DeleteCustomerMetadataRequest, opts ...grpc.CallOption) (*UpdateCustomerStateReply, error) {
	out := new(UpdateCustomerStateReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) SendMessageByTag(ctx context.Context, in *SendMessageTagRequest, opts ...grpc.CallOption) (*TagCommandReply, error) {
	out := new(TagCommandReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/SendMessageByTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) ReplyToMessage(ctx context.Context, in *ReplyToMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/ReplyToMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) MessagingConsent(ctx context.Context, in *MessagingConsentRequest, opts ...grpc.CallOption) (*MessagingConsentReply, error) {
	out := new(MessagingConsentReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/MessagingConsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) SendPayment(ctx context.Context, in *SendPaymentRequest, opts ...grpc.CallOption) (*SendPaymentReply, error) {
	out := new(SendPaymentReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/SendPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) CheckoutPayment(ctx context.Context, in *CheckoutPaymentRequest, opts ...grpc.CallOption) (*CheckoutPaymentReply, error) {
	out := new(CheckoutPaymentReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/CheckoutPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) MakeVoiceCall(ctx context.Context, in *MakeVoiceCallRequest, opts ...grpc.CallOption) (*MakeVoiceCallReply, error) {
	out := new(MakeVoiceCallReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/MakeVoiceCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcWebServiceClient) StreamNotifications(ctx context.Context, in *StreamNotificationRequest, opts ...grpc.CallOption) (GrpcWebService_StreamNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GrpcWebService_serviceDesc.Streams[0], "/com.elarian.hera.proto.GrpcWebService/StreamNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcWebServiceStreamNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcWebService_StreamNotificationsClient interface {
	Recv() (*WebhookRequest, error)
	grpc.ClientStream
}

type grpcWebServiceStreamNotificationsClient struct {
	grpc.ClientStream
}

func (x *grpcWebServiceStreamNotificationsClient) Recv() (*WebhookRequest, error) {
	m := new(WebhookRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcWebServiceClient) SendWebhookResponse(ctx context.Context, in *WebhookResponse, opts ...grpc.CallOption) (*WebhookResponseReply, error) {
	out := new(WebhookResponseReply)
	err := c.cc.Invoke(ctx, "/com.elarian.hera.proto.GrpcWebService/SendWebhookResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcWebServiceServer is the server API for GrpcWebService service.
type GrpcWebServiceServer interface {
	AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error)
	GetCustomerState(context.Context, *GetCustomerStateRequest) (*GetCustomerStateReply, error)
	AdoptCustomerState(context.Context, *AdoptCustomerStateRequest) (*UpdateCustomerStateReply, error)
	AddCustomerReminder(context.Context, *AddCustomerReminderRequest) (*UpdateCustomerStateReply, error)
	AddCustomerReminderByTag(context.Context, *AddCustomerReminderTagRequest) (*TagCommandReply, error)
	CancelCustomerReminder(context.Context, *CancelCustomerReminderRequest) (*UpdateCustomerStateReply, error)
	CancelCustomerReminderByTag(context.Context, *CancelCustomerReminderTagRequest) (*TagCommandReply, error)
	UpdateCustomerTag(context.Context, *UpdateCustomerTagRequest) (*UpdateCustomerStateReply, error)
	DeleteCustomerTag(context.Context, *DeleteCustomerTagRequest) (*UpdateCustomerStateReply, error)
	UpdateCustomerSecondaryId(context.Context, *UpdateCustomerSecondaryIdRequest) (*UpdateCustomerStateReply, error)
	DeleteCustomerSecondaryId(context.Context, *DeleteCustomerSecondaryIdRequest) (*UpdateCustomerStateReply, error)
	UpdateCustomerMetadata(context.Context, *UpdateCustomerMetadataRequest) (*UpdateCustomerStateReply, error)
	DeleteCustomerMetadata(context.Context, *DeleteCustomerMetadataRequest) (*UpdateCustomerStateReply, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	SendMessageByTag(context.Context, *SendMessageTagRequest) (*TagCommandReply, error)
	ReplyToMessage(context.Context, *ReplyToMessageRequest) (*SendMessageReply, error)
	MessagingConsent(context.Context, *MessagingConsentRequest) (*MessagingConsentReply, error)
	SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentReply, error)
	CheckoutPayment(context.Context, *CheckoutPaymentRequest) (*CheckoutPaymentReply, error)
	MakeVoiceCall(context.Context, *MakeVoiceCallRequest) (*MakeVoiceCallReply, error)
	StreamNotifications(*StreamNotificationRequest, GrpcWebService_StreamNotificationsServer) error
	SendWebhookResponse(context.Context, *WebhookResponse) (*WebhookResponseReply, error)
}

// UnimplementedGrpcWebServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcWebServiceServer struct {
}

func (*UnimplementedGrpcWebServiceServer) AuthToken(context.Context, *AuthTokenRequest) (*AuthTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthToken not implemented")
}
func (*UnimplementedGrpcWebServiceServer) GetCustomerState(context.Context, *GetCustomerStateRequest) (*GetCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerState not implemented")
}
func (*UnimplementedGrpcWebServiceServer) AdoptCustomerState(context.Context, *AdoptCustomerStateRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdoptCustomerState not implemented")
}
func (*UnimplementedGrpcWebServiceServer) AddCustomerReminder(context.Context, *AddCustomerReminderRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerReminder not implemented")
}
func (*UnimplementedGrpcWebServiceServer) AddCustomerReminderByTag(context.Context, *AddCustomerReminderTagRequest) (*TagCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerReminderByTag not implemented")
}
func (*UnimplementedGrpcWebServiceServer) CancelCustomerReminder(context.Context, *CancelCustomerReminderRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCustomerReminder not implemented")
}
func (*UnimplementedGrpcWebServiceServer) CancelCustomerReminderByTag(context.Context, *CancelCustomerReminderTagRequest) (*TagCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelCustomerReminderByTag not implemented")
}
func (*UnimplementedGrpcWebServiceServer) UpdateCustomerTag(context.Context, *UpdateCustomerTagRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerTag not implemented")
}
func (*UnimplementedGrpcWebServiceServer) DeleteCustomerTag(context.Context, *DeleteCustomerTagRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerTag not implemented")
}
func (*UnimplementedGrpcWebServiceServer) UpdateCustomerSecondaryId(context.Context, *UpdateCustomerSecondaryIdRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerSecondaryId not implemented")
}
func (*UnimplementedGrpcWebServiceServer) DeleteCustomerSecondaryId(context.Context, *DeleteCustomerSecondaryIdRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerSecondaryId not implemented")
}
func (*UnimplementedGrpcWebServiceServer) UpdateCustomerMetadata(context.Context, *UpdateCustomerMetadataRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomerMetadata not implemented")
}
func (*UnimplementedGrpcWebServiceServer) DeleteCustomerMetadata(context.Context, *DeleteCustomerMetadataRequest) (*UpdateCustomerStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomerMetadata not implemented")
}
func (*UnimplementedGrpcWebServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedGrpcWebServiceServer) SendMessageByTag(context.Context, *SendMessageTagRequest) (*TagCommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageByTag not implemented")
}
func (*UnimplementedGrpcWebServiceServer) ReplyToMessage(context.Context, *ReplyToMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyToMessage not implemented")
}
func (*UnimplementedGrpcWebServiceServer) MessagingConsent(context.Context, *MessagingConsentRequest) (*MessagingConsentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagingConsent not implemented")
}
func (*UnimplementedGrpcWebServiceServer) SendPayment(context.Context, *SendPaymentRequest) (*SendPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPayment not implemented")
}
func (*UnimplementedGrpcWebServiceServer) CheckoutPayment(context.Context, *CheckoutPaymentRequest) (*CheckoutPaymentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckoutPayment not implemented")
}
func (*UnimplementedGrpcWebServiceServer) MakeVoiceCall(context.Context, *MakeVoiceCallRequest) (*MakeVoiceCallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeVoiceCall not implemented")
}
func (*UnimplementedGrpcWebServiceServer) StreamNotifications(*StreamNotificationRequest, GrpcWebService_StreamNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNotifications not implemented")
}
func (*UnimplementedGrpcWebServiceServer) SendWebhookResponse(context.Context, *WebhookResponse) (*WebhookResponseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWebhookResponse not implemented")
}

func RegisterGrpcWebServiceServer(s *grpc.Server, srv GrpcWebServiceServer) {
	s.RegisterService(&_GrpcWebService_serviceDesc, srv)
}

func _GrpcWebService_AuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).AuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/AuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).AuthToken(ctx, req.(*AuthTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_GetCustomerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).GetCustomerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/GetCustomerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).GetCustomerState(ctx, req.(*GetCustomerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_AdoptCustomerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdoptCustomerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).AdoptCustomerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/AdoptCustomerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).AdoptCustomerState(ctx, req.(*AdoptCustomerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_AddCustomerReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).AddCustomerReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/AddCustomerReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).AddCustomerReminder(ctx, req.(*AddCustomerReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_AddCustomerReminderByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerReminderTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).AddCustomerReminderByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/AddCustomerReminderByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).AddCustomerReminderByTag(ctx, req.(*AddCustomerReminderTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_CancelCustomerReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCustomerReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).CancelCustomerReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/CancelCustomerReminder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).CancelCustomerReminder(ctx, req.(*CancelCustomerReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_CancelCustomerReminderByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelCustomerReminderTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).CancelCustomerReminderByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/CancelCustomerReminderByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).CancelCustomerReminderByTag(ctx, req.(*CancelCustomerReminderTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_UpdateCustomerTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).UpdateCustomerTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).UpdateCustomerTag(ctx, req.(*UpdateCustomerTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_DeleteCustomerTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).DeleteCustomerTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).DeleteCustomerTag(ctx, req.(*DeleteCustomerTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_UpdateCustomerSecondaryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerSecondaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).UpdateCustomerSecondaryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerSecondaryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).UpdateCustomerSecondaryId(ctx, req.(*UpdateCustomerSecondaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_DeleteCustomerSecondaryId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerSecondaryIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).DeleteCustomerSecondaryId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerSecondaryId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).DeleteCustomerSecondaryId(ctx, req.(*DeleteCustomerSecondaryIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_UpdateCustomerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).UpdateCustomerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/UpdateCustomerMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).UpdateCustomerMetadata(ctx, req.(*UpdateCustomerMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_DeleteCustomerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).DeleteCustomerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/DeleteCustomerMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).DeleteCustomerMetadata(ctx, req.(*DeleteCustomerMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_SendMessageByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).SendMessageByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/SendMessageByTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).SendMessageByTag(ctx, req.(*SendMessageTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_ReplyToMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyToMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).ReplyToMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/ReplyToMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).ReplyToMessage(ctx, req.(*ReplyToMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_MessagingConsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessagingConsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).MessagingConsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/MessagingConsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).MessagingConsent(ctx, req.(*MessagingConsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_SendPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).SendPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/SendPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).SendPayment(ctx, req.(*SendPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_CheckoutPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).CheckoutPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/CheckoutPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).CheckoutPayment(ctx, req.(*CheckoutPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_MakeVoiceCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeVoiceCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).MakeVoiceCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/MakeVoiceCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).MakeVoiceCall(ctx, req.(*MakeVoiceCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcWebService_StreamNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamNotificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcWebServiceServer).StreamNotifications(m, &grpcWebServiceStreamNotificationsServer{stream})
}

type GrpcWebService_StreamNotificationsServer interface {
	Send(*WebhookRequest) error
	grpc.ServerStream
}

type grpcWebServiceStreamNotificationsServer struct {
	grpc.ServerStream
}

func (x *grpcWebServiceStreamNotificationsServer) Send(m *WebhookRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcWebService_SendWebhookResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcWebServiceServer).SendWebhookResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.elarian.hera.proto.GrpcWebService/SendWebhookResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcWebServiceServer).SendWebhookResponse(ctx, req.(*WebhookResponse))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcWebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.elarian.hera.proto.GrpcWebService",
	HandlerType: (*GrpcWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthToken",
			Handler:    _GrpcWebService_AuthToken_Handler,
		},
		{
			MethodName: "GetCustomerState",
			Handler:    _GrpcWebService_GetCustomerState_Handler,
		},
		{
			MethodName: "AdoptCustomerState",
			Handler:    _GrpcWebService_AdoptCustomerState_Handler,
		},
		{
			MethodName: "AddCustomerReminder",
			Handler:    _GrpcWebService_AddCustomerReminder_Handler,
		},
		{
			MethodName: "AddCustomerReminderByTag",
			Handler:    _GrpcWebService_AddCustomerReminderByTag_Handler,
		},
		{
			MethodName: "CancelCustomerReminder",
			Handler:    _GrpcWebService_CancelCustomerReminder_Handler,
		},
		{
			MethodName: "CancelCustomerReminderByTag",
			Handler:    _GrpcWebService_CancelCustomerReminderByTag_Handler,
		},
		{
			MethodName: "UpdateCustomerTag",
			Handler:    _GrpcWebService_UpdateCustomerTag_Handler,
		},
		{
			MethodName: "DeleteCustomerTag",
			Handler:    _GrpcWebService_DeleteCustomerTag_Handler,
		},
		{
			MethodName: "UpdateCustomerSecondaryId",
			Handler:    _GrpcWebService_UpdateCustomerSecondaryId_Handler,
		},
		{
			MethodName: "DeleteCustomerSecondaryId",
			Handler:    _GrpcWebService_DeleteCustomerSecondaryId_Handler,
		},
		{
			MethodName: "UpdateCustomerMetadata",
			Handler:    _GrpcWebService_UpdateCustomerMetadata_Handler,
		},
		{
			MethodName: "DeleteCustomerMetadata",
			Handler:    _GrpcWebService_DeleteCustomerMetadata_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _GrpcWebService_SendMessage_Handler,
		},
		{
			MethodName: "SendMessageByTag",
			Handler:    _GrpcWebService_SendMessageByTag_Handler,
		},
		{
			MethodName: "ReplyToMessage",
			Handler:    _GrpcWebService_ReplyToMessage_Handler,
		},
		{
			MethodName: "MessagingConsent",
			Handler:    _GrpcWebService_MessagingConsent_Handler,
		},
		{
			MethodName: "SendPayment",
			Handler:    _GrpcWebService_SendPayment_Handler,
		},
		{
			MethodName: "CheckoutPayment",
			Handler:    _GrpcWebService_CheckoutPayment_Handler,
		},
		{
			MethodName: "MakeVoiceCall",
			Handler:    _GrpcWebService_MakeVoiceCall_Handler,
		},
		{
			MethodName: "SendWebhookResponse",
			Handler:    _GrpcWebService_SendWebhookResponse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNotifications",
			Handler:       _GrpcWebService_StreamNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "web.proto",
}
