// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: messaging.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessagingConsentStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    MessagingConsentStatus `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
	UpdatedAt *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MessagingConsentStateEntry) Reset() {
	*x = MessagingConsentStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentStateEntry) ProtoMessage() {}

func (x *MessagingConsentStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingConsentStateEntry) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{0}
}

func (x *MessagingConsentStateEntry) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

func (x *MessagingConsentStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MessagingSessionStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt  *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Expiration *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
	AppId      *wrappers.StringValue `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *MessagingSessionStateEntry) Reset() {
	*x = MessagingSessionStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingSessionStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingSessionStateEntry) ProtoMessage() {}

func (x *MessagingSessionStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingSessionStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingSessionStateEntry) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{1}
}

func (x *MessagingSessionStateEntry) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *MessagingSessionStateEntry) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *MessagingSessionStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

type MessagingChannelStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber             `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber     `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	ConsentState   *MessagingConsentStateEntry `protobuf:"bytes,3,opt,name=consent_state,json=consentState,proto3" json:"consent_state,omitempty"`
	ActiveSession  *MessagingSessionStateEntry `protobuf:"bytes,4,opt,name=active_session,json=activeSession,proto3" json:"active_session,omitempty"`
}

func (x *MessagingChannelStateEntry) Reset() {
	*x = MessagingChannelStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingChannelStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingChannelStateEntry) ProtoMessage() {}

func (x *MessagingChannelStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingChannelStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingChannelStateEntry) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{2}
}

func (x *MessagingChannelStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetConsentState() *MessagingConsentStateEntry {
	if x != nil {
		return x.ConsentState
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetActiveSession() *MessagingSessionStateEntry {
	if x != nil {
		return x.ActiveSession
	}
	return nil
}

type MessageStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      CustomerEventDirection  `protobuf:"varint,1,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	MessageId      string                  `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	AppId          *wrappers.StringValue   `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Text           *wrappers.StringValue   `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Template       *TextMessageTemplate    `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
	Media          []*MediaMessageBody     `protobuf:"bytes,8,rep,name=media,proto3" json:"media,omitempty"`
	Location       *LocationMessageBody    `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	CreatedAt      *timestamp.Timestamp    `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp    `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status         MessageDeliveryStatus   `protobuf:"varint,12,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
}

func (x *MessageStateEntry) Reset() {
	*x = MessageStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStateEntry) ProtoMessage() {}

func (x *MessageStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStateEntry.ProtoReflect.Descriptor instead.
func (*MessageStateEntry) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{3}
}

func (x *MessageStateEntry) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *MessageStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessageStateEntry) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessageStateEntry) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *MessageStateEntry) GetText() *wrappers.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MessageStateEntry) GetTemplate() *TextMessageTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *MessageStateEntry) GetMedia() []*MediaMessageBody {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *MessageStateEntry) GetLocation() *LocationMessageBody {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MessageStateEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MessageStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MessageStateEntry) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

type MessagingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelState    []*MessagingChannelStateEntry `protobuf:"bytes,1,rep,name=channel_state,json=channelState,proto3" json:"channel_state,omitempty"`
	Messages        []*MessageStateEntry          `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	CustomerNumbers []*CustomerNumber             `protobuf:"bytes,3,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers  []*MessagingChannelNumber     `protobuf:"bytes,4,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
}

func (x *MessagingState) Reset() {
	*x = MessagingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingState) ProtoMessage() {}

func (x *MessagingState) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingState.ProtoReflect.Descriptor instead.
func (*MessagingState) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{4}
}

func (x *MessagingState) GetChannelState() []*MessagingChannelStateEntry {
	if x != nil {
		return x.ChannelState
	}
	return nil
}

func (x *MessagingState) GetMessages() []*MessageStateEntry {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagingState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *MessagingState) GetChannelNumbers() []*MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

type MessagingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*MessagingEvent_StateAdopted
	//	*MessagingEvent_EntityDecommissioned
	//	*MessagingEvent_MessagingConsentRequested
	//	*MessagingEvent_MessagingConsentStatusUpdated
	//	*MessagingEvent_MessagingSessionStatusUpdated
	//	*MessagingEvent_MessageReceived
	//	*MessagingEvent_MessageSent
	//	*MessagingEvent_MessageStatusUpdated
	Event isMessagingEvent_Event `protobuf_oneof:"event"`
}

func (x *MessagingEvent) Reset() {
	*x = MessagingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingEvent) ProtoMessage() {}

func (x *MessagingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingEvent.ProtoReflect.Descriptor instead.
func (*MessagingEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{5}
}

func (m *MessagingEvent) GetEvent() isMessagingEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *MessagingEvent) GetStateAdopted() *MessagingStateAdoptedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_StateAdopted); ok {
		return x.StateAdopted
	}
	return nil
}

func (x *MessagingEvent) GetEntityDecommissioned() *MessagingEntityDecommissionedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_EntityDecommissioned); ok {
		return x.EntityDecommissioned
	}
	return nil
}

func (x *MessagingEvent) GetMessagingConsentRequested() *MessagingConsentRequestedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessagingConsentRequested); ok {
		return x.MessagingConsentRequested
	}
	return nil
}

func (x *MessagingEvent) GetMessagingConsentStatusUpdated() *MessagingConsentStatusUpdatedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessagingConsentStatusUpdated); ok {
		return x.MessagingConsentStatusUpdated
	}
	return nil
}

func (x *MessagingEvent) GetMessagingSessionStatusUpdated() *MessagingSessionStatusUpdatedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessagingSessionStatusUpdated); ok {
		return x.MessagingSessionStatusUpdated
	}
	return nil
}

func (x *MessagingEvent) GetMessageReceived() *MessageReceivedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessageReceived); ok {
		return x.MessageReceived
	}
	return nil
}

func (x *MessagingEvent) GetMessageSent() *MessageSentEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessageSent); ok {
		return x.MessageSent
	}
	return nil
}

func (x *MessagingEvent) GetMessageStatusUpdated() *MessageStatusUpdatedEvent {
	if x, ok := x.GetEvent().(*MessagingEvent_MessageStatusUpdated); ok {
		return x.MessageStatusUpdated
	}
	return nil
}

type isMessagingEvent_Event interface {
	isMessagingEvent_Event()
}

type MessagingEvent_StateAdopted struct {
	StateAdopted *MessagingStateAdoptedEvent `protobuf:"bytes,1,opt,name=state_adopted,json=stateAdopted,proto3,oneof"`
}

type MessagingEvent_EntityDecommissioned struct {
	EntityDecommissioned *MessagingEntityDecommissionedEvent `protobuf:"bytes,2,opt,name=entity_decommissioned,json=entityDecommissioned,proto3,oneof"`
}

type MessagingEvent_MessagingConsentRequested struct {
	MessagingConsentRequested *MessagingConsentRequestedEvent `protobuf:"bytes,3,opt,name=messaging_consent_requested,json=messagingConsentRequested,proto3,oneof"`
}

type MessagingEvent_MessagingConsentStatusUpdated struct {
	MessagingConsentStatusUpdated *MessagingConsentStatusUpdatedEvent `protobuf:"bytes,4,opt,name=messaging_consent_status_updated,json=messagingConsentStatusUpdated,proto3,oneof"`
}

type MessagingEvent_MessagingSessionStatusUpdated struct {
	MessagingSessionStatusUpdated *MessagingSessionStatusUpdatedEvent `protobuf:"bytes,5,opt,name=messaging_session_status_updated,json=messagingSessionStatusUpdated,proto3,oneof"`
}

type MessagingEvent_MessageReceived struct {
	MessageReceived *MessageReceivedEvent `protobuf:"bytes,6,opt,name=message_received,json=messageReceived,proto3,oneof"`
}

type MessagingEvent_MessageSent struct {
	MessageSent *MessageSentEvent `protobuf:"bytes,7,opt,name=message_sent,json=messageSent,proto3,oneof"`
}

type MessagingEvent_MessageStatusUpdated struct {
	MessageStatusUpdated *MessageStatusUpdatedEvent `protobuf:"bytes,8,opt,name=message_status_updated,json=messageStatusUpdated,proto3,oneof"`
}

func (*MessagingEvent_StateAdopted) isMessagingEvent_Event() {}

func (*MessagingEvent_EntityDecommissioned) isMessagingEvent_Event() {}

func (*MessagingEvent_MessagingConsentRequested) isMessagingEvent_Event() {}

func (*MessagingEvent_MessagingConsentStatusUpdated) isMessagingEvent_Event() {}

func (*MessagingEvent_MessagingSessionStatusUpdated) isMessagingEvent_Event() {}

func (*MessagingEvent_MessageReceived) isMessagingEvent_Event() {}

func (*MessagingEvent_MessageSent) isMessagingEvent_Event() {}

func (*MessagingEvent_MessageStatusUpdated) isMessagingEvent_Event() {}

type MessagingStateAdoptedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId             string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId        string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CxnProps          *AppConnectionProps  `protobuf:"bytes,4,opt,name=cxn_props,json=cxnProps,proto3" json:"cxn_props,omitempty"`
	AdoptedCustomerId string               `protobuf:"bytes,5,opt,name=adopted_customer_id,json=adoptedCustomerId,proto3" json:"adopted_customer_id,omitempty"`
	AdoptedState      *MessagingState      `protobuf:"bytes,6,opt,name=adopted_state,json=adoptedState,proto3" json:"adopted_state,omitempty"`
}

func (x *MessagingStateAdoptedEvent) Reset() {
	*x = MessagingStateAdoptedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingStateAdoptedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingStateAdoptedEvent) ProtoMessage() {}

func (x *MessagingStateAdoptedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingStateAdoptedEvent.ProtoReflect.Descriptor instead.
func (*MessagingStateAdoptedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{6}
}

func (x *MessagingStateAdoptedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessagingStateAdoptedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingStateAdoptedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessagingStateAdoptedEvent) GetCxnProps() *AppConnectionProps {
	if x != nil {
		return x.CxnProps
	}
	return nil
}

func (x *MessagingStateAdoptedEvent) GetAdoptedCustomerId() string {
	if x != nil {
		return x.AdoptedCustomerId
	}
	return ""
}

func (x *MessagingStateAdoptedEvent) GetAdoptedState() *MessagingState {
	if x != nil {
		return x.AdoptedState
	}
	return nil
}

type MessagingEntityDecommissionedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId         string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId    string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CxnProps      *AppConnectionProps  `protobuf:"bytes,4,opt,name=cxn_props,json=cxnProps,proto3" json:"cxn_props,omitempty"`
	NewCustomerId string               `protobuf:"bytes,5,opt,name=new_customer_id,json=newCustomerId,proto3" json:"new_customer_id,omitempty"`
}

func (x *MessagingEntityDecommissionedEvent) Reset() {
	*x = MessagingEntityDecommissionedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingEntityDecommissionedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingEntityDecommissionedEvent) ProtoMessage() {}

func (x *MessagingEntityDecommissionedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingEntityDecommissionedEvent.ProtoReflect.Descriptor instead.
func (*MessagingEntityDecommissionedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{7}
}

func (x *MessagingEntityDecommissionedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessagingEntityDecommissionedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingEntityDecommissionedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessagingEntityDecommissionedEvent) GetCxnProps() *AppConnectionProps {
	if x != nil {
		return x.CxnProps
	}
	return nil
}

func (x *MessagingEntityDecommissionedEvent) GetNewCustomerId() string {
	if x != nil {
		return x.NewCustomerId
	}
	return ""
}

type MessagingConsentRequestedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId     string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp      *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CxnProps       *AppConnectionProps     `protobuf:"bytes,4,opt,name=cxn_props,json=cxnProps,proto3" json:"cxn_props,omitempty"`
	AppId          string                  `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,6,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,7,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Status         MessagingConsentStatus  `protobuf:"varint,8,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
	Action         MessagingConsentAction  `protobuf:"varint,9,opt,name=action,proto3,enum=com.elarian.hera.proto.MessagingConsentAction" json:"action,omitempty"`
}

func (x *MessagingConsentRequestedEvent) Reset() {
	*x = MessagingConsentRequestedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentRequestedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentRequestedEvent) ProtoMessage() {}

func (x *MessagingConsentRequestedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentRequestedEvent.ProtoReflect.Descriptor instead.
func (*MessagingConsentRequestedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{8}
}

func (x *MessagingConsentRequestedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessagingConsentRequestedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingConsentRequestedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessagingConsentRequestedEvent) GetCxnProps() *AppConnectionProps {
	if x != nil {
		return x.CxnProps
	}
	return nil
}

func (x *MessagingConsentRequestedEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessagingConsentRequestedEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingConsentRequestedEvent) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingConsentRequestedEvent) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

func (x *MessagingConsentRequestedEvent) GetAction() MessagingConsentAction {
	if x != nil {
		return x.Action
	}
	return MessagingConsentAction_MESSAGING_CONSENT_ACTION_UNSPECIFIED
}

type MessagingConsentStatusUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId     string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp      *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId          string                  `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,5,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,6,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Status         MessagingConsentStatus  `protobuf:"varint,7,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
}

func (x *MessagingConsentStatusUpdatedEvent) Reset() {
	*x = MessagingConsentStatusUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentStatusUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentStatusUpdatedEvent) ProtoMessage() {}

func (x *MessagingConsentStatusUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentStatusUpdatedEvent.ProtoReflect.Descriptor instead.
func (*MessagingConsentStatusUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{9}
}

func (x *MessagingConsentStatusUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessagingConsentStatusUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingConsentStatusUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessagingConsentStatusUpdatedEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessagingConsentStatusUpdatedEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingConsentStatusUpdatedEvent) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingConsentStatusUpdatedEvent) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

type MessagingSessionStatusUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId     string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp      *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId          *wrappers.StringValue   `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,5,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,6,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Status         MessagingSessionStatus  `protobuf:"varint,7,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingSessionStatus" json:"status,omitempty"`
	Expiration     *timestamp.Timestamp    `protobuf:"bytes,8,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *MessagingSessionStatusUpdatedEvent) Reset() {
	*x = MessagingSessionStatusUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingSessionStatusUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingSessionStatusUpdatedEvent) ProtoMessage() {}

func (x *MessagingSessionStatusUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingSessionStatusUpdatedEvent.ProtoReflect.Descriptor instead.
func (*MessagingSessionStatusUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{10}
}

func (x *MessagingSessionStatusUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessagingSessionStatusUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessagingSessionStatusUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessagingSessionStatusUpdatedEvent) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *MessagingSessionStatusUpdatedEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingSessionStatusUpdatedEvent) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingSessionStatusUpdatedEvent) GetStatus() MessagingSessionStatus {
	if x != nil {
		return x.Status
	}
	return MessagingSessionStatus_MESSAGING_SESSION_STATUS_UNSPECIFIED
}

func (x *MessagingSessionStatusUpdatedEvent) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type MessageReceivedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId     string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp      *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId          *wrappers.StringValue   `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MessageId      string                  `protobuf:"bytes,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,6,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,7,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Text           *wrappers.StringValue   `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	Media          []*MediaMessageBody     `protobuf:"bytes,9,rep,name=media,proto3" json:"media,omitempty"`
	Location       *LocationMessageBody    `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *MessageReceivedEvent) Reset() {
	*x = MessageReceivedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageReceivedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageReceivedEvent) ProtoMessage() {}

func (x *MessageReceivedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageReceivedEvent.ProtoReflect.Descriptor instead.
func (*MessageReceivedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{11}
}

func (x *MessageReceivedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessageReceivedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessageReceivedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageReceivedEvent) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *MessageReceivedEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageReceivedEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessageReceivedEvent) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessageReceivedEvent) GetText() *wrappers.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MessageReceivedEvent) GetMedia() []*MediaMessageBody {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *MessageReceivedEvent) GetLocation() *LocationMessageBody {
	if x != nil {
		return x.Location
	}
	return nil
}

type MessageSentEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId            string                  `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId       string                  `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp        *timestamp.Timestamp    `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CxnProps         *AppConnectionProps     `protobuf:"bytes,4,opt,name=cxn_props,json=cxnProps,proto3" json:"cxn_props,omitempty"`
	AppId            string                  `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MessageId        string                  `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ReplyToMessageId *wrappers.StringValue   `protobuf:"bytes,7,opt,name=reply_to_message_id,json=replyToMessageId,proto3" json:"reply_to_message_id,omitempty"`
	CustomerNumber   *CustomerNumber         `protobuf:"bytes,8,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber    *MessagingChannelNumber `protobuf:"bytes,9,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Body             *CustomerMessageBody    `protobuf:"bytes,10,opt,name=body,proto3" json:"body,omitempty"`
	Origin           CustomerRequestOrigin   `protobuf:"varint,11,opt,name=origin,proto3,enum=com.elarian.hera.proto.CustomerRequestOrigin" json:"origin,omitempty"`
	Status           MessageDeliveryStatus   `protobuf:"varint,12,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
	Tag              *CustomerIndex          `protobuf:"bytes,13,opt,name=tag,proto3" json:"tag,omitempty"`
	WorkId           *wrappers.StringValue   `protobuf:"bytes,14,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty"`
}

func (x *MessageSentEvent) Reset() {
	*x = MessageSentEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSentEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSentEvent) ProtoMessage() {}

func (x *MessageSentEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSentEvent.ProtoReflect.Descriptor instead.
func (*MessageSentEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{12}
}

func (x *MessageSentEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessageSentEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessageSentEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageSentEvent) GetCxnProps() *AppConnectionProps {
	if x != nil {
		return x.CxnProps
	}
	return nil
}

func (x *MessageSentEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessageSentEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageSentEvent) GetReplyToMessageId() *wrappers.StringValue {
	if x != nil {
		return x.ReplyToMessageId
	}
	return nil
}

func (x *MessageSentEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessageSentEvent) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessageSentEvent) GetBody() *CustomerMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *MessageSentEvent) GetOrigin() CustomerRequestOrigin {
	if x != nil {
		return x.Origin
	}
	return CustomerRequestOrigin_CUSTOMER_REQUEST_ORIGIN_UNSPECIFIED
}

func (x *MessageSentEvent) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

func (x *MessageSentEvent) GetTag() *CustomerIndex {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *MessageSentEvent) GetWorkId() *wrappers.StringValue {
	if x != nil {
		return x.WorkId
	}
	return nil
}

type MessageStatusUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string                `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId      string                `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	MessageId  string                `protobuf:"bytes,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Status     MessageDeliveryStatus `protobuf:"varint,6,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
}

func (x *MessageStatusUpdatedEvent) Reset() {
	*x = MessageStatusUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStatusUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStatusUpdatedEvent) ProtoMessage() {}

func (x *MessageStatusUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStatusUpdatedEvent.ProtoReflect.Descriptor instead.
func (*MessageStatusUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_messaging_proto_rawDescGZIP(), []int{13}
}

func (x *MessageStatusUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MessageStatusUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MessageStatusUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MessageStatusUpdatedEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *MessageStatusUpdatedEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageStatusUpdatedEvent) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

var File_messaging_proto protoreflect.FileDescriptor

var file_messaging_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1a, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0xf8, 0x02, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x9e, 0x06, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x47, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xdc, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0x86, 0x07, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6f,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x12, 0x71,
	0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x78, 0x0a, 0x1b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x20,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1d, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x1a, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x78,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x08, 0x63, 0x78, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0c, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x87, 0x02, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x78, 0x6e,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x08, 0x63, 0x78, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x04, 0x0a, 0x1e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x47, 0x0a, 0x09, 0x63, 0x78, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x08,
	0x63, 0x78, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x03, 0x0a, 0x22, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x33, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x06, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x09, 0x63, 0x78,
	0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x73, 0x52, 0x08, 0x63, 0x78, 0x6e, 0x50, 0x72,
	0x6f, 0x70, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x45, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x06,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x8a, 0x02,
	0x0a, 0x19, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_messaging_proto_rawDescOnce sync.Once
	file_messaging_proto_rawDescData = file_messaging_proto_rawDesc
)

func file_messaging_proto_rawDescGZIP() []byte {
	file_messaging_proto_rawDescOnce.Do(func() {
		file_messaging_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_proto_rawDescData)
	})
	return file_messaging_proto_rawDescData
}

var file_messaging_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_messaging_proto_goTypes = []interface{}{
	(*MessagingConsentStateEntry)(nil),         // 0: com.elarian.hera.proto.MessagingConsentStateEntry
	(*MessagingSessionStateEntry)(nil),         // 1: com.elarian.hera.proto.MessagingSessionStateEntry
	(*MessagingChannelStateEntry)(nil),         // 2: com.elarian.hera.proto.MessagingChannelStateEntry
	(*MessageStateEntry)(nil),                  // 3: com.elarian.hera.proto.MessageStateEntry
	(*MessagingState)(nil),                     // 4: com.elarian.hera.proto.MessagingState
	(*MessagingEvent)(nil),                     // 5: com.elarian.hera.proto.MessagingEvent
	(*MessagingStateAdoptedEvent)(nil),         // 6: com.elarian.hera.proto.MessagingStateAdoptedEvent
	(*MessagingEntityDecommissionedEvent)(nil), // 7: com.elarian.hera.proto.MessagingEntityDecommissionedEvent
	(*MessagingConsentRequestedEvent)(nil),     // 8: com.elarian.hera.proto.MessagingConsentRequestedEvent
	(*MessagingConsentStatusUpdatedEvent)(nil), // 9: com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent
	(*MessagingSessionStatusUpdatedEvent)(nil), // 10: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent
	(*MessageReceivedEvent)(nil),               // 11: com.elarian.hera.proto.MessageReceivedEvent
	(*MessageSentEvent)(nil),                   // 12: com.elarian.hera.proto.MessageSentEvent
	(*MessageStatusUpdatedEvent)(nil),          // 13: com.elarian.hera.proto.MessageStatusUpdatedEvent
	(MessagingConsentStatus)(0),                // 14: com.elarian.hera.proto.MessagingConsentStatus
	(*timestamp.Timestamp)(nil),                // 15: google.protobuf.Timestamp
	(*wrappers.StringValue)(nil),               // 16: google.protobuf.StringValue
	(*CustomerNumber)(nil),                     // 17: com.elarian.hera.proto.CustomerNumber
	(*MessagingChannelNumber)(nil),             // 18: com.elarian.hera.proto.MessagingChannelNumber
	(CustomerEventDirection)(0),                // 19: com.elarian.hera.proto.CustomerEventDirection
	(*TextMessageTemplate)(nil),                // 20: com.elarian.hera.proto.TextMessageTemplate
	(*MediaMessageBody)(nil),                   // 21: com.elarian.hera.proto.MediaMessageBody
	(*LocationMessageBody)(nil),                // 22: com.elarian.hera.proto.LocationMessageBody
	(MessageDeliveryStatus)(0),                 // 23: com.elarian.hera.proto.MessageDeliveryStatus
	(*AppConnectionProps)(nil),                 // 24: com.elarian.hera.proto.AppConnectionProps
	(MessagingConsentAction)(0),                // 25: com.elarian.hera.proto.MessagingConsentAction
	(MessagingSessionStatus)(0),                // 26: com.elarian.hera.proto.MessagingSessionStatus
	(*CustomerMessageBody)(nil),                // 27: com.elarian.hera.proto.CustomerMessageBody
	(CustomerRequestOrigin)(0),                 // 28: com.elarian.hera.proto.CustomerRequestOrigin
	(*CustomerIndex)(nil),                      // 29: com.elarian.hera.proto.CustomerIndex
}
var file_messaging_proto_depIdxs = []int32{
	14, // 0: com.elarian.hera.proto.MessagingConsentStateEntry.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	15, // 1: com.elarian.hera.proto.MessagingConsentStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	15, // 2: com.elarian.hera.proto.MessagingSessionStateEntry.started_at:type_name -> google.protobuf.Timestamp
	15, // 3: com.elarian.hera.proto.MessagingSessionStateEntry.expiration:type_name -> google.protobuf.Timestamp
	16, // 4: com.elarian.hera.proto.MessagingSessionStateEntry.app_id:type_name -> google.protobuf.StringValue
	17, // 5: com.elarian.hera.proto.MessagingChannelStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 6: com.elarian.hera.proto.MessagingChannelStateEntry.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	0,  // 7: com.elarian.hera.proto.MessagingChannelStateEntry.consent_state:type_name -> com.elarian.hera.proto.MessagingConsentStateEntry
	1,  // 8: com.elarian.hera.proto.MessagingChannelStateEntry.active_session:type_name -> com.elarian.hera.proto.MessagingSessionStateEntry
	19, // 9: com.elarian.hera.proto.MessageStateEntry.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	17, // 10: com.elarian.hera.proto.MessageStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 11: com.elarian.hera.proto.MessageStateEntry.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	16, // 12: com.elarian.hera.proto.MessageStateEntry.app_id:type_name -> google.protobuf.StringValue
	16, // 13: com.elarian.hera.proto.MessageStateEntry.text:type_name -> google.protobuf.StringValue
	20, // 14: com.elarian.hera.proto.MessageStateEntry.template:type_name -> com.elarian.hera.proto.TextMessageTemplate
	21, // 15: com.elarian.hera.proto.MessageStateEntry.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	22, // 16: com.elarian.hera.proto.MessageStateEntry.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	15, // 17: com.elarian.hera.proto.MessageStateEntry.created_at:type_name -> google.protobuf.Timestamp
	15, // 18: com.elarian.hera.proto.MessageStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	23, // 19: com.elarian.hera.proto.MessageStateEntry.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	2,  // 20: com.elarian.hera.proto.MessagingState.channel_state:type_name -> com.elarian.hera.proto.MessagingChannelStateEntry
	3,  // 21: com.elarian.hera.proto.MessagingState.messages:type_name -> com.elarian.hera.proto.MessageStateEntry
	17, // 22: com.elarian.hera.proto.MessagingState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 23: com.elarian.hera.proto.MessagingState.channel_numbers:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	6,  // 24: com.elarian.hera.proto.MessagingEvent.state_adopted:type_name -> com.elarian.hera.proto.MessagingStateAdoptedEvent
	7,  // 25: com.elarian.hera.proto.MessagingEvent.entity_decommissioned:type_name -> com.elarian.hera.proto.MessagingEntityDecommissionedEvent
	8,  // 26: com.elarian.hera.proto.MessagingEvent.messaging_consent_requested:type_name -> com.elarian.hera.proto.MessagingConsentRequestedEvent
	9,  // 27: com.elarian.hera.proto.MessagingEvent.messaging_consent_status_updated:type_name -> com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent
	10, // 28: com.elarian.hera.proto.MessagingEvent.messaging_session_status_updated:type_name -> com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent
	11, // 29: com.elarian.hera.proto.MessagingEvent.message_received:type_name -> com.elarian.hera.proto.MessageReceivedEvent
	12, // 30: com.elarian.hera.proto.MessagingEvent.message_sent:type_name -> com.elarian.hera.proto.MessageSentEvent
	13, // 31: com.elarian.hera.proto.MessagingEvent.message_status_updated:type_name -> com.elarian.hera.proto.MessageStatusUpdatedEvent
	15, // 32: com.elarian.hera.proto.MessagingStateAdoptedEvent.timestamp:type_name -> google.protobuf.Timestamp
	24, // 33: com.elarian.hera.proto.MessagingStateAdoptedEvent.cxn_props:type_name -> com.elarian.hera.proto.AppConnectionProps
	4,  // 34: com.elarian.hera.proto.MessagingStateAdoptedEvent.adopted_state:type_name -> com.elarian.hera.proto.MessagingState
	15, // 35: com.elarian.hera.proto.MessagingEntityDecommissionedEvent.timestamp:type_name -> google.protobuf.Timestamp
	24, // 36: com.elarian.hera.proto.MessagingEntityDecommissionedEvent.cxn_props:type_name -> com.elarian.hera.proto.AppConnectionProps
	15, // 37: com.elarian.hera.proto.MessagingConsentRequestedEvent.timestamp:type_name -> google.protobuf.Timestamp
	24, // 38: com.elarian.hera.proto.MessagingConsentRequestedEvent.cxn_props:type_name -> com.elarian.hera.proto.AppConnectionProps
	17, // 39: com.elarian.hera.proto.MessagingConsentRequestedEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 40: com.elarian.hera.proto.MessagingConsentRequestedEvent.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	14, // 41: com.elarian.hera.proto.MessagingConsentRequestedEvent.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	25, // 42: com.elarian.hera.proto.MessagingConsentRequestedEvent.action:type_name -> com.elarian.hera.proto.MessagingConsentAction
	15, // 43: com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	17, // 44: com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 45: com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	14, // 46: com.elarian.hera.proto.MessagingConsentStatusUpdatedEvent.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	15, // 47: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	16, // 48: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.app_id:type_name -> google.protobuf.StringValue
	17, // 49: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 50: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	26, // 51: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.status:type_name -> com.elarian.hera.proto.MessagingSessionStatus
	15, // 52: com.elarian.hera.proto.MessagingSessionStatusUpdatedEvent.expiration:type_name -> google.protobuf.Timestamp
	15, // 53: com.elarian.hera.proto.MessageReceivedEvent.timestamp:type_name -> google.protobuf.Timestamp
	16, // 54: com.elarian.hera.proto.MessageReceivedEvent.app_id:type_name -> google.protobuf.StringValue
	17, // 55: com.elarian.hera.proto.MessageReceivedEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 56: com.elarian.hera.proto.MessageReceivedEvent.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	16, // 57: com.elarian.hera.proto.MessageReceivedEvent.text:type_name -> google.protobuf.StringValue
	21, // 58: com.elarian.hera.proto.MessageReceivedEvent.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	22, // 59: com.elarian.hera.proto.MessageReceivedEvent.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	15, // 60: com.elarian.hera.proto.MessageSentEvent.timestamp:type_name -> google.protobuf.Timestamp
	24, // 61: com.elarian.hera.proto.MessageSentEvent.cxn_props:type_name -> com.elarian.hera.proto.AppConnectionProps
	16, // 62: com.elarian.hera.proto.MessageSentEvent.reply_to_message_id:type_name -> google.protobuf.StringValue
	17, // 63: com.elarian.hera.proto.MessageSentEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	18, // 64: com.elarian.hera.proto.MessageSentEvent.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	27, // 65: com.elarian.hera.proto.MessageSentEvent.body:type_name -> com.elarian.hera.proto.CustomerMessageBody
	28, // 66: com.elarian.hera.proto.MessageSentEvent.origin:type_name -> com.elarian.hera.proto.CustomerRequestOrigin
	23, // 67: com.elarian.hera.proto.MessageSentEvent.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	29, // 68: com.elarian.hera.proto.MessageSentEvent.tag:type_name -> com.elarian.hera.proto.CustomerIndex
	16, // 69: com.elarian.hera.proto.MessageSentEvent.work_id:type_name -> google.protobuf.StringValue
	15, // 70: com.elarian.hera.proto.MessageStatusUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	23, // 71: com.elarian.hera.proto.MessageStatusUpdatedEvent.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_messaging_proto_init() }
func file_messaging_proto_init() {
	if File_messaging_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messaging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingSessionStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingChannelStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingStateAdoptedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingEntityDecommissionedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentRequestedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentStatusUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingSessionStatusUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageReceivedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSentEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStatusUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messaging_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MessagingEvent_StateAdopted)(nil),
		(*MessagingEvent_EntityDecommissioned)(nil),
		(*MessagingEvent_MessagingConsentRequested)(nil),
		(*MessagingEvent_MessagingConsentStatusUpdated)(nil),
		(*MessagingEvent_MessagingSessionStatusUpdated)(nil),
		(*MessagingEvent_MessageReceived)(nil),
		(*MessagingEvent_MessageSent)(nil),
		(*MessagingEvent_MessageStatusUpdated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messaging_proto_goTypes,
		DependencyIndexes: file_messaging_proto_depIdxs,
		MessageInfos:      file_messaging_proto_msgTypes,
	}.Build()
	File_messaging_proto = out.File
	file_messaging_proto_rawDesc = nil
	file_messaging_proto_goTypes = nil
	file_messaging_proto_depIdxs = nil
}
