// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: nuclear.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NuclearEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*NuclearEvent_StateAdopted
	//	*NuclearEvent_EntityDecommissioned
	//	*NuclearEvent_TagUpdated
	//	*NuclearEvent_TagDeleted
	//	*NuclearEvent_MetadataUpdated
	//	*NuclearEvent_MetadataDeleted
	//	*NuclearEvent_SecondaryIdUpdated
	//	*NuclearEvent_SecondaryIdDeleted
	//	*NuclearEvent_ReminderAdded
	//	*NuclearEvent_ReminderCancelled
	//	*NuclearEvent_ReminderProcessed
	Event isNuclearEvent_Event `protobuf_oneof:"event"`
}

func (x *NuclearEvent) Reset() {
	*x = NuclearEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NuclearEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NuclearEvent) ProtoMessage() {}

func (x *NuclearEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NuclearEvent.ProtoReflect.Descriptor instead.
func (*NuclearEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{0}
}

func (m *NuclearEvent) GetEvent() isNuclearEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *NuclearEvent) GetStateAdopted() *NuclearStateAdoptedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_StateAdopted); ok {
		return x.StateAdopted
	}
	return nil
}

func (x *NuclearEvent) GetEntityDecommissioned() *NuclearEntityDecommissionedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_EntityDecommissioned); ok {
		return x.EntityDecommissioned
	}
	return nil
}

func (x *NuclearEvent) GetTagUpdated() *TagUpdatedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_TagUpdated); ok {
		return x.TagUpdated
	}
	return nil
}

func (x *NuclearEvent) GetTagDeleted() *TagDeletedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_TagDeleted); ok {
		return x.TagDeleted
	}
	return nil
}

func (x *NuclearEvent) GetMetadataUpdated() *MetadataUpdatedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_MetadataUpdated); ok {
		return x.MetadataUpdated
	}
	return nil
}

func (x *NuclearEvent) GetMetadataDeleted() *MetadataDeletedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_MetadataDeleted); ok {
		return x.MetadataDeleted
	}
	return nil
}

func (x *NuclearEvent) GetSecondaryIdUpdated() *SecondaryIdUpdatedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_SecondaryIdUpdated); ok {
		return x.SecondaryIdUpdated
	}
	return nil
}

func (x *NuclearEvent) GetSecondaryIdDeleted() *SecondaryIdDeletedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_SecondaryIdDeleted); ok {
		return x.SecondaryIdDeleted
	}
	return nil
}

func (x *NuclearEvent) GetReminderAdded() *ReminderAddedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_ReminderAdded); ok {
		return x.ReminderAdded
	}
	return nil
}

func (x *NuclearEvent) GetReminderCancelled() *ReminderCancelledEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_ReminderCancelled); ok {
		return x.ReminderCancelled
	}
	return nil
}

func (x *NuclearEvent) GetReminderProcessed() *ReminderProcessedEvent {
	if x, ok := x.GetEvent().(*NuclearEvent_ReminderProcessed); ok {
		return x.ReminderProcessed
	}
	return nil
}

type isNuclearEvent_Event interface {
	isNuclearEvent_Event()
}

type NuclearEvent_StateAdopted struct {
	StateAdopted *NuclearStateAdoptedEvent `protobuf:"bytes,1,opt,name=state_adopted,json=stateAdopted,proto3,oneof"`
}

type NuclearEvent_EntityDecommissioned struct {
	EntityDecommissioned *NuclearEntityDecommissionedEvent `protobuf:"bytes,2,opt,name=entity_decommissioned,json=entityDecommissioned,proto3,oneof"`
}

type NuclearEvent_TagUpdated struct {
	TagUpdated *TagUpdatedEvent `protobuf:"bytes,3,opt,name=tag_updated,json=tagUpdated,proto3,oneof"`
}

type NuclearEvent_TagDeleted struct {
	TagDeleted *TagDeletedEvent `protobuf:"bytes,4,opt,name=tag_deleted,json=tagDeleted,proto3,oneof"`
}

type NuclearEvent_MetadataUpdated struct {
	MetadataUpdated *MetadataUpdatedEvent `protobuf:"bytes,5,opt,name=metadata_updated,json=metadataUpdated,proto3,oneof"`
}

type NuclearEvent_MetadataDeleted struct {
	MetadataDeleted *MetadataDeletedEvent `protobuf:"bytes,6,opt,name=metadata_deleted,json=metadataDeleted,proto3,oneof"`
}

type NuclearEvent_SecondaryIdUpdated struct {
	SecondaryIdUpdated *SecondaryIdUpdatedEvent `protobuf:"bytes,7,opt,name=secondary_id_updated,json=secondaryIdUpdated,proto3,oneof"`
}

type NuclearEvent_SecondaryIdDeleted struct {
	SecondaryIdDeleted *SecondaryIdDeletedEvent `protobuf:"bytes,8,opt,name=secondary_id_deleted,json=secondaryIdDeleted,proto3,oneof"`
}

type NuclearEvent_ReminderAdded struct {
	ReminderAdded *ReminderAddedEvent `protobuf:"bytes,9,opt,name=reminder_added,json=reminderAdded,proto3,oneof"`
}

type NuclearEvent_ReminderCancelled struct {
	ReminderCancelled *ReminderCancelledEvent `protobuf:"bytes,10,opt,name=reminder_cancelled,json=reminderCancelled,proto3,oneof"`
}

type NuclearEvent_ReminderProcessed struct {
	ReminderProcessed *ReminderProcessedEvent `protobuf:"bytes,11,opt,name=reminder_processed,json=reminderProcessed,proto3,oneof"`
}

func (*NuclearEvent_StateAdopted) isNuclearEvent_Event() {}

func (*NuclearEvent_EntityDecommissioned) isNuclearEvent_Event() {}

func (*NuclearEvent_TagUpdated) isNuclearEvent_Event() {}

func (*NuclearEvent_TagDeleted) isNuclearEvent_Event() {}

func (*NuclearEvent_MetadataUpdated) isNuclearEvent_Event() {}

func (*NuclearEvent_MetadataDeleted) isNuclearEvent_Event() {}

func (*NuclearEvent_SecondaryIdUpdated) isNuclearEvent_Event() {}

func (*NuclearEvent_SecondaryIdDeleted) isNuclearEvent_Event() {}

func (*NuclearEvent_ReminderAdded) isNuclearEvent_Event() {}

func (*NuclearEvent_ReminderCancelled) isNuclearEvent_Event() {}

func (*NuclearEvent_ReminderProcessed) isNuclearEvent_Event() {}

type NuclearState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags         []*CustomerIndex         `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata     map[string]*DataMapValue `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SecondaryIds []*CustomerIndex         `protobuf:"bytes,3,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
	Reminders    []*CustomerReminder      `protobuf:"bytes,4,rep,name=reminders,proto3" json:"reminders,omitempty"`
}

func (x *NuclearState) Reset() {
	*x = NuclearState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NuclearState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NuclearState) ProtoMessage() {}

func (x *NuclearState) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NuclearState.ProtoReflect.Descriptor instead.
func (*NuclearState) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{1}
}

func (x *NuclearState) GetTags() []*CustomerIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NuclearState) GetMetadata() map[string]*DataMapValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *NuclearState) GetSecondaryIds() []*CustomerIndex {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

func (x *NuclearState) GetReminders() []*CustomerReminder {
	if x != nil {
		return x.Reminders
	}
	return nil
}

type NuclearStateAdoptedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId             string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId        string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders        *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	OtherCustomerId   string               `protobuf:"bytes,5,opt,name=other_customer_id,json=otherCustomerId,proto3" json:"other_customer_id,omitempty"`
	OtherNuclearState *NuclearState        `protobuf:"bytes,6,opt,name=other_nuclear_state,json=otherNuclearState,proto3" json:"other_nuclear_state,omitempty"`
}

func (x *NuclearStateAdoptedEvent) Reset() {
	*x = NuclearStateAdoptedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NuclearStateAdoptedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NuclearStateAdoptedEvent) ProtoMessage() {}

func (x *NuclearStateAdoptedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NuclearStateAdoptedEvent.ProtoReflect.Descriptor instead.
func (*NuclearStateAdoptedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{2}
}

func (x *NuclearStateAdoptedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *NuclearStateAdoptedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *NuclearStateAdoptedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NuclearStateAdoptedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *NuclearStateAdoptedEvent) GetOtherCustomerId() string {
	if x != nil {
		return x.OtherCustomerId
	}
	return ""
}

func (x *NuclearStateAdoptedEvent) GetOtherNuclearState() *NuclearState {
	if x != nil {
		return x.OtherNuclearState
	}
	return nil
}

type NuclearEntityDecommissionedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId         string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId    string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders    *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	NewCustomerId string               `protobuf:"bytes,5,opt,name=new_customer_id,json=newCustomerId,proto3" json:"new_customer_id,omitempty"`
}

func (x *NuclearEntityDecommissionedEvent) Reset() {
	*x = NuclearEntityDecommissionedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NuclearEntityDecommissionedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NuclearEntityDecommissionedEvent) ProtoMessage() {}

func (x *NuclearEntityDecommissionedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NuclearEntityDecommissionedEvent.ProtoReflect.Descriptor instead.
func (*NuclearEntityDecommissionedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{3}
}

func (x *NuclearEntityDecommissionedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *NuclearEntityDecommissionedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *NuclearEntityDecommissionedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NuclearEntityDecommissionedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *NuclearEntityDecommissionedEvent) GetNewCustomerId() string {
	if x != nil {
		return x.NewCustomerId
	}
	return ""
}

type TagUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	Tags       []*CustomerIndex     `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TagUpdatedEvent) Reset() {
	*x = TagUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagUpdatedEvent) ProtoMessage() {}

func (x *TagUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagUpdatedEvent.ProtoReflect.Descriptor instead.
func (*TagUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{4}
}

func (x *TagUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TagUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *TagUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TagUpdatedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *TagUpdatedEvent) GetTags() []*CustomerIndex {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TagDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	Keys       []string             `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *TagDeletedEvent) Reset() {
	*x = TagDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagDeletedEvent) ProtoMessage() {}

func (x *TagDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagDeletedEvent.ProtoReflect.Descriptor instead.
func (*TagDeletedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{5}
}

func (x *TagDeletedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TagDeletedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *TagDeletedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TagDeletedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *TagDeletedEvent) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type MetadataUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string                   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string                   `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp     `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders              `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	Metadata   map[string]*DataMapValue `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetadataUpdatedEvent) Reset() {
	*x = MetadataUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataUpdatedEvent) ProtoMessage() {}

func (x *MetadataUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataUpdatedEvent.ProtoReflect.Descriptor instead.
func (*MetadataUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{6}
}

func (x *MetadataUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MetadataUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetadataUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetadataUpdatedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *MetadataUpdatedEvent) GetMetadata() map[string]*DataMapValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MetadataDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	Keys       []string             `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *MetadataDeletedEvent) Reset() {
	*x = MetadataDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataDeletedEvent) ProtoMessage() {}

func (x *MetadataDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataDeletedEvent.ProtoReflect.Descriptor instead.
func (*MetadataDeletedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{7}
}

func (x *MetadataDeletedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *MetadataDeletedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *MetadataDeletedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MetadataDeletedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *MetadataDeletedEvent) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

type SecondaryIdUpdatedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId        string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId   string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp    *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders   *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	SecondaryIds []*CustomerIndex     `protobuf:"bytes,5,rep,name=secondary_ids,json=secondaryIds,proto3" json:"secondary_ids,omitempty"`
}

func (x *SecondaryIdUpdatedEvent) Reset() {
	*x = SecondaryIdUpdatedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryIdUpdatedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryIdUpdatedEvent) ProtoMessage() {}

func (x *SecondaryIdUpdatedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryIdUpdatedEvent.ProtoReflect.Descriptor instead.
func (*SecondaryIdUpdatedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{8}
}

func (x *SecondaryIdUpdatedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SecondaryIdUpdatedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SecondaryIdUpdatedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SecondaryIdUpdatedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *SecondaryIdUpdatedEvent) GetSecondaryIds() []*CustomerIndex {
	if x != nil {
		return x.SecondaryIds
	}
	return nil
}

type SecondaryIdDeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	Mappings   []*IndexMapping      `protobuf:"bytes,5,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *SecondaryIdDeletedEvent) Reset() {
	*x = SecondaryIdDeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecondaryIdDeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryIdDeletedEvent) ProtoMessage() {}

func (x *SecondaryIdDeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryIdDeletedEvent.ProtoReflect.Descriptor instead.
func (*SecondaryIdDeletedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{9}
}

func (x *SecondaryIdDeletedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *SecondaryIdDeletedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *SecondaryIdDeletedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SecondaryIdDeletedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *SecondaryIdDeletedEvent) GetMappings() []*IndexMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type ReminderAddedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	AppId      string               `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Reminder   *CustomerReminder    `protobuf:"bytes,6,opt,name=reminder,proto3" json:"reminder,omitempty"`
}

func (x *ReminderAddedEvent) Reset() {
	*x = ReminderAddedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReminderAddedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderAddedEvent) ProtoMessage() {}

func (x *ReminderAddedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderAddedEvent.ProtoReflect.Descriptor instead.
func (*ReminderAddedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{10}
}

func (x *ReminderAddedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReminderAddedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReminderAddedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReminderAddedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *ReminderAddedEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ReminderAddedEvent) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

type ReminderCancelledEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	AppId      string               `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Reminder   *CustomerReminder    `protobuf:"bytes,6,opt,name=reminder,proto3" json:"reminder,omitempty"`
}

func (x *ReminderCancelledEvent) Reset() {
	*x = ReminderCancelledEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReminderCancelledEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderCancelledEvent) ProtoMessage() {}

func (x *ReminderCancelledEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderCancelledEvent.ProtoReflect.Descriptor instead.
func (*ReminderCancelledEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{11}
}

func (x *ReminderCancelledEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReminderCancelledEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReminderCancelledEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReminderCancelledEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *ReminderCancelledEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ReminderCancelledEvent) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

type ReminderProcessedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      string                `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp  *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId      string                `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Reminder   *CustomerReminder     `protobuf:"bytes,5,opt,name=reminder,proto3" json:"reminder,omitempty"`
	Tag        *CustomerIndex        `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`
	WorkId     *wrappers.StringValue `protobuf:"bytes,7,opt,name=work_id,json=workId,proto3" json:"work_id,omitempty"`
}

func (x *ReminderProcessedEvent) Reset() {
	*x = ReminderProcessedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nuclear_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReminderProcessedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderProcessedEvent) ProtoMessage() {}

func (x *ReminderProcessedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_nuclear_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderProcessedEvent.ProtoReflect.Descriptor instead.
func (*ReminderProcessedEvent) Descriptor() ([]byte, []int) {
	return file_nuclear_proto_rawDescGZIP(), []int{12}
}

func (x *ReminderProcessedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ReminderProcessedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *ReminderProcessedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ReminderProcessedEvent) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ReminderProcessedEvent) GetReminder() *CustomerReminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

func (x *ReminderProcessedEvent) GetTag() *CustomerIndex {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *ReminderProcessedEvent) GetWorkId() *wrappers.StringValue {
	if x != nil {
		return x.WorkId
	}
	return nil
}

var File_nuclear_proto protoreflect.FileDescriptor

var file_nuclear_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x08, 0x0a, 0x0c, 0x4e, 0x75, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x6f, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a,
	0x0b, 0x74, 0x61, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x63, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x63, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x5f,
	0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x5f, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x90, 0x03, 0x0a, 0x0c, 0x4e, 0x75,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x73, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x61, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x02, 0x0a,
	0x18, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f,
	0x70, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x13,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x81, 0x02, 0x0a, 0x20, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x22, 0x83, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xdc, 0x01, 0x0a,
	0x0f, 0x54, 0x61, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x88, 0x03, 0x0a, 0x14,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x61, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x9c, 0x02, 0x0a, 0x17, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x17, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa8,
	0x02, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xac, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xd7, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x08,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x12, 0x37, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nuclear_proto_rawDescOnce sync.Once
	file_nuclear_proto_rawDescData = file_nuclear_proto_rawDesc
)

func file_nuclear_proto_rawDescGZIP() []byte {
	file_nuclear_proto_rawDescOnce.Do(func() {
		file_nuclear_proto_rawDescData = protoimpl.X.CompressGZIP(file_nuclear_proto_rawDescData)
	})
	return file_nuclear_proto_rawDescData
}

var file_nuclear_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_nuclear_proto_goTypes = []interface{}{
	(*NuclearEvent)(nil),                     // 0: com.elarian.hera.proto.NuclearEvent
	(*NuclearState)(nil),                     // 1: com.elarian.hera.proto.NuclearState
	(*NuclearStateAdoptedEvent)(nil),         // 2: com.elarian.hera.proto.NuclearStateAdoptedEvent
	(*NuclearEntityDecommissionedEvent)(nil), // 3: com.elarian.hera.proto.NuclearEntityDecommissionedEvent
	(*TagUpdatedEvent)(nil),                  // 4: com.elarian.hera.proto.TagUpdatedEvent
	(*TagDeletedEvent)(nil),                  // 5: com.elarian.hera.proto.TagDeletedEvent
	(*MetadataUpdatedEvent)(nil),             // 6: com.elarian.hera.proto.MetadataUpdatedEvent
	(*MetadataDeletedEvent)(nil),             // 7: com.elarian.hera.proto.MetadataDeletedEvent
	(*SecondaryIdUpdatedEvent)(nil),          // 8: com.elarian.hera.proto.SecondaryIdUpdatedEvent
	(*SecondaryIdDeletedEvent)(nil),          // 9: com.elarian.hera.proto.SecondaryIdDeletedEvent
	(*ReminderAddedEvent)(nil),               // 10: com.elarian.hera.proto.ReminderAddedEvent
	(*ReminderCancelledEvent)(nil),           // 11: com.elarian.hera.proto.ReminderCancelledEvent
	(*ReminderProcessedEvent)(nil),           // 12: com.elarian.hera.proto.ReminderProcessedEvent
	nil,                                      // 13: com.elarian.hera.proto.NuclearState.MetadataEntry
	nil,                                      // 14: com.elarian.hera.proto.MetadataUpdatedEvent.MetadataEntry
	(*CustomerIndex)(nil),                    // 15: com.elarian.hera.proto.CustomerIndex
	(*CustomerReminder)(nil),                 // 16: com.elarian.hera.proto.CustomerReminder
	(*timestamp.Timestamp)(nil),              // 17: google.protobuf.Timestamp
	(*AppHeaders)(nil),                       // 18: com.elarian.hera.proto.AppHeaders
	(*IndexMapping)(nil),                     // 19: com.elarian.hera.proto.IndexMapping
	(*wrappers.StringValue)(nil),             // 20: google.protobuf.StringValue
	(*DataMapValue)(nil),                     // 21: com.elarian.hera.proto.DataMapValue
}
var file_nuclear_proto_depIdxs = []int32{
	2,  // 0: com.elarian.hera.proto.NuclearEvent.state_adopted:type_name -> com.elarian.hera.proto.NuclearStateAdoptedEvent
	3,  // 1: com.elarian.hera.proto.NuclearEvent.entity_decommissioned:type_name -> com.elarian.hera.proto.NuclearEntityDecommissionedEvent
	4,  // 2: com.elarian.hera.proto.NuclearEvent.tag_updated:type_name -> com.elarian.hera.proto.TagUpdatedEvent
	5,  // 3: com.elarian.hera.proto.NuclearEvent.tag_deleted:type_name -> com.elarian.hera.proto.TagDeletedEvent
	6,  // 4: com.elarian.hera.proto.NuclearEvent.metadata_updated:type_name -> com.elarian.hera.proto.MetadataUpdatedEvent
	7,  // 5: com.elarian.hera.proto.NuclearEvent.metadata_deleted:type_name -> com.elarian.hera.proto.MetadataDeletedEvent
	8,  // 6: com.elarian.hera.proto.NuclearEvent.secondary_id_updated:type_name -> com.elarian.hera.proto.SecondaryIdUpdatedEvent
	9,  // 7: com.elarian.hera.proto.NuclearEvent.secondary_id_deleted:type_name -> com.elarian.hera.proto.SecondaryIdDeletedEvent
	10, // 8: com.elarian.hera.proto.NuclearEvent.reminder_added:type_name -> com.elarian.hera.proto.ReminderAddedEvent
	11, // 9: com.elarian.hera.proto.NuclearEvent.reminder_cancelled:type_name -> com.elarian.hera.proto.ReminderCancelledEvent
	12, // 10: com.elarian.hera.proto.NuclearEvent.reminder_processed:type_name -> com.elarian.hera.proto.ReminderProcessedEvent
	15, // 11: com.elarian.hera.proto.NuclearState.tags:type_name -> com.elarian.hera.proto.CustomerIndex
	13, // 12: com.elarian.hera.proto.NuclearState.metadata:type_name -> com.elarian.hera.proto.NuclearState.MetadataEntry
	15, // 13: com.elarian.hera.proto.NuclearState.secondary_ids:type_name -> com.elarian.hera.proto.CustomerIndex
	16, // 14: com.elarian.hera.proto.NuclearState.reminders:type_name -> com.elarian.hera.proto.CustomerReminder
	17, // 15: com.elarian.hera.proto.NuclearStateAdoptedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 16: com.elarian.hera.proto.NuclearStateAdoptedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	1,  // 17: com.elarian.hera.proto.NuclearStateAdoptedEvent.other_nuclear_state:type_name -> com.elarian.hera.proto.NuclearState
	17, // 18: com.elarian.hera.proto.NuclearEntityDecommissionedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 19: com.elarian.hera.proto.NuclearEntityDecommissionedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	17, // 20: com.elarian.hera.proto.TagUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 21: com.elarian.hera.proto.TagUpdatedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	15, // 22: com.elarian.hera.proto.TagUpdatedEvent.tags:type_name -> com.elarian.hera.proto.CustomerIndex
	17, // 23: com.elarian.hera.proto.TagDeletedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 24: com.elarian.hera.proto.TagDeletedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	17, // 25: com.elarian.hera.proto.MetadataUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 26: com.elarian.hera.proto.MetadataUpdatedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	14, // 27: com.elarian.hera.proto.MetadataUpdatedEvent.metadata:type_name -> com.elarian.hera.proto.MetadataUpdatedEvent.MetadataEntry
	17, // 28: com.elarian.hera.proto.MetadataDeletedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 29: com.elarian.hera.proto.MetadataDeletedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	17, // 30: com.elarian.hera.proto.SecondaryIdUpdatedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 31: com.elarian.hera.proto.SecondaryIdUpdatedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	15, // 32: com.elarian.hera.proto.SecondaryIdUpdatedEvent.secondary_ids:type_name -> com.elarian.hera.proto.CustomerIndex
	17, // 33: com.elarian.hera.proto.SecondaryIdDeletedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 34: com.elarian.hera.proto.SecondaryIdDeletedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	19, // 35: com.elarian.hera.proto.SecondaryIdDeletedEvent.mappings:type_name -> com.elarian.hera.proto.IndexMapping
	17, // 36: com.elarian.hera.proto.ReminderAddedEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 37: com.elarian.hera.proto.ReminderAddedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	16, // 38: com.elarian.hera.proto.ReminderAddedEvent.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	17, // 39: com.elarian.hera.proto.ReminderCancelledEvent.timestamp:type_name -> google.protobuf.Timestamp
	18, // 40: com.elarian.hera.proto.ReminderCancelledEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	16, // 41: com.elarian.hera.proto.ReminderCancelledEvent.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	17, // 42: com.elarian.hera.proto.ReminderProcessedEvent.timestamp:type_name -> google.protobuf.Timestamp
	16, // 43: com.elarian.hera.proto.ReminderProcessedEvent.reminder:type_name -> com.elarian.hera.proto.CustomerReminder
	15, // 44: com.elarian.hera.proto.ReminderProcessedEvent.tag:type_name -> com.elarian.hera.proto.CustomerIndex
	20, // 45: com.elarian.hera.proto.ReminderProcessedEvent.work_id:type_name -> google.protobuf.StringValue
	21, // 46: com.elarian.hera.proto.NuclearState.MetadataEntry.value:type_name -> com.elarian.hera.proto.DataMapValue
	21, // 47: com.elarian.hera.proto.MetadataUpdatedEvent.MetadataEntry.value:type_name -> com.elarian.hera.proto.DataMapValue
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_nuclear_proto_init() }
func file_nuclear_proto_init() {
	if File_nuclear_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nuclear_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NuclearEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NuclearState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NuclearStateAdoptedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NuclearEntityDecommissionedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryIdUpdatedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecondaryIdDeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReminderAddedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReminderCancelledEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nuclear_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReminderProcessedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nuclear_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*NuclearEvent_StateAdopted)(nil),
		(*NuclearEvent_EntityDecommissioned)(nil),
		(*NuclearEvent_TagUpdated)(nil),
		(*NuclearEvent_TagDeleted)(nil),
		(*NuclearEvent_MetadataUpdated)(nil),
		(*NuclearEvent_MetadataDeleted)(nil),
		(*NuclearEvent_SecondaryIdUpdated)(nil),
		(*NuclearEvent_SecondaryIdDeleted)(nil),
		(*NuclearEvent_ReminderAdded)(nil),
		(*NuclearEvent_ReminderCancelled)(nil),
		(*NuclearEvent_ReminderProcessed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nuclear_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nuclear_proto_goTypes,
		DependencyIndexes: file_nuclear_proto_depIdxs,
		MessageInfos:      file_nuclear_proto_msgTypes,
	}.Build()
	File_nuclear_proto = out.File
	file_nuclear_proto_rawDesc = nil
	file_nuclear_proto_goTypes = nil
	file_nuclear_proto_depIdxs = nil
}
