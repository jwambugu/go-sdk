// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: common.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessagingChannel int32

const (
	MessagingChannel_MESSAGING_CHANNEL_UNSPECIFIED  MessagingChannel = 0
	MessagingChannel_MESSAGING_CHANNEL_GOOGLE_RCS   MessagingChannel = 1
	MessagingChannel_MESSAGING_CHANNEL_FB_MESSENGER MessagingChannel = 2
	MessagingChannel_MESSAGING_CHANNEL_SMS          MessagingChannel = 3
	MessagingChannel_MESSAGING_CHANNEL_TELEGRAM     MessagingChannel = 4
	MessagingChannel_MESSAGING_CHANNEL_WHATSAPP     MessagingChannel = 5
)

// Enum value maps for MessagingChannel.
var (
	MessagingChannel_name = map[int32]string{
		0: "MESSAGING_CHANNEL_UNSPECIFIED",
		1: "MESSAGING_CHANNEL_GOOGLE_RCS",
		2: "MESSAGING_CHANNEL_FB_MESSENGER",
		3: "MESSAGING_CHANNEL_SMS",
		4: "MESSAGING_CHANNEL_TELEGRAM",
		5: "MESSAGING_CHANNEL_WHATSAPP",
	}
	MessagingChannel_value = map[string]int32{
		"MESSAGING_CHANNEL_UNSPECIFIED":  0,
		"MESSAGING_CHANNEL_GOOGLE_RCS":   1,
		"MESSAGING_CHANNEL_FB_MESSENGER": 2,
		"MESSAGING_CHANNEL_SMS":          3,
		"MESSAGING_CHANNEL_TELEGRAM":     4,
		"MESSAGING_CHANNEL_WHATSAPP":     5,
	}
)

func (x MessagingChannel) Enum() *MessagingChannel {
	p := new(MessagingChannel)
	*p = x
	return p
}

func (x MessagingChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (MessagingChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x MessagingChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingChannel.Descriptor instead.
func (MessagingChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type PaymentChannel int32

const (
	PaymentChannel_PAYMENT_CHANNEL_UNSPECIFIED PaymentChannel = 0
	PaymentChannel_PAYMENT_CHANNEL_TELCO       PaymentChannel = 1
)

// Enum value maps for PaymentChannel.
var (
	PaymentChannel_name = map[int32]string{
		0: "PAYMENT_CHANNEL_UNSPECIFIED",
		1: "PAYMENT_CHANNEL_TELCO",
	}
	PaymentChannel_value = map[string]int32{
		"PAYMENT_CHANNEL_UNSPECIFIED": 0,
		"PAYMENT_CHANNEL_TELCO":       1,
	}
)

func (x PaymentChannel) Enum() *PaymentChannel {
	p := new(PaymentChannel)
	*p = x
	return p
}

func (x PaymentChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (PaymentChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x PaymentChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentChannel.Descriptor instead.
func (PaymentChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type UssdChannel int32

const (
	UssdChannel_USSD_CHANNEL_UNSPECIFIED UssdChannel = 0
	UssdChannel_USSD_CHANNEL_TELCO       UssdChannel = 1
)

// Enum value maps for UssdChannel.
var (
	UssdChannel_name = map[int32]string{
		0: "USSD_CHANNEL_UNSPECIFIED",
		1: "USSD_CHANNEL_TELCO",
	}
	UssdChannel_value = map[string]int32{
		"USSD_CHANNEL_UNSPECIFIED": 0,
		"USSD_CHANNEL_TELCO":       1,
	}
)

func (x UssdChannel) Enum() *UssdChannel {
	p := new(UssdChannel)
	*p = x
	return p
}

func (x UssdChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UssdChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (UssdChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x UssdChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UssdChannel.Descriptor instead.
func (UssdChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type VoiceChannel int32

const (
	VoiceChannel_VOICE_CHANNEL_UNSPECIFIED VoiceChannel = 0
	VoiceChannel_VOICE_CHANNEL_TELCO       VoiceChannel = 1
)

// Enum value maps for VoiceChannel.
var (
	VoiceChannel_name = map[int32]string{
		0: "VOICE_CHANNEL_UNSPECIFIED",
		1: "VOICE_CHANNEL_TELCO",
	}
	VoiceChannel_value = map[string]int32{
		"VOICE_CHANNEL_UNSPECIFIED": 0,
		"VOICE_CHANNEL_TELCO":       1,
	}
)

func (x VoiceChannel) Enum() *VoiceChannel {
	p := new(VoiceChannel)
	*p = x
	return p
}

func (x VoiceChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (VoiceChannel) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x VoiceChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceChannel.Descriptor instead.
func (VoiceChannel) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type CustomerNumberProvider int32

const (
	CustomerNumberProvider_CUSTOMER_NUMBER_PROVIDER_UNSPECIFIED CustomerNumberProvider = 0
	CustomerNumberProvider_CUSTOMER_NUMBER_PROVIDER_FACEBOOK    CustomerNumberProvider = 1
	CustomerNumberProvider_CUSTOMER_NUMBER_PROVIDER_TELCO       CustomerNumberProvider = 2
	CustomerNumberProvider_CUSTOMER_NUMBER_PROVIDER_TELEGRAM    CustomerNumberProvider = 3
)

// Enum value maps for CustomerNumberProvider.
var (
	CustomerNumberProvider_name = map[int32]string{
		0: "CUSTOMER_NUMBER_PROVIDER_UNSPECIFIED",
		1: "CUSTOMER_NUMBER_PROVIDER_FACEBOOK",
		2: "CUSTOMER_NUMBER_PROVIDER_TELCO",
		3: "CUSTOMER_NUMBER_PROVIDER_TELEGRAM",
	}
	CustomerNumberProvider_value = map[string]int32{
		"CUSTOMER_NUMBER_PROVIDER_UNSPECIFIED": 0,
		"CUSTOMER_NUMBER_PROVIDER_FACEBOOK":    1,
		"CUSTOMER_NUMBER_PROVIDER_TELCO":       2,
		"CUSTOMER_NUMBER_PROVIDER_TELEGRAM":    3,
	}
)

func (x CustomerNumberProvider) Enum() *CustomerNumberProvider {
	p := new(CustomerNumberProvider)
	*p = x
	return p
}

func (x CustomerNumberProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerNumberProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (CustomerNumberProvider) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x CustomerNumberProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerNumberProvider.Descriptor instead.
func (CustomerNumberProvider) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	MediaType_MEDIA_TYPE_IMAGE       MediaType = 1
	MediaType_MEDIA_TYPE_AUDIO       MediaType = 2
	MediaType_MEDIA_TYPE_VIDEO       MediaType = 3
	MediaType_MEDIA_TYPE_DOCUMENT    MediaType = 4
	MediaType_MEDIA_TYPE_VOICE       MediaType = 5
	MediaType_MEDUA_TYPE_STICKER     MediaType = 6
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_UNSPECIFIED",
		1: "MEDIA_TYPE_IMAGE",
		2: "MEDIA_TYPE_AUDIO",
		3: "MEDIA_TYPE_VIDEO",
		4: "MEDIA_TYPE_DOCUMENT",
		5: "MEDIA_TYPE_VOICE",
		6: "MEDUA_TYPE_STICKER",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_UNSPECIFIED": 0,
		"MEDIA_TYPE_IMAGE":       1,
		"MEDIA_TYPE_AUDIO":       2,
		"MEDIA_TYPE_VIDEO":       3,
		"MEDIA_TYPE_DOCUMENT":    4,
		"MEDIA_TYPE_VOICE":       5,
		"MEDUA_TYPE_STICKER":     6,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type MessagingConsentAction int32

const (
	MessagingConsentAction_MESSAGING_CONSENT_ACTION_UNSPECIFIED MessagingConsentAction = 0
	MessagingConsentAction_MESSAGING_CONSENT_ACTION_OPT_IN      MessagingConsentAction = 1
	MessagingConsentAction_MESSAGING_CONSENT_ACTION_OPT_OUT     MessagingConsentAction = 2
)

// Enum value maps for MessagingConsentAction.
var (
	MessagingConsentAction_name = map[int32]string{
		0: "MESSAGING_CONSENT_ACTION_UNSPECIFIED",
		1: "MESSAGING_CONSENT_ACTION_OPT_IN",
		2: "MESSAGING_CONSENT_ACTION_OPT_OUT",
	}
	MessagingConsentAction_value = map[string]int32{
		"MESSAGING_CONSENT_ACTION_UNSPECIFIED": 0,
		"MESSAGING_CONSENT_ACTION_OPT_IN":      1,
		"MESSAGING_CONSENT_ACTION_OPT_OUT":     2,
	}
)

func (x MessagingConsentAction) Enum() *MessagingConsentAction {
	p := new(MessagingConsentAction)
	*p = x
	return p
}

func (x MessagingConsentAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingConsentAction) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (MessagingConsentAction) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x MessagingConsentAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingConsentAction.Descriptor instead.
func (MessagingConsentAction) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type MessagingConsentStatus int32

const (
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED                MessagingConsentStatus = 0
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_OPT_IN_REQUEST_SENT        MessagingConsentStatus = 101
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_OPT_IN_COMPLETED           MessagingConsentStatus = 300
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_OPT_OUT_COMPLETED          MessagingConsentStatus = 301
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_INVALID_CHANNEL_NUMBER     MessagingConsentStatus = 401
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_DECOMMISSIONED_CUSTOMER_ID MessagingConsentStatus = 402
	MessagingConsentStatus_MESSAGING_CONSENT_STATUS_APPLICATION_ERROR          MessagingConsentStatus = 501
)

// Enum value maps for MessagingConsentStatus.
var (
	MessagingConsentStatus_name = map[int32]string{
		0:   "MESSAGING_CONSENT_STATUS_UNSPECIFIED",
		101: "MESSAGING_CONSENT_STATUS_OPT_IN_REQUEST_SENT",
		300: "MESSAGING_CONSENT_STATUS_OPT_IN_COMPLETED",
		301: "MESSAGING_CONSENT_STATUS_OPT_OUT_COMPLETED",
		401: "MESSAGING_CONSENT_STATUS_INVALID_CHANNEL_NUMBER",
		402: "MESSAGING_CONSENT_STATUS_DECOMMISSIONED_CUSTOMER_ID",
		501: "MESSAGING_CONSENT_STATUS_APPLICATION_ERROR",
	}
	MessagingConsentStatus_value = map[string]int32{
		"MESSAGING_CONSENT_STATUS_UNSPECIFIED":                0,
		"MESSAGING_CONSENT_STATUS_OPT_IN_REQUEST_SENT":        101,
		"MESSAGING_CONSENT_STATUS_OPT_IN_COMPLETED":           300,
		"MESSAGING_CONSENT_STATUS_OPT_OUT_COMPLETED":          301,
		"MESSAGING_CONSENT_STATUS_INVALID_CHANNEL_NUMBER":     401,
		"MESSAGING_CONSENT_STATUS_DECOMMISSIONED_CUSTOMER_ID": 402,
		"MESSAGING_CONSENT_STATUS_APPLICATION_ERROR":          501,
	}
)

func (x MessagingConsentStatus) Enum() *MessagingConsentStatus {
	p := new(MessagingConsentStatus)
	*p = x
	return p
}

func (x MessagingConsentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingConsentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (MessagingConsentStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x MessagingConsentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingConsentStatus.Descriptor instead.
func (MessagingConsentStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type MessagingSessionStatus int32

const (
	MessagingSessionStatus_MESSAGING_SESSION_STATUSN_UNSPECIFIED MessagingSessionStatus = 0
	MessagingSessionStatus_MESSAGING_SESSION_STATUSN_ACTIVE      MessagingSessionStatus = 100
	MessagingSessionStatus_MESSAGING_SESSION_STATUSN_EXPIRED     MessagingSessionStatus = 200
)

// Enum value maps for MessagingSessionStatus.
var (
	MessagingSessionStatus_name = map[int32]string{
		0:   "MESSAGING_SESSION_STATUSN_UNSPECIFIED",
		100: "MESSAGING_SESSION_STATUSN_ACTIVE",
		200: "MESSAGING_SESSION_STATUSN_EXPIRED",
	}
	MessagingSessionStatus_value = map[string]int32{
		"MESSAGING_SESSION_STATUSN_UNSPECIFIED": 0,
		"MESSAGING_SESSION_STATUSN_ACTIVE":      100,
		"MESSAGING_SESSION_STATUSN_EXPIRED":     200,
	}
)

func (x MessagingSessionStatus) Enum() *MessagingSessionStatus {
	p := new(MessagingSessionStatus)
	*p = x
	return p
}

func (x MessagingSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (MessagingSessionStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x MessagingSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingSessionStatus.Descriptor instead.
func (MessagingSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type CustomerEventDirection int32

const (
	CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED CustomerEventDirection = 0
	CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_INBOUND     CustomerEventDirection = 1
	CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_OUTBOUND    CustomerEventDirection = 2
)

// Enum value maps for CustomerEventDirection.
var (
	CustomerEventDirection_name = map[int32]string{
		0: "CUSTOMER_EVENT_DIRECTION_UNSPECIFIED",
		1: "CUSTOMER_EVENT_DIRECTION_INBOUND",
		2: "CUSTOMER_EVENT_DIRECTION_OUTBOUND",
	}
	CustomerEventDirection_value = map[string]int32{
		"CUSTOMER_EVENT_DIRECTION_UNSPECIFIED": 0,
		"CUSTOMER_EVENT_DIRECTION_INBOUND":     1,
		"CUSTOMER_EVENT_DIRECTION_OUTBOUND":    2,
	}
)

func (x CustomerEventDirection) Enum() *CustomerEventDirection {
	p := new(CustomerEventDirection)
	*p = x
	return p
}

func (x CustomerEventDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerEventDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (CustomerEventDirection) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x CustomerEventDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerEventDirection.Descriptor instead.
func (CustomerEventDirection) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type CustomerRequestOrigin int32

const (
	CustomerRequestOrigin_CUSTOMER_REQUEST_ORIGIN_UNSPECIFIED  CustomerRequestOrigin = 0
	CustomerRequestOrigin_CUSTOMER_REQUEST_ORIGIN_API_REQUEST  CustomerRequestOrigin = 1
	CustomerRequestOrigin_CUSTOMER_REQUEST_ORIGIN_CUSTOMER_TAG CustomerRequestOrigin = 2
)

// Enum value maps for CustomerRequestOrigin.
var (
	CustomerRequestOrigin_name = map[int32]string{
		0: "CUSTOMER_REQUEST_ORIGIN_UNSPECIFIED",
		1: "CUSTOMER_REQUEST_ORIGIN_API_REQUEST",
		2: "CUSTOMER_REQUEST_ORIGIN_CUSTOMER_TAG",
	}
	CustomerRequestOrigin_value = map[string]int32{
		"CUSTOMER_REQUEST_ORIGIN_UNSPECIFIED":  0,
		"CUSTOMER_REQUEST_ORIGIN_API_REQUEST":  1,
		"CUSTOMER_REQUEST_ORIGIN_CUSTOMER_TAG": 2,
	}
)

func (x CustomerRequestOrigin) Enum() *CustomerRequestOrigin {
	p := new(CustomerRequestOrigin)
	*p = x
	return p
}

func (x CustomerRequestOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomerRequestOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (CustomerRequestOrigin) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x CustomerRequestOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomerRequestOrigin.Descriptor instead.
func (CustomerRequestOrigin) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type MessageDeliveryStatus int32

const (
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED                 MessageDeliveryStatus = 0
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_SENT                        MessageDeliveryStatus = 101
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DELIVERED                   MessageDeliveryStatus = 300
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_READ                        MessageDeliveryStatus = 301
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_RECEIVED                    MessageDeliveryStatus = 302
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_FAILED                      MessageDeliveryStatus = 400
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NO_CONSENT                  MessageDeliveryStatus = 401
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NO_CAPABILITY               MessageDeliveryStatus = 402
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_EXPIRED                     MessageDeliveryStatus = 403
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_ONLY_TEMPLATE_ALLOWED       MessageDeliveryStatus = 404
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER      MessageDeliveryStatus = 405
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED               MessageDeliveryStatus = 406
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID MessageDeliveryStatus = 407
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID         MessageDeliveryStatus = 408
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST           MessageDeliveryStatus = 409
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND               MessageDeliveryStatus = 410
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND   MessageDeliveryStatus = 411
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID   MessageDeliveryStatus = 412
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_REQUEST             MessageDeliveryStatus = 413
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR           MessageDeliveryStatus = 501
)

// Enum value maps for MessageDeliveryStatus.
var (
	MessageDeliveryStatus_name = map[int32]string{
		0:   "MESSAGE_DELIVERY_STATUS_UNSEPCIFIED",
		101: "MESSAGE_DELIVERY_STATUS_SENT",
		300: "MESSAGE_DELIVERY_STATUS_DELIVERED",
		301: "MESSAGE_DELIVERY_STATUS_READ",
		302: "MESSAGE_DELIVERY_STATUS_RECEIVED",
		400: "MESSAGE_DELIVERY_STATUS_FAILED",
		401: "MESSAGE_DELIVERY_STATUS_NO_CONSENT",
		402: "MESSAGE_DELIVERY_STATUS_NO_CAPABILITY",
		403: "MESSAGE_DELIVERY_STATUS_EXPIRED",
		404: "MESSAGE_DELIVERY_STATUS_ONLY_TEMPLATE_ALLOWED",
		405: "MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER",
		406: "MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED",
		407: "MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID",
		408: "MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID",
		409: "MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST",
		410: "MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND",
		411: "MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND",
		412: "MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID",
		413: "MESSAGE_DELIVERY_STATUS_INVALID_REQUEST",
		501: "MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR",
	}
	MessageDeliveryStatus_value = map[string]int32{
		"MESSAGE_DELIVERY_STATUS_UNSEPCIFIED":                 0,
		"MESSAGE_DELIVERY_STATUS_SENT":                        101,
		"MESSAGE_DELIVERY_STATUS_DELIVERED":                   300,
		"MESSAGE_DELIVERY_STATUS_READ":                        301,
		"MESSAGE_DELIVERY_STATUS_RECEIVED":                    302,
		"MESSAGE_DELIVERY_STATUS_FAILED":                      400,
		"MESSAGE_DELIVERY_STATUS_NO_CONSENT":                  401,
		"MESSAGE_DELIVERY_STATUS_NO_CAPABILITY":               402,
		"MESSAGE_DELIVERY_STATUS_EXPIRED":                     403,
		"MESSAGE_DELIVERY_STATUS_ONLY_TEMPLATE_ALLOWED":       404,
		"MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER":      405,
		"MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED":               406,
		"MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID": 407,
		"MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID":         408,
		"MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST":           409,
		"MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND":               410,
		"MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND":   411,
		"MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID":   412,
		"MESSAGE_DELIVERY_STATUS_INVALID_REQUEST":             413,
		"MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR":           501,
	}
)

func (x MessageDeliveryStatus) Enum() *MessageDeliveryStatus {
	p := new(MessageDeliveryStatus)
	*p = x
	return p
}

func (x MessageDeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageDeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (MessageDeliveryStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x MessageDeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageDeliveryStatus.Descriptor instead.
func (MessageDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

type VoiceCallHangupCause int32

const (
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED              VoiceCallHangupCause = 0
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER       VoiceCallHangupCause = 1
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_USER_BUSY                VoiceCallHangupCause = 17
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING          VoiceCallHangupCause = 16
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE         VoiceCallHangupCause = 18
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NO_ANSWER                VoiceCallHangupCause = 19
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT        VoiceCallHangupCause = 20
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED            VoiceCallHangupCause = 21
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED       VoiceCallHangupCause = 31
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE VoiceCallHangupCause = 41
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE      VoiceCallHangupCause = 63
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE VoiceCallHangupCause = 102
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL        VoiceCallHangupCause = 487
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_LOSE_RACE                VoiceCallHangupCause = 502
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED      VoiceCallHangupCause = 606
)

// Enum value maps for VoiceCallHangupCause.
var (
	VoiceCallHangupCause_name = map[int32]string{
		0:   "VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED",
		1:   "VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER",
		17:  "VOICE_CALL_HANGUP_CAUSE_USER_BUSY",
		16:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING",
		18:  "VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE",
		19:  "VOICE_CALL_HANGUP_CAUSE_NO_ANSWER",
		20:  "VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT",
		21:  "VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED",
		31:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED",
		41:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE",
		63:  "VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE",
		102: "VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE",
		487: "VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL",
		502: "VOICE_CALL_HANGUP_CAUSE_LOSE_RACE",
		606: "VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED",
	}
	VoiceCallHangupCause_value = map[string]int32{
		"VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED":              0,
		"VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER":       1,
		"VOICE_CALL_HANGUP_CAUSE_USER_BUSY":                17,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING":          16,
		"VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE":         18,
		"VOICE_CALL_HANGUP_CAUSE_NO_ANSWER":                19,
		"VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT":        20,
		"VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED":            21,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED":       31,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE": 41,
		"VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE":      63,
		"VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE": 102,
		"VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL":        487,
		"VOICE_CALL_HANGUP_CAUSE_LOSE_RACE":                502,
		"VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED":      606,
	}
)

func (x VoiceCallHangupCause) Enum() *VoiceCallHangupCause {
	p := new(VoiceCallHangupCause)
	*p = x
	return p
}

func (x VoiceCallHangupCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceCallHangupCause) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (VoiceCallHangupCause) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x VoiceCallHangupCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceCallHangupCause.Descriptor instead.
func (VoiceCallHangupCause) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

type VoiceCallStatus int32

const (
	VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED               VoiceCallStatus = 0
	VoiceCallStatus_VOICE_CALL_STATUS_QUEUED                    VoiceCallStatus = 100
	VoiceCallStatus_VOICE_CALL_STATUS_ANSWERED                  VoiceCallStatus = 101
	VoiceCallStatus_VOICE_CALL_STATUS_RINGING                   VoiceCallStatus = 102
	VoiceCallStatus_VOICE_CALL_STATUS_ACTIVE                    VoiceCallStatus = 200
	VoiceCallStatus_VOICE_CALL_STATUS_DIALING                   VoiceCallStatus = 201
	VoiceCallStatus_VOICE_CALL_STATUS_DIAL_COMPLETED            VoiceCallStatus = 202
	VoiceCallStatus_VOICE_CALL_STATUS_BRIDGED                   VoiceCallStatus = 203
	VoiceCallStatus_VOICE_CALL_STATUS_ENQUEUED                  VoiceCallStatus = 204
	VoiceCallStatus_VOICE_CALL_STATUS_DEQUEUED                  VoiceCallStatus = 205
	VoiceCallStatus_VOICE_CALL_STATUS_TRANSFERRED               VoiceCallStatus = 206
	VoiceCallStatus_VOICE_CALL_STATUS_TRANSFER_COMPLETED        VoiceCallStatus = 207
	VoiceCallStatus_VOICE_CALL_STATUS_COMPLETED                 VoiceCallStatus = 300
	VoiceCallStatus_VOICE_CALL_STATUS_INSUFFICIENT_CREDIT       VoiceCallStatus = 400
	VoiceCallStatus_VOICE_CALL_STATUS_NOT_ANSWERED              VoiceCallStatus = 401
	VoiceCallStatus_VOICE_CALL_STATUS_INVALID_PHONE_NUMBER      VoiceCallStatus = 402
	VoiceCallStatus_VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED VoiceCallStatus = 403
	VoiceCallStatus_VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID VoiceCallStatus = 404
	VoiceCallStatus_VOICE_CALL_STATUS_EXPIRED                   VoiceCallStatus = 405
	VoiceCallStatus_VOICE_CALL_STATUS_APPLICATION_ERROR         VoiceCallStatus = 501
)

// Enum value maps for VoiceCallStatus.
var (
	VoiceCallStatus_name = map[int32]string{
		0:   "VOICE_CALL_STATUS_UNSPECIFIED",
		100: "VOICE_CALL_STATUS_QUEUED",
		101: "VOICE_CALL_STATUS_ANSWERED",
		102: "VOICE_CALL_STATUS_RINGING",
		200: "VOICE_CALL_STATUS_ACTIVE",
		201: "VOICE_CALL_STATUS_DIALING",
		202: "VOICE_CALL_STATUS_DIAL_COMPLETED",
		203: "VOICE_CALL_STATUS_BRIDGED",
		204: "VOICE_CALL_STATUS_ENQUEUED",
		205: "VOICE_CALL_STATUS_DEQUEUED",
		206: "VOICE_CALL_STATUS_TRANSFERRED",
		207: "VOICE_CALL_STATUS_TRANSFER_COMPLETED",
		300: "VOICE_CALL_STATUS_COMPLETED",
		400: "VOICE_CALL_STATUS_INSUFFICIENT_CREDIT",
		401: "VOICE_CALL_STATUS_NOT_ANSWERED",
		402: "VOICE_CALL_STATUS_INVALID_PHONE_NUMBER",
		403: "VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED",
		404: "VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID",
		405: "VOICE_CALL_STATUS_EXPIRED",
		501: "VOICE_CALL_STATUS_APPLICATION_ERROR",
	}
	VoiceCallStatus_value = map[string]int32{
		"VOICE_CALL_STATUS_UNSPECIFIED":               0,
		"VOICE_CALL_STATUS_QUEUED":                    100,
		"VOICE_CALL_STATUS_ANSWERED":                  101,
		"VOICE_CALL_STATUS_RINGING":                   102,
		"VOICE_CALL_STATUS_ACTIVE":                    200,
		"VOICE_CALL_STATUS_DIALING":                   201,
		"VOICE_CALL_STATUS_DIAL_COMPLETED":            202,
		"VOICE_CALL_STATUS_BRIDGED":                   203,
		"VOICE_CALL_STATUS_ENQUEUED":                  204,
		"VOICE_CALL_STATUS_DEQUEUED":                  205,
		"VOICE_CALL_STATUS_TRANSFERRED":               206,
		"VOICE_CALL_STATUS_TRANSFER_COMPLETED":        207,
		"VOICE_CALL_STATUS_COMPLETED":                 300,
		"VOICE_CALL_STATUS_INSUFFICIENT_CREDIT":       400,
		"VOICE_CALL_STATUS_NOT_ANSWERED":              401,
		"VOICE_CALL_STATUS_INVALID_PHONE_NUMBER":      402,
		"VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED": 403,
		"VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID": 404,
		"VOICE_CALL_STATUS_EXPIRED":                   405,
		"VOICE_CALL_STATUS_APPLICATION_ERROR":         501,
	}
)

func (x VoiceCallStatus) Enum() *VoiceCallStatus {
	p := new(VoiceCallStatus)
	*p = x
	return p
}

func (x VoiceCallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceCallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (VoiceCallStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x VoiceCallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceCallStatus.Descriptor instead.
func (VoiceCallStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_UNSPECIFIED                PaymentStatus = 0
	PaymentStatus_PAYMENT_STATUS_QUEUED                     PaymentStatus = 101
	PaymentStatus_PAYMENT_STATUS_PENDING_CONFIRMATION       PaymentStatus = 102
	PaymentStatus_PAYMENT_STATUS_PENDING_VALIDATION         PaymentStatus = 103
	PaymentStatus_PAYMENT_STATUS_VALIDATED                  PaymentStatus = 104
	PaymentStatus_PAYMENT_STATUS_INVALID_REQUEST            PaymentStatus = 200
	PaymentStatus_PAYMENT_STATUS_NOT_SUPPORTED              PaymentStatus = 201
	PaymentStatus_PAYMENT_STATUS_INSUFFICIENT_FUNDS         PaymentStatus = 202
	PaymentStatus_PAYMENT_STATUS_APPLICATION_ERROR          PaymentStatus = 203
	PaymentStatus_PAYMENT_STATUS_NOT_ALLOWED                PaymentStatus = 204
	PaymentStatus_PAYMENT_STATUS_DUPLICATE_REQUEST          PaymentStatus = 205
	PaymentStatus_PAYMENT_STATUS_INVALID_PURSE              PaymentStatus = 206
	PaymentStatus_PAYMENT_STATUS_INVALID_WALLET             PaymentStatus = 207
	PaymentStatus_PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID PaymentStatus = 299
	PaymentStatus_PAYMENT_STATUS_SUCCESS                    PaymentStatus = 300
	PaymentStatus_PAYMENT_STATUS_PASS_THROUGH               PaymentStatus = 301
	PaymentStatus_PAYMENT_STATUS_FAILED                     PaymentStatus = 400
	PaymentStatus_PAYMENT_STATUS_THROTTLED                  PaymentStatus = 401
	PaymentStatus_PAYMENT_STATUS_EXPIRED                    PaymentStatus = 402
	PaymentStatus_PAYMENT_STATUS_REJECTED                   PaymentStatus = 403
	PaymentStatus_PAYMENT_STATUS_REVERSED                   PaymentStatus = 500
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0:   "PAYMENT_STATUS_UNSPECIFIED",
		101: "PAYMENT_STATUS_QUEUED",
		102: "PAYMENT_STATUS_PENDING_CONFIRMATION",
		103: "PAYMENT_STATUS_PENDING_VALIDATION",
		104: "PAYMENT_STATUS_VALIDATED",
		200: "PAYMENT_STATUS_INVALID_REQUEST",
		201: "PAYMENT_STATUS_NOT_SUPPORTED",
		202: "PAYMENT_STATUS_INSUFFICIENT_FUNDS",
		203: "PAYMENT_STATUS_APPLICATION_ERROR",
		204: "PAYMENT_STATUS_NOT_ALLOWED",
		205: "PAYMENT_STATUS_DUPLICATE_REQUEST",
		206: "PAYMENT_STATUS_INVALID_PURSE",
		207: "PAYMENT_STATUS_INVALID_WALLET",
		299: "PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID",
		300: "PAYMENT_STATUS_SUCCESS",
		301: "PAYMENT_STATUS_PASS_THROUGH",
		400: "PAYMENT_STATUS_FAILED",
		401: "PAYMENT_STATUS_THROTTLED",
		402: "PAYMENT_STATUS_EXPIRED",
		403: "PAYMENT_STATUS_REJECTED",
		500: "PAYMENT_STATUS_REVERSED",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_UNSPECIFIED":                0,
		"PAYMENT_STATUS_QUEUED":                     101,
		"PAYMENT_STATUS_PENDING_CONFIRMATION":       102,
		"PAYMENT_STATUS_PENDING_VALIDATION":         103,
		"PAYMENT_STATUS_VALIDATED":                  104,
		"PAYMENT_STATUS_INVALID_REQUEST":            200,
		"PAYMENT_STATUS_NOT_SUPPORTED":              201,
		"PAYMENT_STATUS_INSUFFICIENT_FUNDS":         202,
		"PAYMENT_STATUS_APPLICATION_ERROR":          203,
		"PAYMENT_STATUS_NOT_ALLOWED":                204,
		"PAYMENT_STATUS_DUPLICATE_REQUEST":          205,
		"PAYMENT_STATUS_INVALID_PURSE":              206,
		"PAYMENT_STATUS_INVALID_WALLET":             207,
		"PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID": 299,
		"PAYMENT_STATUS_SUCCESS":                    300,
		"PAYMENT_STATUS_PASS_THROUGH":               301,
		"PAYMENT_STATUS_FAILED":                     400,
		"PAYMENT_STATUS_THROTTLED":                  401,
		"PAYMENT_STATUS_EXPIRED":                    402,
		"PAYMENT_STATUS_REJECTED":                   403,
		"PAYMENT_STATUS_REVERSED":                   500,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[14].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[14]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

type PaymentAccountType int32

const (
	PaymentAccountType_PAYMENT_ACCOUNT_TYPE_UNSPECIFIED PaymentAccountType = 0
	PaymentAccountType_PAYMENT_ACCOUNT_TYPE_PURSE       PaymentAccountType = 1
	PaymentAccountType_PAYMENT_ACCOUNT_TYPE_WALLET      PaymentAccountType = 2
)

// Enum value maps for PaymentAccountType.
var (
	PaymentAccountType_name = map[int32]string{
		0: "PAYMENT_ACCOUNT_TYPE_UNSPECIFIED",
		1: "PAYMENT_ACCOUNT_TYPE_PURSE",
		2: "PAYMENT_ACCOUNT_TYPE_WALLET",
	}
	PaymentAccountType_value = map[string]int32{
		"PAYMENT_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"PAYMENT_ACCOUNT_TYPE_PURSE":       1,
		"PAYMENT_ACCOUNT_TYPE_WALLET":      2,
	}
)

func (x PaymentAccountType) Enum() *PaymentAccountType {
	p := new(PaymentAccountType)
	*p = x
	return p
}

func (x PaymentAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[15].Descriptor()
}

func (PaymentAccountType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[15]
}

func (x PaymentAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentAccountType.Descriptor instead.
func (PaymentAccountType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

type PaymentTransactionSide int32

const (
	PaymentTransactionSide_PAYMENT_TRANSACTION_SIDE_UNSPECIFIED PaymentTransactionSide = 0
	PaymentTransactionSide_PAYMENT_TRANSACTION_SIDE_CREDIT      PaymentTransactionSide = 1
	PaymentTransactionSide_PAYMENT_TRANSACTION_SIDE_DEBIT       PaymentTransactionSide = 2
)

// Enum value maps for PaymentTransactionSide.
var (
	PaymentTransactionSide_name = map[int32]string{
		0: "PAYMENT_TRANSACTION_SIDE_UNSPECIFIED",
		1: "PAYMENT_TRANSACTION_SIDE_CREDIT",
		2: "PAYMENT_TRANSACTION_SIDE_DEBIT",
	}
	PaymentTransactionSide_value = map[string]int32{
		"PAYMENT_TRANSACTION_SIDE_UNSPECIFIED": 0,
		"PAYMENT_TRANSACTION_SIDE_CREDIT":      1,
		"PAYMENT_TRANSACTION_SIDE_DEBIT":       2,
	}
)

func (x PaymentTransactionSide) Enum() *PaymentTransactionSide {
	p := new(PaymentTransactionSide)
	*p = x
	return p
}

func (x PaymentTransactionSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentTransactionSide) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[16].Descriptor()
}

func (PaymentTransactionSide) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[16]
}

func (x PaymentTransactionSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentTransactionSide.Descriptor instead.
func (PaymentTransactionSide) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

type TextToSpeechVoice int32

const (
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_UNSPECIFIED TextToSpeechVoice = 0
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_MALE        TextToSpeechVoice = 1
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_FEMALE      TextToSpeechVoice = 2
)

// Enum value maps for TextToSpeechVoice.
var (
	TextToSpeechVoice_name = map[int32]string{
		0: "TEXT_TO_SPEECH_VOICE_UNSPECIFIED",
		1: "TEXT_TO_SPEECH_VOICE_MALE",
		2: "TEXT_TO_SPEECH_VOICE_FEMALE",
	}
	TextToSpeechVoice_value = map[string]int32{
		"TEXT_TO_SPEECH_VOICE_UNSPECIFIED": 0,
		"TEXT_TO_SPEECH_VOICE_MALE":        1,
		"TEXT_TO_SPEECH_VOICE_FEMALE":      2,
	}
)

func (x TextToSpeechVoice) Enum() *TextToSpeechVoice {
	p := new(TextToSpeechVoice)
	*p = x
	return p
}

func (x TextToSpeechVoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextToSpeechVoice) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[17].Descriptor()
}

func (TextToSpeechVoice) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[17]
}

func (x TextToSpeechVoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextToSpeechVoice.Descriptor instead.
func (TextToSpeechVoice) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

type Cash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string  `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Amount       float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Cash) Reset() {
	*x = Cash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cash) ProtoMessage() {}

func (x *Cash) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cash.ProtoReflect.Descriptor instead.
func (*Cash) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Cash) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *Cash) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CustomerNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider  CustomerNumberProvider `protobuf:"varint,1,opt,name=provider,proto3,enum=com.elarian.hera.proto.CustomerNumberProvider" json:"provider,omitempty"`
	Number    string                 `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Partition *wrappers.StringValue  `protobuf:"bytes,3,opt,name=partition,proto3" json:"partition,omitempty"`
}

func (x *CustomerNumber) Reset() {
	*x = CustomerNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerNumber) ProtoMessage() {}

func (x *CustomerNumber) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerNumber.ProtoReflect.Descriptor instead.
func (*CustomerNumber) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *CustomerNumber) GetProvider() CustomerNumberProvider {
	if x != nil {
		return x.Provider
	}
	return CustomerNumberProvider_CUSTOMER_NUMBER_PROVIDER_UNSPECIFIED
}

func (x *CustomerNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *CustomerNumber) GetPartition() *wrappers.StringValue {
	if x != nil {
		return x.Partition
	}
	return nil
}

type MessagingChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel MessagingChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.MessagingChannel" json:"channel,omitempty"`
	Number  string           `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *MessagingChannelNumber) Reset() {
	*x = MessagingChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingChannelNumber) ProtoMessage() {}

func (x *MessagingChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingChannelNumber.ProtoReflect.Descriptor instead.
func (*MessagingChannelNumber) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *MessagingChannelNumber) GetChannel() MessagingChannel {
	if x != nil {
		return x.Channel
	}
	return MessagingChannel_MESSAGING_CHANNEL_UNSPECIFIED
}

func (x *MessagingChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type UssdChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel UssdChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.UssdChannel" json:"channel,omitempty"`
	Number  string      `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *UssdChannelNumber) Reset() {
	*x = UssdChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdChannelNumber) ProtoMessage() {}

func (x *UssdChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdChannelNumber.ProtoReflect.Descriptor instead.
func (*UssdChannelNumber) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *UssdChannelNumber) GetChannel() UssdChannel {
	if x != nil {
		return x.Channel
	}
	return UssdChannel_USSD_CHANNEL_UNSPECIFIED
}

func (x *UssdChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type PaymentChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel PaymentChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.PaymentChannel" json:"channel,omitempty"`
	Number  string         `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *PaymentChannelNumber) Reset() {
	*x = PaymentChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelNumber) ProtoMessage() {}

func (x *PaymentChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelNumber.ProtoReflect.Descriptor instead.
func (*PaymentChannelNumber) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentChannelNumber) GetChannel() PaymentChannel {
	if x != nil {
		return x.Channel
	}
	return PaymentChannel_PAYMENT_CHANNEL_UNSPECIFIED
}

func (x *PaymentChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type VoiceChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel VoiceChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.VoiceChannel" json:"channel,omitempty"`
	Number  string       `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *VoiceChannelNumber) Reset() {
	*x = VoiceChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceChannelNumber) ProtoMessage() {}

func (x *VoiceChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceChannelNumber.ProtoReflect.Descriptor instead.
func (*VoiceChannelNumber) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *VoiceChannelNumber) GetChannel() VoiceChannel {
	if x != nil {
		return x.Channel
	}
	return VoiceChannel_VOICE_CHANNEL_UNSPECIFIED
}

func (x *VoiceChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type TextMessageTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params []string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *TextMessageTemplate) Reset() {
	*x = TextMessageTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessageTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessageTemplate) ProtoMessage() {}

func (x *TextMessageTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessageTemplate.ProtoReflect.Descriptor instead.
func (*TextMessageTemplate) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *TextMessageTemplate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TextMessageTemplate) GetParams() []string {
	if x != nil {
		return x.Params
	}
	return nil
}

type TextMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     *wrappers.StringValue `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Template *TextMessageTemplate  `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
}

func (x *TextMessageBody) Reset() {
	*x = TextMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessageBody) ProtoMessage() {}

func (x *TextMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessageBody.ProtoReflect.Descriptor instead.
func (*TextMessageBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *TextMessageBody) GetText() *wrappers.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextMessageBody) GetTemplate() *TextMessageTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

type MediaMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string    `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Media MediaType `protobuf:"varint,2,opt,name=media,proto3,enum=com.elarian.hera.proto.MediaType" json:"media,omitempty"`
}

func (x *MediaMessageBody) Reset() {
	*x = MediaMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMessageBody) ProtoMessage() {}

func (x *MediaMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMessageBody.ProtoReflect.Descriptor instead.
func (*MediaMessageBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *MediaMessageBody) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaMessageBody) GetMedia() MediaType {
	if x != nil {
		return x.Media
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

type LocationMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *LocationMessageBody) Reset() {
	*x = LocationMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMessageBody) ProtoMessage() {}

func (x *LocationMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMessageBody.ProtoReflect.Descriptor instead.
func (*LocationMessageBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *LocationMessageBody) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationMessageBody) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type CustomerMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*CustomerMessageBody_Text
	//	*CustomerMessageBody_Media
	//	*CustomerMessageBody_Location
	Entry isCustomerMessageBody_Entry `protobuf_oneof:"entry"`
}

func (x *CustomerMessageBody) Reset() {
	*x = CustomerMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerMessageBody) ProtoMessage() {}

func (x *CustomerMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerMessageBody.ProtoReflect.Descriptor instead.
func (*CustomerMessageBody) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (m *CustomerMessageBody) GetEntry() isCustomerMessageBody_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *CustomerMessageBody) GetText() *TextMessageBody {
	if x, ok := x.GetEntry().(*CustomerMessageBody_Text); ok {
		return x.Text
	}
	return nil
}

func (x *CustomerMessageBody) GetMedia() *MediaMessageBody {
	if x, ok := x.GetEntry().(*CustomerMessageBody_Media); ok {
		return x.Media
	}
	return nil
}

func (x *CustomerMessageBody) GetLocation() *LocationMessageBody {
	if x, ok := x.GetEntry().(*CustomerMessageBody_Location); ok {
		return x.Location
	}
	return nil
}

type isCustomerMessageBody_Entry interface {
	isCustomerMessageBody_Entry()
}

type CustomerMessageBody_Text struct {
	Text *TextMessageBody `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type CustomerMessageBody_Media struct {
	Media *MediaMessageBody `protobuf:"bytes,2,opt,name=media,proto3,oneof"`
}

type CustomerMessageBody_Location struct {
	Location *LocationMessageBody `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

func (*CustomerMessageBody_Text) isCustomerMessageBody_Entry() {}

func (*CustomerMessageBody_Media) isCustomerMessageBody_Entry() {}

func (*CustomerMessageBody_Location) isCustomerMessageBody_Entry() {}

type UssdMenu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IsTerminal bool   `protobuf:"varint,2,opt,name=is_terminal,json=isTerminal,proto3" json:"is_terminal,omitempty"`
}

func (x *UssdMenu) Reset() {
	*x = UssdMenu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdMenu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdMenu) ProtoMessage() {}

func (x *UssdMenu) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdMenu.ProtoReflect.Descriptor instead.
func (*UssdMenu) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *UssdMenu) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UssdMenu) GetIsTerminal() bool {
	if x != nil {
		return x.IsTerminal
	}
	return false
}

type UssdHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input     *wrappers.StringValue `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Menu      *UssdMenu             `protobuf:"bytes,2,opt,name=menu,proto3" json:"menu,omitempty"`
	CreatedAt *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *UssdHop) Reset() {
	*x = UssdHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdHop) ProtoMessage() {}

func (x *UssdHop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdHop.ProtoReflect.Descriptor instead.
func (*UssdHop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *UssdHop) GetInput() *wrappers.StringValue {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *UssdHop) GetMenu() *UssdMenu {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *UssdHop) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type DataMapValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*DataMapValue_StringVal
	//	*DataMapValue_BytesVal
	Value isDataMapValue_Value `protobuf_oneof:"value"`
}

func (x *DataMapValue) Reset() {
	*x = DataMapValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataMapValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataMapValue) ProtoMessage() {}

func (x *DataMapValue) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataMapValue.ProtoReflect.Descriptor instead.
func (*DataMapValue) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (m *DataMapValue) GetValue() isDataMapValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *DataMapValue) GetStringVal() string {
	if x, ok := x.GetValue().(*DataMapValue_StringVal); ok {
		return x.StringVal
	}
	return ""
}

func (x *DataMapValue) GetBytesVal() []byte {
	if x, ok := x.GetValue().(*DataMapValue_BytesVal); ok {
		return x.BytesVal
	}
	return nil
}

type isDataMapValue_Value interface {
	isDataMapValue_Value()
}

type DataMapValue_StringVal struct {
	StringVal string `protobuf:"bytes,2,opt,name=string_val,json=stringVal,proto3,oneof"`
}

type DataMapValue_BytesVal struct {
	BytesVal []byte `protobuf:"bytes,3,opt,name=bytes_val,json=bytesVal,proto3,oneof"`
}

func (*DataMapValue_StringVal) isDataMapValue_Value() {}

func (*DataMapValue_BytesVal) isDataMapValue_Value() {}

type MessagingConsentStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    MessagingConsentStatus `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.MessagingConsentStatus" json:"status,omitempty"`
	UpdatedAt *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MessagingConsentStateEntry) Reset() {
	*x = MessagingConsentStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingConsentStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingConsentStateEntry) ProtoMessage() {}

func (x *MessagingConsentStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingConsentStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingConsentStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *MessagingConsentStateEntry) GetStatus() MessagingConsentStatus {
	if x != nil {
		return x.Status
	}
	return MessagingConsentStatus_MESSAGING_CONSENT_STATUS_UNSPECIFIED
}

func (x *MessagingConsentStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MessagingSessionStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt  *timestamp.Timestamp `protobuf:"bytes,1,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Expiration *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *MessagingSessionStateEntry) Reset() {
	*x = MessagingSessionStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingSessionStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingSessionStateEntry) ProtoMessage() {}

func (x *MessagingSessionStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingSessionStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingSessionStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *MessagingSessionStateEntry) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *MessagingSessionStateEntry) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type MessagingChannelStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber             `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber     `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	ConsentState   *MessagingConsentStateEntry `protobuf:"bytes,3,opt,name=consent_state,json=consentState,proto3" json:"consent_state,omitempty"`
	ActiveSession  *MessagingSessionStateEntry `protobuf:"bytes,4,opt,name=active_session,json=activeSession,proto3" json:"active_session,omitempty"`
}

func (x *MessagingChannelStateEntry) Reset() {
	*x = MessagingChannelStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingChannelStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingChannelStateEntry) ProtoMessage() {}

func (x *MessagingChannelStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingChannelStateEntry.ProtoReflect.Descriptor instead.
func (*MessagingChannelStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *MessagingChannelStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetConsentState() *MessagingConsentStateEntry {
	if x != nil {
		return x.ConsentState
	}
	return nil
}

func (x *MessagingChannelStateEntry) GetActiveSession() *MessagingSessionStateEntry {
	if x != nil {
		return x.ActiveSession
	}
	return nil
}

type MessageStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      CustomerEventDirection  `protobuf:"varint,1,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	CustomerNumber *CustomerNumber         `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *MessagingChannelNumber `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	MessageId      string                  `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	AppId          *wrappers.StringValue   `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Text           *wrappers.StringValue   `protobuf:"bytes,6,opt,name=text,proto3" json:"text,omitempty"`
	Template       *TextMessageTemplate    `protobuf:"bytes,7,opt,name=template,proto3" json:"template,omitempty"`
	Media          []*MediaMessageBody     `protobuf:"bytes,8,rep,name=media,proto3" json:"media,omitempty"`
	Location       *LocationMessageBody    `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	CreatedAt      *timestamp.Timestamp    `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp    `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status         MessageDeliveryStatus   `protobuf:"varint,12,opt,name=status,proto3,enum=com.elarian.hera.proto.MessageDeliveryStatus" json:"status,omitempty"`
}

func (x *MessageStateEntry) Reset() {
	*x = MessageStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStateEntry) ProtoMessage() {}

func (x *MessageStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStateEntry.ProtoReflect.Descriptor instead.
func (*MessageStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *MessageStateEntry) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *MessageStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *MessageStateEntry) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *MessageStateEntry) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *MessageStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *MessageStateEntry) GetText() *wrappers.StringValue {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *MessageStateEntry) GetTemplate() *TextMessageTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *MessageStateEntry) GetMedia() []*MediaMessageBody {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *MessageStateEntry) GetLocation() *LocationMessageBody {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MessageStateEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MessageStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MessageStateEntry) GetStatus() MessageDeliveryStatus {
	if x != nil {
		return x.Status
	}
	return MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSEPCIFIED
}

type MessagingState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelState    []*MessagingChannelStateEntry `protobuf:"bytes,1,rep,name=channel_state,json=channelState,proto3" json:"channel_state,omitempty"`
	Messages        []*MessageStateEntry          `protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	CustomerNumbers []*CustomerNumber             `protobuf:"bytes,3,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers  []*MessagingChannelNumber     `protobuf:"bytes,4,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
}

func (x *MessagingState) Reset() {
	*x = MessagingState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingState) ProtoMessage() {}

func (x *MessagingState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingState.ProtoReflect.Descriptor instead.
func (*MessagingState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *MessagingState) GetChannelState() []*MessagingChannelStateEntry {
	if x != nil {
		return x.ChannelState
	}
	return nil
}

func (x *MessagingState) GetMessages() []*MessageStateEntry {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *MessagingState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *MessagingState) GetChannelNumbers() []*MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

type UssdSessionStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber       `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *UssdChannelNumber    `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	SessionId      string                `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AppId          *wrappers.StringValue `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Hops           []*UssdHop            `protobuf:"bytes,5,rep,name=hops,proto3" json:"hops,omitempty"`
	CreatedAt      *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UssdSessionStateEntry) Reset() {
	*x = UssdSessionStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdSessionStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdSessionStateEntry) ProtoMessage() {}

func (x *UssdSessionStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdSessionStateEntry.ProtoReflect.Descriptor instead.
func (*UssdSessionStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *UssdSessionStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *UssdSessionStateEntry) GetChannelNumber() *UssdChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *UssdSessionStateEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UssdSessionStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *UssdSessionStateEntry) GetHops() []*UssdHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *UssdSessionStateEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UssdSessionStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UssdState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions        []*UssdSessionStateEntry `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	CustomerNumbers []*CustomerNumber        `protobuf:"bytes,2,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers  []*UssdChannelNumber     `protobuf:"bytes,3,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
}

func (x *UssdState) Reset() {
	*x = UssdState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdState) ProtoMessage() {}

func (x *UssdState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdState.ProtoReflect.Descriptor instead.
func (*UssdState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *UssdState) GetSessions() []*UssdSessionStateEntry {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *UssdState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *UssdState) GetChannelNumbers() []*UssdChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

type VoiceCallDialInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationNumber string               `protobuf:"bytes,1,opt,name=destination_number,json=destinationNumber,proto3" json:"destination_number,omitempty"`
	StartedAt         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Duration          *duration.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *VoiceCallDialInput) Reset() {
	*x = VoiceCallDialInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallDialInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallDialInput) ProtoMessage() {}

func (x *VoiceCallDialInput) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallDialInput.ProtoReflect.Descriptor instead.
func (*VoiceCallDialInput) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *VoiceCallDialInput) GetDestinationNumber() string {
	if x != nil {
		return x.DestinationNumber
	}
	return ""
}

func (x *VoiceCallDialInput) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *VoiceCallDialInput) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type VoiceCallQueueInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueuedAt          *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	DequeuedAt          *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=dequeued_at,json=dequeuedAt,proto3" json:"dequeued_at,omitempty"`
	DequeuedToNumber    *wrappers.StringValue `protobuf:"bytes,3,opt,name=dequeued_to_number,json=dequeuedToNumber,proto3" json:"dequeued_to_number,omitempty"`
	DequeuedToSessionId *wrappers.StringValue `protobuf:"bytes,4,opt,name=dequeued_to_sessionId,json=dequeuedToSessionId,proto3" json:"dequeued_to_sessionId,omitempty"`
	QueueDuration       *duration.Duration    `protobuf:"bytes,5,opt,name=queue_duration,json=queueDuration,proto3" json:"queue_duration,omitempty"`
}

func (x *VoiceCallQueueInput) Reset() {
	*x = VoiceCallQueueInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallQueueInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallQueueInput) ProtoMessage() {}

func (x *VoiceCallQueueInput) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallQueueInput.ProtoReflect.Descriptor instead.
func (*VoiceCallQueueInput) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *VoiceCallQueueInput) GetEnqueuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DequeuedAt
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedToNumber() *wrappers.StringValue {
	if x != nil {
		return x.DequeuedToNumber
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedToSessionId() *wrappers.StringValue {
	if x != nil {
		return x.DequeuedToSessionId
	}
	return nil
}

func (x *VoiceCallQueueInput) GetQueueDuration() *duration.Duration {
	if x != nil {
		return x.QueueDuration
	}
	return nil
}

type VoiceCallHopInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       VoiceCallStatus       `protobuf:"varint,1,opt,name=status,proto3,enum=com.elarian.hera.proto.VoiceCallStatus" json:"status,omitempty"`
	StartedAt    *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	HangupCause  VoiceCallHangupCause  `protobuf:"varint,3,opt,name=hangup_cause,json=hangupCause,proto3,enum=com.elarian.hera.proto.VoiceCallHangupCause" json:"hangup_cause,omitempty"`
	DtmfDigits   *wrappers.StringValue `protobuf:"bytes,4,opt,name=dtmf_digits,json=dtmfDigits,proto3" json:"dtmf_digits,omitempty"`
	RecordingUrl *wrappers.StringValue `protobuf:"bytes,5,opt,name=recording_url,json=recordingUrl,proto3" json:"recording_url,omitempty"`
	DialData     *VoiceCallDialInput   `protobuf:"bytes,6,opt,name=dial_data,json=dialData,proto3" json:"dial_data,omitempty"`
	QueueData    *VoiceCallQueueInput  `protobuf:"bytes,7,opt,name=queue_data,json=queueData,proto3" json:"queue_data,omitempty"`
}

func (x *VoiceCallHopInput) Reset() {
	*x = VoiceCallHopInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallHopInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallHopInput) ProtoMessage() {}

func (x *VoiceCallHopInput) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallHopInput.ProtoReflect.Descriptor instead.
func (*VoiceCallHopInput) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *VoiceCallHopInput) GetStatus() VoiceCallStatus {
	if x != nil {
		return x.Status
	}
	return VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED
}

func (x *VoiceCallHopInput) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *VoiceCallHopInput) GetHangupCause() VoiceCallHangupCause {
	if x != nil {
		return x.HangupCause
	}
	return VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED
}

func (x *VoiceCallHopInput) GetDtmfDigits() *wrappers.StringValue {
	if x != nil {
		return x.DtmfDigits
	}
	return nil
}

func (x *VoiceCallHopInput) GetRecordingUrl() *wrappers.StringValue {
	if x != nil {
		return x.RecordingUrl
	}
	return nil
}

func (x *VoiceCallHopInput) GetDialData() *VoiceCallDialInput {
	if x != nil {
		return x.DialData
	}
	return nil
}

func (x *VoiceCallHopInput) GetQueueData() *VoiceCallQueueInput {
	if x != nil {
		return x.QueueData
	}
	return nil
}

type VoiceCallHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input     *VoiceCallHopInput   `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Actions   []*VoiceCallAction   `protobuf:"bytes,2,rep,name=actions,proto3" json:"actions,omitempty"`
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *VoiceCallHop) Reset() {
	*x = VoiceCallHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallHop) ProtoMessage() {}

func (x *VoiceCallHop) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallHop.ProtoReflect.Descriptor instead.
func (*VoiceCallHop) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *VoiceCallHop) GetInput() *VoiceCallHopInput {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *VoiceCallHop) GetActions() []*VoiceCallAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *VoiceCallHop) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type VoiceCallStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      CustomerEventDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	CustomerNumber *CustomerNumber        `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *VoiceChannelNumber    `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	SessionId      string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AppId          *wrappers.StringValue  `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Status         VoiceCallStatus        `protobuf:"varint,6,opt,name=status,proto3,enum=com.elarian.hera.proto.VoiceCallStatus" json:"status,omitempty"`
	Hops           []*VoiceCallHop        `protobuf:"bytes,7,rep,name=hops,proto3" json:"hops,omitempty"`
	Duration       *duration.Duration     `protobuf:"bytes,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Cost           *Cash                  `protobuf:"bytes,9,opt,name=cost,proto3" json:"cost,omitempty"`
	CreatedAt      *timestamp.Timestamp   `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp   `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *VoiceCallStateEntry) Reset() {
	*x = VoiceCallStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallStateEntry) ProtoMessage() {}

func (x *VoiceCallStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallStateEntry.ProtoReflect.Descriptor instead.
func (*VoiceCallStateEntry) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{25}
}

func (x *VoiceCallStateEntry) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *VoiceCallStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *VoiceCallStateEntry) GetChannelNumber() *VoiceChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *VoiceCallStateEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *VoiceCallStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *VoiceCallStateEntry) GetStatus() VoiceCallStatus {
	if x != nil {
		return x.Status
	}
	return VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED
}

func (x *VoiceCallStateEntry) GetHops() []*VoiceCallHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *VoiceCallStateEntry) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *VoiceCallStateEntry) GetCost() *Cash {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *VoiceCallStateEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *VoiceCallStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type VoiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calls           []*VoiceCallStateEntry `protobuf:"bytes,1,rep,name=calls,proto3" json:"calls,omitempty"`
	CustomerNumbers []*CustomerNumber      `protobuf:"bytes,2,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers  []*VoiceChannelNumber  `protobuf:"bytes,3,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
}

func (x *VoiceState) Reset() {
	*x = VoiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceState) ProtoMessage() {}

func (x *VoiceState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceState.ProtoReflect.Descriptor instead.
func (*VoiceState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{26}
}

func (x *VoiceState) GetCalls() []*VoiceCallStateEntry {
	if x != nil {
		return x.Calls
	}
	return nil
}

func (x *VoiceState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *VoiceState) GetChannelNumbers() []*VoiceChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

type PaymentTransactionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction      CustomerEventDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	CustomerNumber *CustomerNumber        `protobuf:"bytes,2,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *PaymentChannelNumber  `protobuf:"bytes,3,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	TransactionId  string                 `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	AppId          *wrappers.StringValue  `protobuf:"bytes,5,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	PurseId        string                 `protobuf:"bytes,6,opt,name=purse_id,json=purseId,proto3" json:"purse_id,omitempty"`
	Value          *Cash                  `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	CreatedAt      *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Status         PaymentStatus          `protobuf:"varint,10,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
}

func (x *PaymentTransactionState) Reset() {
	*x = PaymentTransactionState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentTransactionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTransactionState) ProtoMessage() {}

func (x *PaymentTransactionState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTransactionState.ProtoReflect.Descriptor instead.
func (*PaymentTransactionState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{27}
}

func (x *PaymentTransactionState) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *PaymentTransactionState) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PaymentTransactionState) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *PaymentTransactionState) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PaymentTransactionState) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *PaymentTransactionState) GetPurseId() string {
	if x != nil {
		return x.PurseId
	}
	return ""
}

func (x *PaymentTransactionState) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PaymentTransactionState) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentTransactionState) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PaymentTransactionState) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

type PendingPaymentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamp.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Value     *Cash                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Converted *Cash                `protobuf:"bytes,3,opt,name=converted,proto3" json:"converted,omitempty"`
}

func (x *PendingPaymentTransaction) Reset() {
	*x = PendingPaymentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingPaymentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingPaymentTransaction) ProtoMessage() {}

func (x *PendingPaymentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingPaymentTransaction.ProtoReflect.Descriptor instead.
func (*PendingPaymentTransaction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{28}
}

func (x *PendingPaymentTransaction) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PendingPaymentTransaction) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PendingPaymentTransaction) GetConverted() *Cash {
	if x != nil {
		return x.Converted
	}
	return nil
}

type PaymentBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string                                `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Available    *Cash                                 `protobuf:"bytes,2,opt,name=available,proto3" json:"available,omitempty"`
	Actual       *Cash                                 `protobuf:"bytes,3,opt,name=actual,proto3" json:"actual,omitempty"`
	Pending      map[string]*PendingPaymentTransaction `protobuf:"bytes,4,rep,name=pending,proto3" json:"pending,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PaymentBalance) Reset() {
	*x = PaymentBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBalance) ProtoMessage() {}

func (x *PaymentBalance) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBalance.ProtoReflect.Descriptor instead.
func (*PaymentBalance) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{29}
}

func (x *PaymentBalance) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PaymentBalance) GetAvailable() *Cash {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *PaymentBalance) GetActual() *Cash {
	if x != nil {
		return x.Actual
	}
	return nil
}

func (x *PaymentBalance) GetPending() map[string]*PendingPaymentTransaction {
	if x != nil {
		return x.Pending
	}
	return nil
}

type PaymentPurseCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurseId string `protobuf:"bytes,1,opt,name=purse_id,json=purseId,proto3" json:"purse_id,omitempty"`
}

func (x *PaymentPurseCounterParty) Reset() {
	*x = PaymentPurseCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentPurseCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentPurseCounterParty) ProtoMessage() {}

func (x *PaymentPurseCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentPurseCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentPurseCounterParty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{30}
}

func (x *PaymentPurseCounterParty) GetPurseId() string {
	if x != nil {
		return x.PurseId
	}
	return ""
}

type PaymentWalletCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	WalletId   string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *PaymentWalletCounterParty) Reset() {
	*x = PaymentWalletCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentWalletCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentWalletCounterParty) ProtoMessage() {}

func (x *PaymentWalletCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentWalletCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentWalletCounterParty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{31}
}

func (x *PaymentWalletCounterParty) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *PaymentWalletCounterParty) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type PaymentCustomerCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber       `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *PaymentChannelNumber `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
}

func (x *PaymentCustomerCounterParty) Reset() {
	*x = PaymentCustomerCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCustomerCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCustomerCounterParty) ProtoMessage() {}

func (x *PaymentCustomerCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCustomerCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentCustomerCounterParty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{32}
}

func (x *PaymentCustomerCounterParty) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PaymentCustomerCounterParty) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

type PaymentCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Party:
	//	*PaymentCounterParty_Customer
	//	*PaymentCounterParty_Purse
	//	*PaymentCounterParty_Wallet
	Party isPaymentCounterParty_Party `protobuf_oneof:"party"`
}

func (x *PaymentCounterParty) Reset() {
	*x = PaymentCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCounterParty) ProtoMessage() {}

func (x *PaymentCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentCounterParty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{33}
}

func (m *PaymentCounterParty) GetParty() isPaymentCounterParty_Party {
	if m != nil {
		return m.Party
	}
	return nil
}

func (x *PaymentCounterParty) GetCustomer() *PaymentCustomerCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Customer); ok {
		return x.Customer
	}
	return nil
}

func (x *PaymentCounterParty) GetPurse() *PaymentPurseCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Purse); ok {
		return x.Purse
	}
	return nil
}

func (x *PaymentCounterParty) GetWallet() *PaymentWalletCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Wallet); ok {
		return x.Wallet
	}
	return nil
}

type isPaymentCounterParty_Party interface {
	isPaymentCounterParty_Party()
}

type PaymentCounterParty_Customer struct {
	Customer *PaymentCustomerCounterParty `protobuf:"bytes,1,opt,name=customer,proto3,oneof"`
}

type PaymentCounterParty_Purse struct {
	Purse *PaymentPurseCounterParty `protobuf:"bytes,2,opt,name=purse,proto3,oneof"`
}

type PaymentCounterParty_Wallet struct {
	Wallet *PaymentWalletCounterParty `protobuf:"bytes,3,opt,name=wallet,proto3,oneof"`
}

func (*PaymentCounterParty_Customer) isPaymentCounterParty_Party() {}

func (*PaymentCounterParty_Purse) isPaymentCounterParty_Party() {}

func (*PaymentCounterParty_Wallet) isPaymentCounterParty_Party() {}

type PaymentWalletTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	AppId         string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Side          PaymentTransactionSide `protobuf:"varint,3,opt,name=side,proto3,enum=com.elarian.hera.proto.PaymentTransactionSide" json:"side,omitempty"`
	CounterParty  *PaymentCounterParty   `protobuf:"bytes,4,opt,name=counter_party,json=counterParty,proto3" json:"counter_party,omitempty"`
	Value         *Cash                  `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Status        PaymentStatus          `protobuf:"varint,6,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
	CreatedAt     *timestamp.Timestamp   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PaymentWalletTransaction) Reset() {
	*x = PaymentWalletTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentWalletTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentWalletTransaction) ProtoMessage() {}

func (x *PaymentWalletTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentWalletTransaction.ProtoReflect.Descriptor instead.
func (*PaymentWalletTransaction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{34}
}

func (x *PaymentWalletTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PaymentWalletTransaction) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *PaymentWalletTransaction) GetSide() PaymentTransactionSide {
	if x != nil {
		return x.Side
	}
	return PaymentTransactionSide_PAYMENT_TRANSACTION_SIDE_UNSPECIFIED
}

func (x *PaymentWalletTransaction) GetCounterParty() *PaymentCounterParty {
	if x != nil {
		return x.CounterParty
	}
	return nil
}

func (x *PaymentWalletTransaction) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PaymentWalletTransaction) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

func (x *PaymentWalletTransaction) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentWalletTransaction) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type PaymentWalletState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance        *PaymentBalance             `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	TransactionLog []*PaymentWalletTransaction `protobuf:"bytes,2,rep,name=transaction_log,json=transactionLog,proto3" json:"transaction_log,omitempty"`
}

func (x *PaymentWalletState) Reset() {
	*x = PaymentWalletState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentWalletState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentWalletState) ProtoMessage() {}

func (x *PaymentWalletState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentWalletState.ProtoReflect.Descriptor instead.
func (*PaymentWalletState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{35}
}

func (x *PaymentWalletState) GetBalance() *PaymentBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *PaymentWalletState) GetTransactionLog() []*PaymentWalletTransaction {
	if x != nil {
		return x.TransactionLog
	}
	return nil
}

type PaymentState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumbers     []*CustomerNumber          `protobuf:"bytes,1,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers      []*PaymentChannelNumber    `protobuf:"bytes,2,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
	TransactionLog      []*PaymentTransactionState `protobuf:"bytes,3,rep,name=transaction_log,json=transactionLog,proto3" json:"transaction_log,omitempty"`
	PendingTransactions []*PaymentTransactionState `protobuf:"bytes,4,rep,name=pending_transactions,json=pendingTransactions,proto3" json:"pending_transactions,omitempty"`
}

func (x *PaymentState) Reset() {
	*x = PaymentState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentState) ProtoMessage() {}

func (x *PaymentState) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentState.ProtoReflect.Descriptor instead.
func (*PaymentState) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{36}
}

func (x *PaymentState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *PaymentState) GetChannelNumbers() []*PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

func (x *PaymentState) GetTransactionLog() []*PaymentTransactionState {
	if x != nil {
		return x.TransactionLog
	}
	return nil
}

func (x *PaymentState) GetPendingTransactions() []*PaymentTransactionState {
	if x != nil {
		return x.PendingTransactions
	}
	return nil
}

type IndexMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *wrappers.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *IndexMapping) Reset() {
	*x = IndexMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexMapping) ProtoMessage() {}

func (x *IndexMapping) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexMapping.ProtoReflect.Descriptor instead.
func (*IndexMapping) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{37}
}

func (x *IndexMapping) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *IndexMapping) GetValue() *wrappers.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type CustomerIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mapping    *IndexMapping        `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
	Expiration *timestamp.Timestamp `protobuf:"bytes,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *CustomerIndex) Reset() {
	*x = CustomerIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerIndex) ProtoMessage() {}

func (x *CustomerIndex) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerIndex.ProtoReflect.Descriptor instead.
func (*CustomerIndex) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{38}
}

func (x *CustomerIndex) GetMapping() *IndexMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *CustomerIndex) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type CustomerReminder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string                `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Key        string                `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Expiration *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Interval   *duration.Duration    `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
	Payload    *wrappers.StringValue `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CustomerReminder) Reset() {
	*x = CustomerReminder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomerReminder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerReminder) ProtoMessage() {}

func (x *CustomerReminder) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerReminder.ProtoReflect.Descriptor instead.
func (*CustomerReminder) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{39}
}

func (x *CustomerReminder) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *CustomerReminder) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CustomerReminder) GetExpiration() *timestamp.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *CustomerReminder) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *CustomerReminder) GetPayload() *wrappers.StringValue {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SayCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Voice    TextToSpeechVoice `protobuf:"varint,2,opt,name=voice,proto3,enum=com.elarian.hera.proto.TextToSpeechVoice" json:"voice,omitempty"`
	PlayBeep bool              `protobuf:"varint,3,opt,name=play_beep,json=playBeep,proto3" json:"play_beep,omitempty"`
}

func (x *SayCallAction) Reset() {
	*x = SayCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SayCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayCallAction) ProtoMessage() {}

func (x *SayCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayCallAction.ProtoReflect.Descriptor instead.
func (*SayCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{40}
}

func (x *SayCallAction) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SayCallAction) GetVoice() TextToSpeechVoice {
	if x != nil {
		return x.Voice
	}
	return TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_UNSPECIFIED
}

func (x *SayCallAction) GetPlayBeep() bool {
	if x != nil {
		return x.PlayBeep
	}
	return false
}

type PlayCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PlayCallAction) Reset() {
	*x = PlayCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCallAction) ProtoMessage() {}

func (x *PlayCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCallAction.ProtoReflect.Descriptor instead.
func (*PlayCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{41}
}

func (x *PlayCallAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetDigitsCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prompt:
	//	*GetDigitsCallAction_Say
	//	*GetDigitsCallAction_Play
	Prompt      isGetDigitsCallAction_Prompt `protobuf_oneof:"prompt"`
	Timeout     *duration.Duration           `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	FinishOnKey *wrappers.StringValue        `protobuf:"bytes,4,opt,name=finish_on_key,json=finishOnKey,proto3" json:"finish_on_key,omitempty"`
	NumDigits   *wrappers.Int32Value         `protobuf:"bytes,5,opt,name=num_digits,json=numDigits,proto3" json:"num_digits,omitempty"`
}

func (x *GetDigitsCallAction) Reset() {
	*x = GetDigitsCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDigitsCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitsCallAction) ProtoMessage() {}

func (x *GetDigitsCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitsCallAction.ProtoReflect.Descriptor instead.
func (*GetDigitsCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{42}
}

func (m *GetDigitsCallAction) GetPrompt() isGetDigitsCallAction_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *GetDigitsCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetPrompt().(*GetDigitsCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *GetDigitsCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetPrompt().(*GetDigitsCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *GetDigitsCallAction) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GetDigitsCallAction) GetFinishOnKey() *wrappers.StringValue {
	if x != nil {
		return x.FinishOnKey
	}
	return nil
}

func (x *GetDigitsCallAction) GetNumDigits() *wrappers.Int32Value {
	if x != nil {
		return x.NumDigits
	}
	return nil
}

type isGetDigitsCallAction_Prompt interface {
	isGetDigitsCallAction_Prompt()
}

type GetDigitsCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type GetDigitsCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

func (*GetDigitsCallAction_Say) isGetDigitsCallAction_Prompt() {}

func (*GetDigitsCallAction_Play) isGetDigitsCallAction_Prompt() {}

type GetRecordingCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prompt:
	//	*GetRecordingCallAction_Say
	//	*GetRecordingCallAction_Play
	Prompt      isGetRecordingCallAction_Prompt `protobuf_oneof:"prompt"`
	Timeout     *duration.Duration              `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MaxLength   *duration.Duration              `protobuf:"bytes,4,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	FinishOnKey *wrappers.StringValue           `protobuf:"bytes,5,opt,name=finish_on_key,json=finishOnKey,proto3" json:"finish_on_key,omitempty"`
	PlayBeep    bool                            `protobuf:"varint,6,opt,name=play_beep,json=playBeep,proto3" json:"play_beep,omitempty"`
	TrimSilence bool                            `protobuf:"varint,7,opt,name=trim_silence,json=trimSilence,proto3" json:"trim_silence,omitempty"`
}

func (x *GetRecordingCallAction) Reset() {
	*x = GetRecordingCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordingCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingCallAction) ProtoMessage() {}

func (x *GetRecordingCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingCallAction.ProtoReflect.Descriptor instead.
func (*GetRecordingCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{43}
}

func (m *GetRecordingCallAction) GetPrompt() isGetRecordingCallAction_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *GetRecordingCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetPrompt().(*GetRecordingCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *GetRecordingCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetPrompt().(*GetRecordingCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *GetRecordingCallAction) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GetRecordingCallAction) GetMaxLength() *duration.Duration {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *GetRecordingCallAction) GetFinishOnKey() *wrappers.StringValue {
	if x != nil {
		return x.FinishOnKey
	}
	return nil
}

func (x *GetRecordingCallAction) GetPlayBeep() bool {
	if x != nil {
		return x.PlayBeep
	}
	return false
}

func (x *GetRecordingCallAction) GetTrimSilence() bool {
	if x != nil {
		return x.TrimSilence
	}
	return false
}

type isGetRecordingCallAction_Prompt interface {
	isGetRecordingCallAction_Prompt()
}

type GetRecordingCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type GetRecordingCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

func (*GetRecordingCallAction_Say) isGetRecordingCallAction_Prompt() {}

func (*GetRecordingCallAction_Play) isGetRecordingCallAction_Prompt() {}

type RecordSessionCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordSessionCallAction) Reset() {
	*x = RecordSessionCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSessionCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSessionCallAction) ProtoMessage() {}

func (x *RecordSessionCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSessionCallAction.ProtoReflect.Descriptor instead.
func (*RecordSessionCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{44}
}

type DialCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumbers []*CustomerNumber     `protobuf:"bytes,1,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	Record          bool                  `protobuf:"varint,2,opt,name=record,proto3" json:"record,omitempty"`
	Sequential      bool                  `protobuf:"varint,3,opt,name=sequential,proto3" json:"sequential,omitempty"`
	RingbackTone    *wrappers.StringValue `protobuf:"bytes,4,opt,name=ringback_tone,json=ringbackTone,proto3" json:"ringback_tone,omitempty"`
	CallerId        *wrappers.StringValue `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	MaxDuration     *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
}

func (x *DialCallAction) Reset() {
	*x = DialCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialCallAction) ProtoMessage() {}

func (x *DialCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialCallAction.ProtoReflect.Descriptor instead.
func (*DialCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{45}
}

func (x *DialCallAction) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *DialCallAction) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *DialCallAction) GetSequential() bool {
	if x != nil {
		return x.Sequential
	}
	return false
}

func (x *DialCallAction) GetRingbackTone() *wrappers.StringValue {
	if x != nil {
		return x.RingbackTone
	}
	return nil
}

func (x *DialCallAction) GetCallerId() *wrappers.StringValue {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *DialCallAction) GetMaxDuration() *wrappers.Int32Value {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

type EnqueueCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldMusic *wrappers.StringValue `protobuf:"bytes,1,opt,name=hold_music,json=holdMusic,proto3" json:"hold_music,omitempty"`
	QueueName *wrappers.StringValue `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
}

func (x *EnqueueCallAction) Reset() {
	*x = EnqueueCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueCallAction) ProtoMessage() {}

func (x *EnqueueCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueCallAction.ProtoReflect.Descriptor instead.
func (*EnqueueCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{46}
}

func (x *EnqueueCallAction) GetHoldMusic() *wrappers.StringValue {
	if x != nil {
		return x.HoldMusic
	}
	return nil
}

func (x *EnqueueCallAction) GetQueueName() *wrappers.StringValue {
	if x != nil {
		return x.QueueName
	}
	return nil
}

type DequeueCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelNumber *VoiceChannelNumber   `protobuf:"bytes,1,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Record        bool                  `protobuf:"varint,2,opt,name=record,proto3" json:"record,omitempty"`
	QueueName     *wrappers.StringValue `protobuf:"bytes,3,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
}

func (x *DequeueCallAction) Reset() {
	*x = DequeueCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueCallAction) ProtoMessage() {}

func (x *DequeueCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueCallAction.ProtoReflect.Descriptor instead.
func (*DequeueCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{47}
}

func (x *DequeueCallAction) GetChannelNumber() *VoiceChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *DequeueCallAction) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *DequeueCallAction) GetQueueName() *wrappers.StringValue {
	if x != nil {
		return x.QueueName
	}
	return nil
}

type RejectCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectCallAction) Reset() {
	*x = RejectCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCallAction) ProtoMessage() {}

func (x *RejectCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCallAction.ProtoReflect.Descriptor instead.
func (*RejectCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{48}
}

type RedirectCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RedirectCallAction) Reset() {
	*x = RedirectCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectCallAction) ProtoMessage() {}

func (x *RedirectCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectCallAction.ProtoReflect.Descriptor instead.
func (*RedirectCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{49}
}

func (x *RedirectCallAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type VoiceCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*VoiceCallAction_Say
	//	*VoiceCallAction_Play
	//	*VoiceCallAction_GetDigits
	//	*VoiceCallAction_Dial
	//	*VoiceCallAction_RecordSession
	//	*VoiceCallAction_GetRecording
	//	*VoiceCallAction_Enqueue
	//	*VoiceCallAction_Dequeue
	//	*VoiceCallAction_Reject
	//	*VoiceCallAction_Redirect
	Entry isVoiceCallAction_Entry `protobuf_oneof:"entry"`
}

func (x *VoiceCallAction) Reset() {
	*x = VoiceCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallAction) ProtoMessage() {}

func (x *VoiceCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallAction.ProtoReflect.Descriptor instead.
func (*VoiceCallAction) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{50}
}

func (m *VoiceCallAction) GetEntry() isVoiceCallAction_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *VoiceCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *VoiceCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *VoiceCallAction) GetGetDigits() *GetDigitsCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_GetDigits); ok {
		return x.GetDigits
	}
	return nil
}

func (x *VoiceCallAction) GetDial() *DialCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Dial); ok {
		return x.Dial
	}
	return nil
}

func (x *VoiceCallAction) GetRecordSession() *RecordSessionCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_RecordSession); ok {
		return x.RecordSession
	}
	return nil
}

func (x *VoiceCallAction) GetGetRecording() *GetRecordingCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_GetRecording); ok {
		return x.GetRecording
	}
	return nil
}

func (x *VoiceCallAction) GetEnqueue() *EnqueueCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Enqueue); ok {
		return x.Enqueue
	}
	return nil
}

func (x *VoiceCallAction) GetDequeue() *DequeueCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Dequeue); ok {
		return x.Dequeue
	}
	return nil
}

func (x *VoiceCallAction) GetReject() *RejectCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *VoiceCallAction) GetRedirect() *RedirectCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Redirect); ok {
		return x.Redirect
	}
	return nil
}

type isVoiceCallAction_Entry interface {
	isVoiceCallAction_Entry()
}

type VoiceCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type VoiceCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

type VoiceCallAction_GetDigits struct {
	GetDigits *GetDigitsCallAction `protobuf:"bytes,3,opt,name=get_digits,json=getDigits,proto3,oneof"`
}

type VoiceCallAction_Dial struct {
	Dial *DialCallAction `protobuf:"bytes,4,opt,name=dial,proto3,oneof"`
}

type VoiceCallAction_RecordSession struct {
	RecordSession *RecordSessionCallAction `protobuf:"bytes,5,opt,name=record_session,json=recordSession,proto3,oneof"`
}

type VoiceCallAction_GetRecording struct {
	GetRecording *GetRecordingCallAction `protobuf:"bytes,6,opt,name=get_recording,json=getRecording,proto3,oneof"`
}

type VoiceCallAction_Enqueue struct {
	Enqueue *EnqueueCallAction `protobuf:"bytes,7,opt,name=enqueue,proto3,oneof"`
}

type VoiceCallAction_Dequeue struct {
	Dequeue *DequeueCallAction `protobuf:"bytes,8,opt,name=dequeue,proto3,oneof"`
}

type VoiceCallAction_Reject struct {
	Reject *RejectCallAction `protobuf:"bytes,9,opt,name=reject,proto3,oneof"`
}

type VoiceCallAction_Redirect struct {
	Redirect *RedirectCallAction `protobuf:"bytes,10,opt,name=redirect,proto3,oneof"`
}

func (*VoiceCallAction_Say) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Play) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_GetDigits) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Dial) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_RecordSession) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_GetRecording) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Enqueue) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Dequeue) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Reject) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Redirect) isVoiceCallAction_Entry() {}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x74, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x11, 0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x70, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x12, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x41, 0x0a, 0x13, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0x4f, 0x0a, 0x13, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x49, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x22, 0x3f, 0x0a, 0x08, 0x55, 0x73, 0x73, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x73, 0x64, 0x48, 0x6f, 0x70, 0x12, 0x32, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x34, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x57, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x1a,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x01,
	0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x02, 0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9e,
	0x06, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x47, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x47, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xdc, 0x02, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x57, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xb9,
	0x03, 0x0a, 0x15, 0x55, 0x73, 0x73, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x48, 0x6f, 0x70, 0x52, 0x04,
	0x68, 0x6f, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x09, 0x55,
	0x73, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x56,
	0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x15, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x64,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x03, 0x0a, 0x11, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x67, 0x75, 0x70,
	0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48,
	0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b, 0x68, 0x61, 0x6e, 0x67,
	0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x74, 0x6d, 0x66, 0x5f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x74, 0x6d, 0x66,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x09, 0x64, 0x69, 0x61,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x64, 0x69, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0xcd,
	0x01, 0x0a, 0x0c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x70, 0x12,
	0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x48, 0x6f, 0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb5,
	0x05, 0x0a, 0x13, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x6f,
	0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0xed, 0x04, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xc6, 0x01, 0x0a, 0x19, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x1a, 0x6d, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x35, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x88, 0x02, 0x0a, 0x13, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x75, 0x72, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x22, 0xd7, 0x03, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x42, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73,
	0x69, 0x64, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x62, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xe6, 0x01, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x36, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x53, 0x61, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x65, 0x70, 0x22, 0x22, 0x0a, 0x0e,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x22, 0xcb, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x79, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f,
	0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x44, 0x69,
	0x67, 0x69, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x8c,
	0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x65, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x65, 0x70,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x6d, 0x53, 0x69, 0x6c, 0x65,
	0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x19, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x44, 0x69, 0x61,
	0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x69, 0x6e,
	0x67, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x61, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x68, 0x6f,
	0x6c, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xec,
	0x05, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a,
	0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x69, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x69, 0x61, 0x6c, 0x12, 0x58, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x07, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12,
	0x45, 0x0a, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2a, 0xd6, 0x01,
	0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
	0x45, 0x5f, 0x52, 0x43, 0x53, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x42, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x53, 0x4d, 0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x47, 0x52, 0x41, 0x4d, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x57, 0x48, 0x41, 0x54,
	0x53, 0x41, 0x50, 0x50, 0x10, 0x05, 0x2a, 0x4c, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x4c,
	0x43, 0x4f, 0x10, 0x01, 0x2a, 0x43, 0x0a, 0x0b, 0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x53, 0x53, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x53, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x10, 0x01, 0x2a, 0x46, 0x0a, 0x0c, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x10,
	0x01, 0x2a, 0xb4, 0x01, 0x0a, 0x16, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x24,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x4c, 0x43, 0x4f, 0x10,
	0x02, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x55,
	0x4d, 0x42, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x45,
	0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44,
	0x45, 0x4f, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x55, 0x41, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x06, 0x2a, 0x8d, 0x01, 0x0a, 0x16,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0xf6, 0x02, 0x0a, 0x16,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x54,
	0x10, 0x65, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x50, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xac, 0x02, 0x12, 0x2f, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0xad, 0x02, 0x12, 0x34, 0x0a, 0x2f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x91, 0x03, 0x12, 0x38, 0x0a, 0x33, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44,
	0x10, 0x92, 0x03, 0x12, 0x2f, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0xf5, 0x03, 0x2a, 0x91, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x64,
	0x12, 0x26, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x4e, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0xc8, 0x01, 0x2a, 0x8f, 0x01, 0x0a, 0x16, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x93, 0x01, 0x0a, 0x15, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x49, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x02,
	0x2a, 0x9f, 0x07, 0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x50, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x21, 0x0a,
	0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xad, 0x02,
	0x12, 0x25, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45,
	0x49, 0x56, 0x45, 0x44, 0x10, 0xae, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x27, 0x0a, 0x22,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x54, 0x10, 0x91, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x92,
	0x03, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x32, 0x0a, 0x2d, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x94, 0x03, 0x12, 0x33, 0x0a, 0x2e, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x95, 0x03,
	0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x96, 0x03, 0x12, 0x38, 0x0a, 0x33,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x44, 0x10, 0x97, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x98, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x99, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x9a, 0x03, 0x12, 0x36, 0x0a, 0x31, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9b, 0x03, 0x12, 0x36, 0x0a, 0x31,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x49,
	0x44, 0x10, 0x9c, 0x03, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x9d, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0xf5, 0x03, 0x2a, 0xc9, 0x05, 0x0a, 0x14, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x13, 0x12, 0x2d, 0x0a,
	0x29, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47,
	0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x42, 0x45, 0x52, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x29, 0x0a, 0x25,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55,
	0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52,
	0x41, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x29, 0x12, 0x2f, 0x0a,
	0x2b, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47,
	0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x3f, 0x12, 0x34,
	0x0a, 0x30, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e,
	0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x10, 0x66, 0x12, 0x2e, 0x0a, 0x29, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x10, 0xe7, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x30, 0x0a, 0x2b,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55,
	0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0xde, 0x04, 0x2a, 0xf6,
	0x05, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47,
	0x10, 0x66, 0x12, 0x1d, 0x0a, 0x18, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xc8,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0xc9,
	0x01, 0x12, 0x25, 0x0a, 0x20, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xca, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x52,
	0x49, 0x44, 0x47, 0x45, 0x44, 0x10, 0xcb, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0xcd, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0xce, 0x01, 0x12, 0x29,
	0x0a, 0x24, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x10, 0x90, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x2b, 0x0a, 0x26,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x92, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x49, 0x44, 0x10, 0x94, 0x03, 0x12, 0x1e, 0x0a,
	0x19, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x95, 0x03, 0x12, 0x28, 0x0a,
	0x23, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0x03, 0x2a, 0xe1, 0x05, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x44, 0x10, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x25, 0x0a,
	0x21, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x68, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53,
	0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10,
	0xca, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcd,
	0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x53,
	0x45, 0x10, 0xce, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57,
	0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0xcf, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0xab, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0xac, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x52,
	0x4f, 0x55, 0x47, 0x48, 0x10, 0xad, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x90, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10,
	0x91, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x92, 0x03, 0x12,
	0x1c, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x1c, 0x0a,
	0x17, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0xf4, 0x03, 0x2a, 0x7b, 0x0a, 0x12, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x8b, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a,
	0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x42, 0x49, 0x54, 0x10, 0x02, 0x2a, 0x79, 0x0a, 0x11, 0x54, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x43, 0x48, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 18)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_common_proto_goTypes = []interface{}{
	(MessagingChannel)(0),               // 0: com.elarian.hera.proto.MessagingChannel
	(PaymentChannel)(0),                 // 1: com.elarian.hera.proto.PaymentChannel
	(UssdChannel)(0),                    // 2: com.elarian.hera.proto.UssdChannel
	(VoiceChannel)(0),                   // 3: com.elarian.hera.proto.VoiceChannel
	(CustomerNumberProvider)(0),         // 4: com.elarian.hera.proto.CustomerNumberProvider
	(MediaType)(0),                      // 5: com.elarian.hera.proto.MediaType
	(MessagingConsentAction)(0),         // 6: com.elarian.hera.proto.MessagingConsentAction
	(MessagingConsentStatus)(0),         // 7: com.elarian.hera.proto.MessagingConsentStatus
	(MessagingSessionStatus)(0),         // 8: com.elarian.hera.proto.MessagingSessionStatus
	(CustomerEventDirection)(0),         // 9: com.elarian.hera.proto.CustomerEventDirection
	(CustomerRequestOrigin)(0),          // 10: com.elarian.hera.proto.CustomerRequestOrigin
	(MessageDeliveryStatus)(0),          // 11: com.elarian.hera.proto.MessageDeliveryStatus
	(VoiceCallHangupCause)(0),           // 12: com.elarian.hera.proto.VoiceCallHangupCause
	(VoiceCallStatus)(0),                // 13: com.elarian.hera.proto.VoiceCallStatus
	(PaymentStatus)(0),                  // 14: com.elarian.hera.proto.PaymentStatus
	(PaymentAccountType)(0),             // 15: com.elarian.hera.proto.PaymentAccountType
	(PaymentTransactionSide)(0),         // 16: com.elarian.hera.proto.PaymentTransactionSide
	(TextToSpeechVoice)(0),              // 17: com.elarian.hera.proto.TextToSpeechVoice
	(*Cash)(nil),                        // 18: com.elarian.hera.proto.Cash
	(*CustomerNumber)(nil),              // 19: com.elarian.hera.proto.CustomerNumber
	(*MessagingChannelNumber)(nil),      // 20: com.elarian.hera.proto.MessagingChannelNumber
	(*UssdChannelNumber)(nil),           // 21: com.elarian.hera.proto.UssdChannelNumber
	(*PaymentChannelNumber)(nil),        // 22: com.elarian.hera.proto.PaymentChannelNumber
	(*VoiceChannelNumber)(nil),          // 23: com.elarian.hera.proto.VoiceChannelNumber
	(*TextMessageTemplate)(nil),         // 24: com.elarian.hera.proto.TextMessageTemplate
	(*TextMessageBody)(nil),             // 25: com.elarian.hera.proto.TextMessageBody
	(*MediaMessageBody)(nil),            // 26: com.elarian.hera.proto.MediaMessageBody
	(*LocationMessageBody)(nil),         // 27: com.elarian.hera.proto.LocationMessageBody
	(*CustomerMessageBody)(nil),         // 28: com.elarian.hera.proto.CustomerMessageBody
	(*UssdMenu)(nil),                    // 29: com.elarian.hera.proto.UssdMenu
	(*UssdHop)(nil),                     // 30: com.elarian.hera.proto.UssdHop
	(*DataMapValue)(nil),                // 31: com.elarian.hera.proto.DataMapValue
	(*MessagingConsentStateEntry)(nil),  // 32: com.elarian.hera.proto.MessagingConsentStateEntry
	(*MessagingSessionStateEntry)(nil),  // 33: com.elarian.hera.proto.MessagingSessionStateEntry
	(*MessagingChannelStateEntry)(nil),  // 34: com.elarian.hera.proto.MessagingChannelStateEntry
	(*MessageStateEntry)(nil),           // 35: com.elarian.hera.proto.MessageStateEntry
	(*MessagingState)(nil),              // 36: com.elarian.hera.proto.MessagingState
	(*UssdSessionStateEntry)(nil),       // 37: com.elarian.hera.proto.UssdSessionStateEntry
	(*UssdState)(nil),                   // 38: com.elarian.hera.proto.UssdState
	(*VoiceCallDialInput)(nil),          // 39: com.elarian.hera.proto.VoiceCallDialInput
	(*VoiceCallQueueInput)(nil),         // 40: com.elarian.hera.proto.VoiceCallQueueInput
	(*VoiceCallHopInput)(nil),           // 41: com.elarian.hera.proto.VoiceCallHopInput
	(*VoiceCallHop)(nil),                // 42: com.elarian.hera.proto.VoiceCallHop
	(*VoiceCallStateEntry)(nil),         // 43: com.elarian.hera.proto.VoiceCallStateEntry
	(*VoiceState)(nil),                  // 44: com.elarian.hera.proto.VoiceState
	(*PaymentTransactionState)(nil),     // 45: com.elarian.hera.proto.PaymentTransactionState
	(*PendingPaymentTransaction)(nil),   // 46: com.elarian.hera.proto.PendingPaymentTransaction
	(*PaymentBalance)(nil),              // 47: com.elarian.hera.proto.PaymentBalance
	(*PaymentPurseCounterParty)(nil),    // 48: com.elarian.hera.proto.PaymentPurseCounterParty
	(*PaymentWalletCounterParty)(nil),   // 49: com.elarian.hera.proto.PaymentWalletCounterParty
	(*PaymentCustomerCounterParty)(nil), // 50: com.elarian.hera.proto.PaymentCustomerCounterParty
	(*PaymentCounterParty)(nil),         // 51: com.elarian.hera.proto.PaymentCounterParty
	(*PaymentWalletTransaction)(nil),    // 52: com.elarian.hera.proto.PaymentWalletTransaction
	(*PaymentWalletState)(nil),          // 53: com.elarian.hera.proto.PaymentWalletState
	(*PaymentState)(nil),                // 54: com.elarian.hera.proto.PaymentState
	(*IndexMapping)(nil),                // 55: com.elarian.hera.proto.IndexMapping
	(*CustomerIndex)(nil),               // 56: com.elarian.hera.proto.CustomerIndex
	(*CustomerReminder)(nil),            // 57: com.elarian.hera.proto.CustomerReminder
	(*SayCallAction)(nil),               // 58: com.elarian.hera.proto.SayCallAction
	(*PlayCallAction)(nil),              // 59: com.elarian.hera.proto.PlayCallAction
	(*GetDigitsCallAction)(nil),         // 60: com.elarian.hera.proto.GetDigitsCallAction
	(*GetRecordingCallAction)(nil),      // 61: com.elarian.hera.proto.GetRecordingCallAction
	(*RecordSessionCallAction)(nil),     // 62: com.elarian.hera.proto.RecordSessionCallAction
	(*DialCallAction)(nil),              // 63: com.elarian.hera.proto.DialCallAction
	(*EnqueueCallAction)(nil),           // 64: com.elarian.hera.proto.EnqueueCallAction
	(*DequeueCallAction)(nil),           // 65: com.elarian.hera.proto.DequeueCallAction
	(*RejectCallAction)(nil),            // 66: com.elarian.hera.proto.RejectCallAction
	(*RedirectCallAction)(nil),          // 67: com.elarian.hera.proto.RedirectCallAction
	(*VoiceCallAction)(nil),             // 68: com.elarian.hera.proto.VoiceCallAction
	nil,                                 // 69: com.elarian.hera.proto.PaymentBalance.PendingEntry
	(*wrappers.StringValue)(nil),        // 70: google.protobuf.StringValue
	(*timestamp.Timestamp)(nil),         // 71: google.protobuf.Timestamp
	(*duration.Duration)(nil),           // 72: google.protobuf.Duration
	(*wrappers.Int32Value)(nil),         // 73: google.protobuf.Int32Value
}
var file_common_proto_depIdxs = []int32{
	4,   // 0: com.elarian.hera.proto.CustomerNumber.provider:type_name -> com.elarian.hera.proto.CustomerNumberProvider
	70,  // 1: com.elarian.hera.proto.CustomerNumber.partition:type_name -> google.protobuf.StringValue
	0,   // 2: com.elarian.hera.proto.MessagingChannelNumber.channel:type_name -> com.elarian.hera.proto.MessagingChannel
	2,   // 3: com.elarian.hera.proto.UssdChannelNumber.channel:type_name -> com.elarian.hera.proto.UssdChannel
	1,   // 4: com.elarian.hera.proto.PaymentChannelNumber.channel:type_name -> com.elarian.hera.proto.PaymentChannel
	3,   // 5: com.elarian.hera.proto.VoiceChannelNumber.channel:type_name -> com.elarian.hera.proto.VoiceChannel
	70,  // 6: com.elarian.hera.proto.TextMessageBody.text:type_name -> google.protobuf.StringValue
	24,  // 7: com.elarian.hera.proto.TextMessageBody.template:type_name -> com.elarian.hera.proto.TextMessageTemplate
	5,   // 8: com.elarian.hera.proto.MediaMessageBody.media:type_name -> com.elarian.hera.proto.MediaType
	25,  // 9: com.elarian.hera.proto.CustomerMessageBody.text:type_name -> com.elarian.hera.proto.TextMessageBody
	26,  // 10: com.elarian.hera.proto.CustomerMessageBody.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	27,  // 11: com.elarian.hera.proto.CustomerMessageBody.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	70,  // 12: com.elarian.hera.proto.UssdHop.input:type_name -> google.protobuf.StringValue
	29,  // 13: com.elarian.hera.proto.UssdHop.menu:type_name -> com.elarian.hera.proto.UssdMenu
	71,  // 14: com.elarian.hera.proto.UssdHop.created_at:type_name -> google.protobuf.Timestamp
	7,   // 15: com.elarian.hera.proto.MessagingConsentStateEntry.status:type_name -> com.elarian.hera.proto.MessagingConsentStatus
	71,  // 16: com.elarian.hera.proto.MessagingConsentStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	71,  // 17: com.elarian.hera.proto.MessagingSessionStateEntry.started_at:type_name -> google.protobuf.Timestamp
	71,  // 18: com.elarian.hera.proto.MessagingSessionStateEntry.expiration:type_name -> google.protobuf.Timestamp
	19,  // 19: com.elarian.hera.proto.MessagingChannelStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	20,  // 20: com.elarian.hera.proto.MessagingChannelStateEntry.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	32,  // 21: com.elarian.hera.proto.MessagingChannelStateEntry.consent_state:type_name -> com.elarian.hera.proto.MessagingConsentStateEntry
	33,  // 22: com.elarian.hera.proto.MessagingChannelStateEntry.active_session:type_name -> com.elarian.hera.proto.MessagingSessionStateEntry
	9,   // 23: com.elarian.hera.proto.MessageStateEntry.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	19,  // 24: com.elarian.hera.proto.MessageStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	20,  // 25: com.elarian.hera.proto.MessageStateEntry.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	70,  // 26: com.elarian.hera.proto.MessageStateEntry.app_id:type_name -> google.protobuf.StringValue
	70,  // 27: com.elarian.hera.proto.MessageStateEntry.text:type_name -> google.protobuf.StringValue
	24,  // 28: com.elarian.hera.proto.MessageStateEntry.template:type_name -> com.elarian.hera.proto.TextMessageTemplate
	26,  // 29: com.elarian.hera.proto.MessageStateEntry.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	27,  // 30: com.elarian.hera.proto.MessageStateEntry.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	71,  // 31: com.elarian.hera.proto.MessageStateEntry.created_at:type_name -> google.protobuf.Timestamp
	71,  // 32: com.elarian.hera.proto.MessageStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	11,  // 33: com.elarian.hera.proto.MessageStateEntry.status:type_name -> com.elarian.hera.proto.MessageDeliveryStatus
	34,  // 34: com.elarian.hera.proto.MessagingState.channel_state:type_name -> com.elarian.hera.proto.MessagingChannelStateEntry
	35,  // 35: com.elarian.hera.proto.MessagingState.messages:type_name -> com.elarian.hera.proto.MessageStateEntry
	19,  // 36: com.elarian.hera.proto.MessagingState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	20,  // 37: com.elarian.hera.proto.MessagingState.channel_numbers:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	19,  // 38: com.elarian.hera.proto.UssdSessionStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	21,  // 39: com.elarian.hera.proto.UssdSessionStateEntry.channel_number:type_name -> com.elarian.hera.proto.UssdChannelNumber
	70,  // 40: com.elarian.hera.proto.UssdSessionStateEntry.app_id:type_name -> google.protobuf.StringValue
	30,  // 41: com.elarian.hera.proto.UssdSessionStateEntry.hops:type_name -> com.elarian.hera.proto.UssdHop
	71,  // 42: com.elarian.hera.proto.UssdSessionStateEntry.created_at:type_name -> google.protobuf.Timestamp
	71,  // 43: com.elarian.hera.proto.UssdSessionStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	37,  // 44: com.elarian.hera.proto.UssdState.sessions:type_name -> com.elarian.hera.proto.UssdSessionStateEntry
	19,  // 45: com.elarian.hera.proto.UssdState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	21,  // 46: com.elarian.hera.proto.UssdState.channel_numbers:type_name -> com.elarian.hera.proto.UssdChannelNumber
	71,  // 47: com.elarian.hera.proto.VoiceCallDialInput.started_at:type_name -> google.protobuf.Timestamp
	72,  // 48: com.elarian.hera.proto.VoiceCallDialInput.duration:type_name -> google.protobuf.Duration
	71,  // 49: com.elarian.hera.proto.VoiceCallQueueInput.enqueued_at:type_name -> google.protobuf.Timestamp
	71,  // 50: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_at:type_name -> google.protobuf.Timestamp
	70,  // 51: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_to_number:type_name -> google.protobuf.StringValue
	70,  // 52: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_to_sessionId:type_name -> google.protobuf.StringValue
	72,  // 53: com.elarian.hera.proto.VoiceCallQueueInput.queue_duration:type_name -> google.protobuf.Duration
	13,  // 54: com.elarian.hera.proto.VoiceCallHopInput.status:type_name -> com.elarian.hera.proto.VoiceCallStatus
	71,  // 55: com.elarian.hera.proto.VoiceCallHopInput.started_at:type_name -> google.protobuf.Timestamp
	12,  // 56: com.elarian.hera.proto.VoiceCallHopInput.hangup_cause:type_name -> com.elarian.hera.proto.VoiceCallHangupCause
	70,  // 57: com.elarian.hera.proto.VoiceCallHopInput.dtmf_digits:type_name -> google.protobuf.StringValue
	70,  // 58: com.elarian.hera.proto.VoiceCallHopInput.recording_url:type_name -> google.protobuf.StringValue
	39,  // 59: com.elarian.hera.proto.VoiceCallHopInput.dial_data:type_name -> com.elarian.hera.proto.VoiceCallDialInput
	40,  // 60: com.elarian.hera.proto.VoiceCallHopInput.queue_data:type_name -> com.elarian.hera.proto.VoiceCallQueueInput
	41,  // 61: com.elarian.hera.proto.VoiceCallHop.input:type_name -> com.elarian.hera.proto.VoiceCallHopInput
	68,  // 62: com.elarian.hera.proto.VoiceCallHop.actions:type_name -> com.elarian.hera.proto.VoiceCallAction
	71,  // 63: com.elarian.hera.proto.VoiceCallHop.created_at:type_name -> google.protobuf.Timestamp
	9,   // 64: com.elarian.hera.proto.VoiceCallStateEntry.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	19,  // 65: com.elarian.hera.proto.VoiceCallStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	23,  // 66: com.elarian.hera.proto.VoiceCallStateEntry.channel_number:type_name -> com.elarian.hera.proto.VoiceChannelNumber
	70,  // 67: com.elarian.hera.proto.VoiceCallStateEntry.app_id:type_name -> google.protobuf.StringValue
	13,  // 68: com.elarian.hera.proto.VoiceCallStateEntry.status:type_name -> com.elarian.hera.proto.VoiceCallStatus
	42,  // 69: com.elarian.hera.proto.VoiceCallStateEntry.hops:type_name -> com.elarian.hera.proto.VoiceCallHop
	72,  // 70: com.elarian.hera.proto.VoiceCallStateEntry.duration:type_name -> google.protobuf.Duration
	18,  // 71: com.elarian.hera.proto.VoiceCallStateEntry.cost:type_name -> com.elarian.hera.proto.Cash
	71,  // 72: com.elarian.hera.proto.VoiceCallStateEntry.created_at:type_name -> google.protobuf.Timestamp
	71,  // 73: com.elarian.hera.proto.VoiceCallStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	43,  // 74: com.elarian.hera.proto.VoiceState.calls:type_name -> com.elarian.hera.proto.VoiceCallStateEntry
	19,  // 75: com.elarian.hera.proto.VoiceState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	23,  // 76: com.elarian.hera.proto.VoiceState.channel_numbers:type_name -> com.elarian.hera.proto.VoiceChannelNumber
	9,   // 77: com.elarian.hera.proto.PaymentTransactionState.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	19,  // 78: com.elarian.hera.proto.PaymentTransactionState.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	22,  // 79: com.elarian.hera.proto.PaymentTransactionState.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	70,  // 80: com.elarian.hera.proto.PaymentTransactionState.app_id:type_name -> google.protobuf.StringValue
	18,  // 81: com.elarian.hera.proto.PaymentTransactionState.value:type_name -> com.elarian.hera.proto.Cash
	71,  // 82: com.elarian.hera.proto.PaymentTransactionState.created_at:type_name -> google.protobuf.Timestamp
	71,  // 83: com.elarian.hera.proto.PaymentTransactionState.updated_at:type_name -> google.protobuf.Timestamp
	14,  // 84: com.elarian.hera.proto.PaymentTransactionState.status:type_name -> com.elarian.hera.proto.PaymentStatus
	71,  // 85: com.elarian.hera.proto.PendingPaymentTransaction.created_at:type_name -> google.protobuf.Timestamp
	18,  // 86: com.elarian.hera.proto.PendingPaymentTransaction.value:type_name -> com.elarian.hera.proto.Cash
	18,  // 87: com.elarian.hera.proto.PendingPaymentTransaction.converted:type_name -> com.elarian.hera.proto.Cash
	18,  // 88: com.elarian.hera.proto.PaymentBalance.available:type_name -> com.elarian.hera.proto.Cash
	18,  // 89: com.elarian.hera.proto.PaymentBalance.actual:type_name -> com.elarian.hera.proto.Cash
	69,  // 90: com.elarian.hera.proto.PaymentBalance.pending:type_name -> com.elarian.hera.proto.PaymentBalance.PendingEntry
	19,  // 91: com.elarian.hera.proto.PaymentCustomerCounterParty.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	22,  // 92: com.elarian.hera.proto.PaymentCustomerCounterParty.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	50,  // 93: com.elarian.hera.proto.PaymentCounterParty.customer:type_name -> com.elarian.hera.proto.PaymentCustomerCounterParty
	48,  // 94: com.elarian.hera.proto.PaymentCounterParty.purse:type_name -> com.elarian.hera.proto.PaymentPurseCounterParty
	49,  // 95: com.elarian.hera.proto.PaymentCounterParty.wallet:type_name -> com.elarian.hera.proto.PaymentWalletCounterParty
	16,  // 96: com.elarian.hera.proto.PaymentWalletTransaction.side:type_name -> com.elarian.hera.proto.PaymentTransactionSide
	51,  // 97: com.elarian.hera.proto.PaymentWalletTransaction.counter_party:type_name -> com.elarian.hera.proto.PaymentCounterParty
	18,  // 98: com.elarian.hera.proto.PaymentWalletTransaction.value:type_name -> com.elarian.hera.proto.Cash
	14,  // 99: com.elarian.hera.proto.PaymentWalletTransaction.status:type_name -> com.elarian.hera.proto.PaymentStatus
	71,  // 100: com.elarian.hera.proto.PaymentWalletTransaction.created_at:type_name -> google.protobuf.Timestamp
	71,  // 101: com.elarian.hera.proto.PaymentWalletTransaction.updated_at:type_name -> google.protobuf.Timestamp
	47,  // 102: com.elarian.hera.proto.PaymentWalletState.balance:type_name -> com.elarian.hera.proto.PaymentBalance
	52,  // 103: com.elarian.hera.proto.PaymentWalletState.transaction_log:type_name -> com.elarian.hera.proto.PaymentWalletTransaction
	19,  // 104: com.elarian.hera.proto.PaymentState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	22,  // 105: com.elarian.hera.proto.PaymentState.channel_numbers:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	45,  // 106: com.elarian.hera.proto.PaymentState.transaction_log:type_name -> com.elarian.hera.proto.PaymentTransactionState
	45,  // 107: com.elarian.hera.proto.PaymentState.pending_transactions:type_name -> com.elarian.hera.proto.PaymentTransactionState
	70,  // 108: com.elarian.hera.proto.IndexMapping.value:type_name -> google.protobuf.StringValue
	55,  // 109: com.elarian.hera.proto.CustomerIndex.mapping:type_name -> com.elarian.hera.proto.IndexMapping
	71,  // 110: com.elarian.hera.proto.CustomerIndex.expiration:type_name -> google.protobuf.Timestamp
	71,  // 111: com.elarian.hera.proto.CustomerReminder.expiration:type_name -> google.protobuf.Timestamp
	72,  // 112: com.elarian.hera.proto.CustomerReminder.interval:type_name -> google.protobuf.Duration
	70,  // 113: com.elarian.hera.proto.CustomerReminder.payload:type_name -> google.protobuf.StringValue
	17,  // 114: com.elarian.hera.proto.SayCallAction.voice:type_name -> com.elarian.hera.proto.TextToSpeechVoice
	58,  // 115: com.elarian.hera.proto.GetDigitsCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	59,  // 116: com.elarian.hera.proto.GetDigitsCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	72,  // 117: com.elarian.hera.proto.GetDigitsCallAction.timeout:type_name -> google.protobuf.Duration
	70,  // 118: com.elarian.hera.proto.GetDigitsCallAction.finish_on_key:type_name -> google.protobuf.StringValue
	73,  // 119: com.elarian.hera.proto.GetDigitsCallAction.num_digits:type_name -> google.protobuf.Int32Value
	58,  // 120: com.elarian.hera.proto.GetRecordingCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	59,  // 121: com.elarian.hera.proto.GetRecordingCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	72,  // 122: com.elarian.hera.proto.GetRecordingCallAction.timeout:type_name -> google.protobuf.Duration
	72,  // 123: com.elarian.hera.proto.GetRecordingCallAction.max_length:type_name -> google.protobuf.Duration
	70,  // 124: com.elarian.hera.proto.GetRecordingCallAction.finish_on_key:type_name -> google.protobuf.StringValue
	19,  // 125: com.elarian.hera.proto.DialCallAction.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	70,  // 126: com.elarian.hera.proto.DialCallAction.ringback_tone:type_name -> google.protobuf.StringValue
	70,  // 127: com.elarian.hera.proto.DialCallAction.caller_id:type_name -> google.protobuf.StringValue
	73,  // 128: com.elarian.hera.proto.DialCallAction.max_duration:type_name -> google.protobuf.Int32Value
	70,  // 129: com.elarian.hera.proto.EnqueueCallAction.hold_music:type_name -> google.protobuf.StringValue
	70,  // 130: com.elarian.hera.proto.EnqueueCallAction.queue_name:type_name -> google.protobuf.StringValue
	23,  // 131: com.elarian.hera.proto.DequeueCallAction.channel_number:type_name -> com.elarian.hera.proto.VoiceChannelNumber
	70,  // 132: com.elarian.hera.proto.DequeueCallAction.queue_name:type_name -> google.protobuf.StringValue
	58,  // 133: com.elarian.hera.proto.VoiceCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	59,  // 134: com.elarian.hera.proto.VoiceCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	60,  // 135: com.elarian.hera.proto.VoiceCallAction.get_digits:type_name -> com.elarian.hera.proto.GetDigitsCallAction
	63,  // 136: com.elarian.hera.proto.VoiceCallAction.dial:type_name -> com.elarian.hera.proto.DialCallAction
	62,  // 137: com.elarian.hera.proto.VoiceCallAction.record_session:type_name -> com.elarian.hera.proto.RecordSessionCallAction
	61,  // 138: com.elarian.hera.proto.VoiceCallAction.get_recording:type_name -> com.elarian.hera.proto.GetRecordingCallAction
	64,  // 139: com.elarian.hera.proto.VoiceCallAction.enqueue:type_name -> com.elarian.hera.proto.EnqueueCallAction
	65,  // 140: com.elarian.hera.proto.VoiceCallAction.dequeue:type_name -> com.elarian.hera.proto.DequeueCallAction
	66,  // 141: com.elarian.hera.proto.VoiceCallAction.reject:type_name -> com.elarian.hera.proto.RejectCallAction
	67,  // 142: com.elarian.hera.proto.VoiceCallAction.redirect:type_name -> com.elarian.hera.proto.RedirectCallAction
	46,  // 143: com.elarian.hera.proto.PaymentBalance.PendingEntry.value:type_name -> com.elarian.hera.proto.PendingPaymentTransaction
	144, // [144:144] is the sub-list for method output_type
	144, // [144:144] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessageTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdMenu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataMapValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingConsentStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingSessionStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingChannelStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdSessionStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallDialInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallQueueInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallHopInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentTransactionState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingPaymentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentPurseCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentWalletCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCustomerCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentWalletTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentWalletState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomerReminder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SayCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDigitsCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordingCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSessionCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CustomerMessageBody_Text)(nil),
		(*CustomerMessageBody_Media)(nil),
		(*CustomerMessageBody_Location)(nil),
	}
	file_common_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DataMapValue_StringVal)(nil),
		(*DataMapValue_BytesVal)(nil),
	}
	file_common_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*PaymentCounterParty_Customer)(nil),
		(*PaymentCounterParty_Purse)(nil),
		(*PaymentCounterParty_Wallet)(nil),
	}
	file_common_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*GetDigitsCallAction_Say)(nil),
		(*GetDigitsCallAction_Play)(nil),
	}
	file_common_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*GetRecordingCallAction_Say)(nil),
		(*GetRecordingCallAction_Play)(nil),
	}
	file_common_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*VoiceCallAction_Say)(nil),
		(*VoiceCallAction_Play)(nil),
		(*VoiceCallAction_GetDigits)(nil),
		(*VoiceCallAction_Dial)(nil),
		(*VoiceCallAction_RecordSession)(nil),
		(*VoiceCallAction_GetRecording)(nil),
		(*VoiceCallAction_Enqueue)(nil),
		(*VoiceCallAction_Dequeue)(nil),
		(*VoiceCallAction_Reject)(nil),
		(*VoiceCallAction_Redirect)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      18,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
