// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: ussd.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UssdSessionStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber       `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *UssdChannelNumber    `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	SessionId      string                `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	AppId          *wrappers.StringValue `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Hops           []*UssdHop            `protobuf:"bytes,5,rep,name=hops,proto3" json:"hops,omitempty"`
	CreatedAt      *timestamp.Timestamp  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamp.Timestamp  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *UssdSessionStateEntry) Reset() {
	*x = UssdSessionStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdSessionStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdSessionStateEntry) ProtoMessage() {}

func (x *UssdSessionStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdSessionStateEntry.ProtoReflect.Descriptor instead.
func (*UssdSessionStateEntry) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{0}
}

func (x *UssdSessionStateEntry) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *UssdSessionStateEntry) GetChannelNumber() *UssdChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *UssdSessionStateEntry) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UssdSessionStateEntry) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *UssdSessionStateEntry) GetHops() []*UssdHop {
	if x != nil {
		return x.Hops
	}
	return nil
}

func (x *UssdSessionStateEntry) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UssdSessionStateEntry) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UssdState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions        []*UssdSessionStateEntry `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
	CustomerNumbers []*CustomerNumber        `protobuf:"bytes,2,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	ChannelNumbers  []*UssdChannelNumber     `protobuf:"bytes,3,rep,name=channel_numbers,json=channelNumbers,proto3" json:"channel_numbers,omitempty"`
}

func (x *UssdState) Reset() {
	*x = UssdState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdState) ProtoMessage() {}

func (x *UssdState) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdState.ProtoReflect.Descriptor instead.
func (*UssdState) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{1}
}

func (x *UssdState) GetSessions() []*UssdSessionStateEntry {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *UssdState) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *UssdState) GetChannelNumbers() []*UssdChannelNumber {
	if x != nil {
		return x.ChannelNumbers
	}
	return nil
}

type UssdEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*UssdEvent_StateAdopted
	//	*UssdEvent_EntityDecommissioned
	//	*UssdEvent_UssdHopCompleted
	Event isUssdEvent_Event `protobuf_oneof:"event"`
}

func (x *UssdEvent) Reset() {
	*x = UssdEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdEvent) ProtoMessage() {}

func (x *UssdEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdEvent.ProtoReflect.Descriptor instead.
func (*UssdEvent) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{2}
}

func (m *UssdEvent) GetEvent() isUssdEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *UssdEvent) GetStateAdopted() *UssdStateAdoptedEvent {
	if x, ok := x.GetEvent().(*UssdEvent_StateAdopted); ok {
		return x.StateAdopted
	}
	return nil
}

func (x *UssdEvent) GetEntityDecommissioned() *UssdEntityDecommissionedEvent {
	if x, ok := x.GetEvent().(*UssdEvent_EntityDecommissioned); ok {
		return x.EntityDecommissioned
	}
	return nil
}

func (x *UssdEvent) GetUssdHopCompleted() *UssdHopCompletedEvent {
	if x, ok := x.GetEvent().(*UssdEvent_UssdHopCompleted); ok {
		return x.UssdHopCompleted
	}
	return nil
}

type isUssdEvent_Event interface {
	isUssdEvent_Event()
}

type UssdEvent_StateAdopted struct {
	StateAdopted *UssdStateAdoptedEvent `protobuf:"bytes,1,opt,name=state_adopted,json=stateAdopted,proto3,oneof"`
}

type UssdEvent_EntityDecommissioned struct {
	EntityDecommissioned *UssdEntityDecommissionedEvent `protobuf:"bytes,2,opt,name=entity_decommissioned,json=entityDecommissioned,proto3,oneof"`
}

type UssdEvent_UssdHopCompleted struct {
	UssdHopCompleted *UssdHopCompletedEvent `protobuf:"bytes,3,opt,name=ussd_hop_completed,json=ussdHopCompleted,proto3,oneof"`
}

func (*UssdEvent_StateAdopted) isUssdEvent_Event() {}

func (*UssdEvent_EntityDecommissioned) isUssdEvent_Event() {}

func (*UssdEvent_UssdHopCompleted) isUssdEvent_Event() {}

type UssdStateAdoptedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId           string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId      string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders      *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	OtherCustomerId string               `protobuf:"bytes,5,opt,name=other_customer_id,json=otherCustomerId,proto3" json:"other_customer_id,omitempty"`
	OtherUssdState  *UssdState           `protobuf:"bytes,6,opt,name=other_ussd_state,json=otherUssdState,proto3" json:"other_ussd_state,omitempty"`
}

func (x *UssdStateAdoptedEvent) Reset() {
	*x = UssdStateAdoptedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdStateAdoptedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdStateAdoptedEvent) ProtoMessage() {}

func (x *UssdStateAdoptedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdStateAdoptedEvent.ProtoReflect.Descriptor instead.
func (*UssdStateAdoptedEvent) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{3}
}

func (x *UssdStateAdoptedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UssdStateAdoptedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UssdStateAdoptedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UssdStateAdoptedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *UssdStateAdoptedEvent) GetOtherCustomerId() string {
	if x != nil {
		return x.OtherCustomerId
	}
	return ""
}

func (x *UssdStateAdoptedEvent) GetOtherUssdState() *UssdState {
	if x != nil {
		return x.OtherUssdState
	}
	return nil
}

type UssdEntityDecommissionedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId         string               `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId    string               `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppHeaders    *AppHeaders          `protobuf:"bytes,4,opt,name=app_headers,json=appHeaders,proto3" json:"app_headers,omitempty"`
	NewCustomerId string               `protobuf:"bytes,5,opt,name=new_customer_id,json=newCustomerId,proto3" json:"new_customer_id,omitempty"`
}

func (x *UssdEntityDecommissionedEvent) Reset() {
	*x = UssdEntityDecommissionedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdEntityDecommissionedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdEntityDecommissionedEvent) ProtoMessage() {}

func (x *UssdEntityDecommissionedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdEntityDecommissionedEvent.ProtoReflect.Descriptor instead.
func (*UssdEntityDecommissionedEvent) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{4}
}

func (x *UssdEntityDecommissionedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UssdEntityDecommissionedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UssdEntityDecommissionedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UssdEntityDecommissionedEvent) GetAppHeaders() *AppHeaders {
	if x != nil {
		return x.AppHeaders
	}
	return nil
}

func (x *UssdEntityDecommissionedEvent) GetNewCustomerId() string {
	if x != nil {
		return x.NewCustomerId
	}
	return ""
}

type UssdHopCompletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId          string                `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	CustomerId     string                `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	Timestamp      *timestamp.Timestamp  `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AppId          *wrappers.StringValue `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	SessionId      string                `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	CustomerNumber *CustomerNumber       `protobuf:"bytes,6,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *UssdChannelNumber    `protobuf:"bytes,7,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Hop            *UssdHop              `protobuf:"bytes,8,opt,name=hop,proto3" json:"hop,omitempty"`
}

func (x *UssdHopCompletedEvent) Reset() {
	*x = UssdHopCompletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ussd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdHopCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdHopCompletedEvent) ProtoMessage() {}

func (x *UssdHopCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ussd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdHopCompletedEvent.ProtoReflect.Descriptor instead.
func (*UssdHopCompletedEvent) Descriptor() ([]byte, []int) {
	return file_ussd_proto_rawDescGZIP(), []int{5}
}

func (x *UssdHopCompletedEvent) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *UssdHopCompletedEvent) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *UssdHopCompletedEvent) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UssdHopCompletedEvent) GetAppId() *wrappers.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *UssdHopCompletedEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *UssdHopCompletedEvent) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *UssdHopCompletedEvent) GetChannelNumber() *UssdChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *UssdHopCompletedEvent) GetHop() *UssdHop {
	if x != nil {
		return x.Hop
	}
	return nil
}

var File_ussd_proto protoreflect.FileDescriptor

var file_ussd_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x75, 0x73, 0x73, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x03, 0x0a, 0x15, 0x55, 0x73, 0x73, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x4f, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64,
	0x48, 0x6f, 0x70, 0x52, 0x04, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xfd, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x73, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22,
	0xb7, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x73, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x54, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x6c, 0x0a, 0x15, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65,
	0x64, 0x12, 0x5d, 0x0a, 0x12, 0x75, 0x73, 0x73, 0x64, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x48, 0x6f, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x75, 0x73, 0x73, 0x64, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x15, 0x55, 0x73,
	0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6f, 0x70, 0x74, 0x65, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x73, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73, 0x73, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x73, 0x64, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x77, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xb3, 0x03, 0x0a, 0x15, 0x55, 0x73, 0x73, 0x64, 0x48, 0x6f, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x73, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x68, 0x6f, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x73, 0x64, 0x48, 0x6f, 0x70, 0x52, 0x03, 0x68, 0x6f, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ussd_proto_rawDescOnce sync.Once
	file_ussd_proto_rawDescData = file_ussd_proto_rawDesc
)

func file_ussd_proto_rawDescGZIP() []byte {
	file_ussd_proto_rawDescOnce.Do(func() {
		file_ussd_proto_rawDescData = protoimpl.X.CompressGZIP(file_ussd_proto_rawDescData)
	})
	return file_ussd_proto_rawDescData
}

var file_ussd_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_ussd_proto_goTypes = []interface{}{
	(*UssdSessionStateEntry)(nil),         // 0: com.elarian.hera.proto.UssdSessionStateEntry
	(*UssdState)(nil),                     // 1: com.elarian.hera.proto.UssdState
	(*UssdEvent)(nil),                     // 2: com.elarian.hera.proto.UssdEvent
	(*UssdStateAdoptedEvent)(nil),         // 3: com.elarian.hera.proto.UssdStateAdoptedEvent
	(*UssdEntityDecommissionedEvent)(nil), // 4: com.elarian.hera.proto.UssdEntityDecommissionedEvent
	(*UssdHopCompletedEvent)(nil),         // 5: com.elarian.hera.proto.UssdHopCompletedEvent
	(*CustomerNumber)(nil),                // 6: com.elarian.hera.proto.CustomerNumber
	(*UssdChannelNumber)(nil),             // 7: com.elarian.hera.proto.UssdChannelNumber
	(*wrappers.StringValue)(nil),          // 8: google.protobuf.StringValue
	(*UssdHop)(nil),                       // 9: com.elarian.hera.proto.UssdHop
	(*timestamp.Timestamp)(nil),           // 10: google.protobuf.Timestamp
	(*AppHeaders)(nil),                    // 11: com.elarian.hera.proto.AppHeaders
}
var file_ussd_proto_depIdxs = []int32{
	6,  // 0: com.elarian.hera.proto.UssdSessionStateEntry.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	7,  // 1: com.elarian.hera.proto.UssdSessionStateEntry.channel_number:type_name -> com.elarian.hera.proto.UssdChannelNumber
	8,  // 2: com.elarian.hera.proto.UssdSessionStateEntry.app_id:type_name -> google.protobuf.StringValue
	9,  // 3: com.elarian.hera.proto.UssdSessionStateEntry.hops:type_name -> com.elarian.hera.proto.UssdHop
	10, // 4: com.elarian.hera.proto.UssdSessionStateEntry.created_at:type_name -> google.protobuf.Timestamp
	10, // 5: com.elarian.hera.proto.UssdSessionStateEntry.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 6: com.elarian.hera.proto.UssdState.sessions:type_name -> com.elarian.hera.proto.UssdSessionStateEntry
	6,  // 7: com.elarian.hera.proto.UssdState.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	7,  // 8: com.elarian.hera.proto.UssdState.channel_numbers:type_name -> com.elarian.hera.proto.UssdChannelNumber
	3,  // 9: com.elarian.hera.proto.UssdEvent.state_adopted:type_name -> com.elarian.hera.proto.UssdStateAdoptedEvent
	4,  // 10: com.elarian.hera.proto.UssdEvent.entity_decommissioned:type_name -> com.elarian.hera.proto.UssdEntityDecommissionedEvent
	5,  // 11: com.elarian.hera.proto.UssdEvent.ussd_hop_completed:type_name -> com.elarian.hera.proto.UssdHopCompletedEvent
	10, // 12: com.elarian.hera.proto.UssdStateAdoptedEvent.timestamp:type_name -> google.protobuf.Timestamp
	11, // 13: com.elarian.hera.proto.UssdStateAdoptedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	1,  // 14: com.elarian.hera.proto.UssdStateAdoptedEvent.other_ussd_state:type_name -> com.elarian.hera.proto.UssdState
	10, // 15: com.elarian.hera.proto.UssdEntityDecommissionedEvent.timestamp:type_name -> google.protobuf.Timestamp
	11, // 16: com.elarian.hera.proto.UssdEntityDecommissionedEvent.app_headers:type_name -> com.elarian.hera.proto.AppHeaders
	10, // 17: com.elarian.hera.proto.UssdHopCompletedEvent.timestamp:type_name -> google.protobuf.Timestamp
	8,  // 18: com.elarian.hera.proto.UssdHopCompletedEvent.app_id:type_name -> google.protobuf.StringValue
	6,  // 19: com.elarian.hera.proto.UssdHopCompletedEvent.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	7,  // 20: com.elarian.hera.proto.UssdHopCompletedEvent.channel_number:type_name -> com.elarian.hera.proto.UssdChannelNumber
	9,  // 21: com.elarian.hera.proto.UssdHopCompletedEvent.hop:type_name -> com.elarian.hera.proto.UssdHop
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ussd_proto_init() }
func file_ussd_proto_init() {
	if File_ussd_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ussd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdSessionStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ussd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ussd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ussd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdStateAdoptedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ussd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdEntityDecommissionedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ussd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdHopCompletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ussd_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UssdEvent_StateAdopted)(nil),
		(*UssdEvent_EntityDecommissioned)(nil),
		(*UssdEvent_UssdHopCompleted)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ussd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ussd_proto_goTypes,
		DependencyIndexes: file_ussd_proto_depIdxs,
		MessageInfos:      file_ussd_proto_msgTypes,
	}.Build()
	File_ussd_proto = out.File
	file_ussd_proto_rawDesc = nil
	file_ussd_proto_goTypes = nil
	file_ussd_proto_depIdxs = nil
}
