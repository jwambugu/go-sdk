// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: payment_model.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PaymentChannel int32

const (
	PaymentChannel_PAYMENT_CHANNEL_UNSPECIFIED PaymentChannel = 0
	PaymentChannel_PAYMENT_CHANNEL_CELLULAR    PaymentChannel = 1
	PaymentChannel_PAYMENT_CHANNEL_AIRTIME     PaymentChannel = 2
)

// Enum value maps for PaymentChannel.
var (
	PaymentChannel_name = map[int32]string{
		0: "PAYMENT_CHANNEL_UNSPECIFIED",
		1: "PAYMENT_CHANNEL_CELLULAR",
		2: "PAYMENT_CHANNEL_AIRTIME",
	}
	PaymentChannel_value = map[string]int32{
		"PAYMENT_CHANNEL_UNSPECIFIED": 0,
		"PAYMENT_CHANNEL_CELLULAR":    1,
		"PAYMENT_CHANNEL_AIRTIME":     2,
	}
)

func (x PaymentChannel) Enum() *PaymentChannel {
	p := new(PaymentChannel)
	*p = x
	return p
}

func (x PaymentChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_model_proto_enumTypes[0].Descriptor()
}

func (PaymentChannel) Type() protoreflect.EnumType {
	return &file_payment_model_proto_enumTypes[0]
}

func (x PaymentChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentChannel.Descriptor instead.
func (PaymentChannel) EnumDescriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{0}
}

type PaymentMode int32

const (
	PaymentMode_PAYMENT_MODE_UNSPECIFIED PaymentMode = 0
	PaymentMode_PAYMENT_MODE_HOSTED      PaymentMode = 1
	PaymentMode_PAYMENT_MODE_VIRTUAL     PaymentMode = 2
)

// Enum value maps for PaymentMode.
var (
	PaymentMode_name = map[int32]string{
		0: "PAYMENT_MODE_UNSPECIFIED",
		1: "PAYMENT_MODE_HOSTED",
		2: "PAYMENT_MODE_VIRTUAL",
	}
	PaymentMode_value = map[string]int32{
		"PAYMENT_MODE_UNSPECIFIED": 0,
		"PAYMENT_MODE_HOSTED":      1,
		"PAYMENT_MODE_VIRTUAL":     2,
	}
)

func (x PaymentMode) Enum() *PaymentMode {
	p := new(PaymentMode)
	*p = x
	return p
}

func (x PaymentMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMode) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_model_proto_enumTypes[1].Descriptor()
}

func (PaymentMode) Type() protoreflect.EnumType {
	return &file_payment_model_proto_enumTypes[1]
}

func (x PaymentMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMode.Descriptor instead.
func (PaymentMode) EnumDescriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{1}
}

type PaymentStatus int32

const (
	PaymentStatus_PAYMENT_STATUS_UNSPECIFIED                PaymentStatus = 0
	PaymentStatus_PAYMENT_STATUS_QUEUED                     PaymentStatus = 100
	PaymentStatus_PAYMENT_STATUS_PENDING_CONFIRMATION       PaymentStatus = 101
	PaymentStatus_PAYMENT_STATUS_PENDING_VALIDATION         PaymentStatus = 102
	PaymentStatus_PAYMENT_STATUS_VALIDATED                  PaymentStatus = 103
	PaymentStatus_PAYMENT_STATUS_INVALID_REQUEST            PaymentStatus = 200
	PaymentStatus_PAYMENT_STATUS_NOT_SUPPORTED              PaymentStatus = 201
	PaymentStatus_PAYMENT_STATUS_INSUFFICIENT_FUNDS         PaymentStatus = 202
	PaymentStatus_PAYMENT_STATUS_APPLICATION_ERROR          PaymentStatus = 203
	PaymentStatus_PAYMENT_STATUS_NOT_ALLOWED                PaymentStatus = 204
	PaymentStatus_PAYMENT_STATUS_DUPLICATE_REQUEST          PaymentStatus = 205
	PaymentStatus_PAYMENT_STATUS_INVALID_PURSE              PaymentStatus = 206
	PaymentStatus_PAYMENT_STATUS_INVALID_WALLET             PaymentStatus = 207
	PaymentStatus_PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID PaymentStatus = 299
	PaymentStatus_PAYMENT_STATUS_SUCCESS                    PaymentStatus = 300
	PaymentStatus_PAYMENT_STATUS_PASS_THROUGH               PaymentStatus = 301
	PaymentStatus_PAYMENT_STATUS_FAILED                     PaymentStatus = 400
	PaymentStatus_PAYMENT_STATUS_THROTTLED                  PaymentStatus = 401
	PaymentStatus_PAYMENT_STATUS_EXPIRED                    PaymentStatus = 402
	PaymentStatus_PAYMENT_STATUS_REJECTED                   PaymentStatus = 403
	PaymentStatus_PAYMENT_STATUS_REVERSED                   PaymentStatus = 500
)

// Enum value maps for PaymentStatus.
var (
	PaymentStatus_name = map[int32]string{
		0:   "PAYMENT_STATUS_UNSPECIFIED",
		100: "PAYMENT_STATUS_QUEUED",
		101: "PAYMENT_STATUS_PENDING_CONFIRMATION",
		102: "PAYMENT_STATUS_PENDING_VALIDATION",
		103: "PAYMENT_STATUS_VALIDATED",
		200: "PAYMENT_STATUS_INVALID_REQUEST",
		201: "PAYMENT_STATUS_NOT_SUPPORTED",
		202: "PAYMENT_STATUS_INSUFFICIENT_FUNDS",
		203: "PAYMENT_STATUS_APPLICATION_ERROR",
		204: "PAYMENT_STATUS_NOT_ALLOWED",
		205: "PAYMENT_STATUS_DUPLICATE_REQUEST",
		206: "PAYMENT_STATUS_INVALID_PURSE",
		207: "PAYMENT_STATUS_INVALID_WALLET",
		299: "PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID",
		300: "PAYMENT_STATUS_SUCCESS",
		301: "PAYMENT_STATUS_PASS_THROUGH",
		400: "PAYMENT_STATUS_FAILED",
		401: "PAYMENT_STATUS_THROTTLED",
		402: "PAYMENT_STATUS_EXPIRED",
		403: "PAYMENT_STATUS_REJECTED",
		500: "PAYMENT_STATUS_REVERSED",
	}
	PaymentStatus_value = map[string]int32{
		"PAYMENT_STATUS_UNSPECIFIED":                0,
		"PAYMENT_STATUS_QUEUED":                     100,
		"PAYMENT_STATUS_PENDING_CONFIRMATION":       101,
		"PAYMENT_STATUS_PENDING_VALIDATION":         102,
		"PAYMENT_STATUS_VALIDATED":                  103,
		"PAYMENT_STATUS_INVALID_REQUEST":            200,
		"PAYMENT_STATUS_NOT_SUPPORTED":              201,
		"PAYMENT_STATUS_INSUFFICIENT_FUNDS":         202,
		"PAYMENT_STATUS_APPLICATION_ERROR":          203,
		"PAYMENT_STATUS_NOT_ALLOWED":                204,
		"PAYMENT_STATUS_DUPLICATE_REQUEST":          205,
		"PAYMENT_STATUS_INVALID_PURSE":              206,
		"PAYMENT_STATUS_INVALID_WALLET":             207,
		"PAYMENT_STATUS_DECOMMISSIONED_CUSTOMER_ID": 299,
		"PAYMENT_STATUS_SUCCESS":                    300,
		"PAYMENT_STATUS_PASS_THROUGH":               301,
		"PAYMENT_STATUS_FAILED":                     400,
		"PAYMENT_STATUS_THROTTLED":                  401,
		"PAYMENT_STATUS_EXPIRED":                    402,
		"PAYMENT_STATUS_REJECTED":                   403,
		"PAYMENT_STATUS_REVERSED":                   500,
	}
)

func (x PaymentStatus) Enum() *PaymentStatus {
	p := new(PaymentStatus)
	*p = x
	return p
}

func (x PaymentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_model_proto_enumTypes[2].Descriptor()
}

func (PaymentStatus) Type() protoreflect.EnumType {
	return &file_payment_model_proto_enumTypes[2]
}

func (x PaymentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentStatus.Descriptor instead.
func (PaymentStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{2}
}

type PaymentChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel PaymentChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.PaymentChannel" json:"channel,omitempty"`
	Number  string         `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *PaymentChannelNumber) Reset() {
	*x = PaymentChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelNumber) ProtoMessage() {}

func (x *PaymentChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelNumber.ProtoReflect.Descriptor instead.
func (*PaymentChannelNumber) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentChannelNumber) GetChannel() PaymentChannel {
	if x != nil {
		return x.Channel
	}
	return PaymentChannel_PAYMENT_CHANNEL_UNSPECIFIED
}

func (x *PaymentChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type PendingPaymentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Value     *Cash                  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Converted *Cash                  `protobuf:"bytes,3,opt,name=converted,proto3" json:"converted,omitempty"`
	Mode      PaymentMode            `protobuf:"varint,4,opt,name=mode,proto3,enum=com.elarian.hera.proto.PaymentMode" json:"mode,omitempty"`
}

func (x *PendingPaymentTransaction) Reset() {
	*x = PendingPaymentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingPaymentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingPaymentTransaction) ProtoMessage() {}

func (x *PendingPaymentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingPaymentTransaction.ProtoReflect.Descriptor instead.
func (*PendingPaymentTransaction) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{1}
}

func (x *PendingPaymentTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PendingPaymentTransaction) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PendingPaymentTransaction) GetConverted() *Cash {
	if x != nil {
		return x.Converted
	}
	return nil
}

func (x *PendingPaymentTransaction) GetMode() PaymentMode {
	if x != nil {
		return x.Mode
	}
	return PaymentMode_PAYMENT_MODE_UNSPECIFIED
}

type LedgerBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Available *Cash `protobuf:"bytes,1,opt,name=available,proto3" json:"available,omitempty"`
	Actual    *Cash `protobuf:"bytes,2,opt,name=actual,proto3" json:"actual,omitempty"`
}

func (x *LedgerBalance) Reset() {
	*x = LedgerBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LedgerBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LedgerBalance) ProtoMessage() {}

func (x *LedgerBalance) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LedgerBalance.ProtoReflect.Descriptor instead.
func (*LedgerBalance) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{2}
}

func (x *LedgerBalance) GetAvailable() *Cash {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *LedgerBalance) GetActual() *Cash {
	if x != nil {
		return x.Actual
	}
	return nil
}

type PaymentBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrencyCode string                                `protobuf:"bytes,1,opt,name=currency_code,json=currencyCode,proto3" json:"currency_code,omitempty"`
	Hosted       *LedgerBalance                        `protobuf:"bytes,2,opt,name=hosted,proto3" json:"hosted,omitempty"`
	Virtual      *LedgerBalance                        `protobuf:"bytes,3,opt,name=virtual,proto3" json:"virtual,omitempty"`
	Pending      map[string]*PendingPaymentTransaction `protobuf:"bytes,4,rep,name=pending,proto3" json:"pending,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SequenceNr   uint64                                `protobuf:"varint,5,opt,name=sequence_nr,json=sequenceNr,proto3" json:"sequence_nr,omitempty"`
}

func (x *PaymentBalance) Reset() {
	*x = PaymentBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBalance) ProtoMessage() {}

func (x *PaymentBalance) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBalance.ProtoReflect.Descriptor instead.
func (*PaymentBalance) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{3}
}

func (x *PaymentBalance) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PaymentBalance) GetHosted() *LedgerBalance {
	if x != nil {
		return x.Hosted
	}
	return nil
}

func (x *PaymentBalance) GetVirtual() *LedgerBalance {
	if x != nil {
		return x.Virtual
	}
	return nil
}

func (x *PaymentBalance) GetPending() map[string]*PendingPaymentTransaction {
	if x != nil {
		return x.Pending
	}
	return nil
}

func (x *PaymentBalance) GetSequenceNr() uint64 {
	if x != nil {
		return x.SequenceNr
	}
	return 0
}

type PaymentPurseCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PurseId string `protobuf:"bytes,1,opt,name=purse_id,json=purseId,proto3" json:"purse_id,omitempty"`
}

func (x *PaymentPurseCounterParty) Reset() {
	*x = PaymentPurseCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentPurseCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentPurseCounterParty) ProtoMessage() {}

func (x *PaymentPurseCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentPurseCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentPurseCounterParty) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentPurseCounterParty) GetPurseId() string {
	if x != nil {
		return x.PurseId
	}
	return ""
}

type PaymentWalletCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerId string `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	WalletId   string `protobuf:"bytes,2,opt,name=wallet_id,json=walletId,proto3" json:"wallet_id,omitempty"`
}

func (x *PaymentWalletCounterParty) Reset() {
	*x = PaymentWalletCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentWalletCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentWalletCounterParty) ProtoMessage() {}

func (x *PaymentWalletCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentWalletCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentWalletCounterParty) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentWalletCounterParty) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *PaymentWalletCounterParty) GetWalletId() string {
	if x != nil {
		return x.WalletId
	}
	return ""
}

type PaymentCustomerCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumber *CustomerNumber       `protobuf:"bytes,1,opt,name=customer_number,json=customerNumber,proto3" json:"customer_number,omitempty"`
	ChannelNumber  *PaymentChannelNumber `protobuf:"bytes,2,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
}

func (x *PaymentCustomerCounterParty) Reset() {
	*x = PaymentCustomerCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCustomerCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCustomerCounterParty) ProtoMessage() {}

func (x *PaymentCustomerCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCustomerCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentCustomerCounterParty) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{6}
}

func (x *PaymentCustomerCounterParty) GetCustomerNumber() *CustomerNumber {
	if x != nil {
		return x.CustomerNumber
	}
	return nil
}

func (x *PaymentCustomerCounterParty) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

type PaymentChannelCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelNumber *PaymentChannelNumber   `protobuf:"bytes,1,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	ChannelCode   int32                   `protobuf:"varint,2,opt,name=channel_code,json=channelCode,proto3" json:"channel_code,omitempty"`
	Account       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *PaymentChannelCounterParty) Reset() {
	*x = PaymentChannelCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentChannelCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentChannelCounterParty) ProtoMessage() {}

func (x *PaymentChannelCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentChannelCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentChannelCounterParty) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{7}
}

func (x *PaymentChannelCounterParty) GetChannelNumber() *PaymentChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *PaymentChannelCounterParty) GetChannelCode() int32 {
	if x != nil {
		return x.ChannelCode
	}
	return 0
}

func (x *PaymentChannelCounterParty) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

type PaymentCounterParty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Party:
	//	*PaymentCounterParty_Customer
	//	*PaymentCounterParty_Purse
	//	*PaymentCounterParty_Wallet
	//	*PaymentCounterParty_Channel
	Party isPaymentCounterParty_Party `protobuf_oneof:"party"`
}

func (x *PaymentCounterParty) Reset() {
	*x = PaymentCounterParty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentCounterParty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentCounterParty) ProtoMessage() {}

func (x *PaymentCounterParty) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentCounterParty.ProtoReflect.Descriptor instead.
func (*PaymentCounterParty) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{8}
}

func (m *PaymentCounterParty) GetParty() isPaymentCounterParty_Party {
	if m != nil {
		return m.Party
	}
	return nil
}

func (x *PaymentCounterParty) GetCustomer() *PaymentCustomerCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Customer); ok {
		return x.Customer
	}
	return nil
}

func (x *PaymentCounterParty) GetPurse() *PaymentPurseCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Purse); ok {
		return x.Purse
	}
	return nil
}

func (x *PaymentCounterParty) GetWallet() *PaymentWalletCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Wallet); ok {
		return x.Wallet
	}
	return nil
}

func (x *PaymentCounterParty) GetChannel() *PaymentChannelCounterParty {
	if x, ok := x.GetParty().(*PaymentCounterParty_Channel); ok {
		return x.Channel
	}
	return nil
}

type isPaymentCounterParty_Party interface {
	isPaymentCounterParty_Party()
}

type PaymentCounterParty_Customer struct {
	Customer *PaymentCustomerCounterParty `protobuf:"bytes,1,opt,name=customer,proto3,oneof"`
}

type PaymentCounterParty_Purse struct {
	Purse *PaymentPurseCounterParty `protobuf:"bytes,2,opt,name=purse,proto3,oneof"`
}

type PaymentCounterParty_Wallet struct {
	Wallet *PaymentWalletCounterParty `protobuf:"bytes,3,opt,name=wallet,proto3,oneof"`
}

type PaymentCounterParty_Channel struct {
	Channel *PaymentChannelCounterParty `protobuf:"bytes,4,opt,name=channel,proto3,oneof"`
}

func (*PaymentCounterParty_Customer) isPaymentCounterParty_Party() {}

func (*PaymentCounterParty_Purse) isPaymentCounterParty_Party() {}

func (*PaymentCounterParty_Wallet) isPaymentCounterParty_Party() {}

func (*PaymentCounterParty_Channel) isPaymentCounterParty_Party() {}

type PaymentTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string                  `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	AppId         *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	DebitParty    *PaymentCounterParty    `protobuf:"bytes,4,opt,name=debit_party,json=debitParty,proto3" json:"debit_party,omitempty"`
	CreditParty   *PaymentCounterParty    `protobuf:"bytes,5,opt,name=credit_party,json=creditParty,proto3" json:"credit_party,omitempty"`
	Value         *Cash                   `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Mode          PaymentMode             `protobuf:"varint,7,opt,name=mode,proto3,enum=com.elarian.hera.proto.PaymentMode" json:"mode,omitempty"`
	Status        PaymentStatus           `protobuf:"varint,8,opt,name=status,proto3,enum=com.elarian.hera.proto.PaymentStatus" json:"status,omitempty"`
	CreatedAt     *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PaymentTransaction) Reset() {
	*x = PaymentTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTransaction) ProtoMessage() {}

func (x *PaymentTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_payment_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTransaction.ProtoReflect.Descriptor instead.
func (*PaymentTransaction) Descriptor() ([]byte, []int) {
	return file_payment_model_proto_rawDescGZIP(), []int{9}
}

func (x *PaymentTransaction) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PaymentTransaction) GetAppId() *wrapperspb.StringValue {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *PaymentTransaction) GetDebitParty() *PaymentCounterParty {
	if x != nil {
		return x.DebitParty
	}
	return nil
}

func (x *PaymentTransaction) GetCreditParty() *PaymentCounterParty {
	if x != nil {
		return x.CreditParty
	}
	return nil
}

func (x *PaymentTransaction) GetValue() *Cash {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PaymentTransaction) GetMode() PaymentMode {
	if x != nil {
		return x.Mode
	}
	return PaymentMode_PAYMENT_MODE_UNSPECIFIED
}

func (x *PaymentTransaction) GetStatus() PaymentStatus {
	if x != nil {
		return x.Status
	}
	return PaymentStatus_PAYMENT_STATUS_UNSPECIFIED
}

func (x *PaymentTransaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PaymentTransaction) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_payment_model_proto protoreflect.FileDescriptor

var file_payment_model_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x70, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x22, 0xff, 0x01, 0x0a, 0x19, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x06, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x22, 0x94, 0x03, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x4d, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4e, 0x72, 0x1a, 0x6d, 0x0a, 0x0c, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x35, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x73,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x19, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xc3, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x51, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x75, 0x72, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x75, 0x72, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x48, 0x00, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x4e, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x22, 0xb0, 0x04, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x69, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x62, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x61, 0x73,
	0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0x6c, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x45, 0x4c,
	0x4c, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x41, 0x49, 0x52, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x02, 0x2a, 0xe1, 0x05, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10,
	0x64, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x66, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x67, 0x12,
	0x23, 0x0a, 0x1e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0xc8, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x53, 0x10, 0xca, 0x01, 0x12,
	0x25, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xcd, 0x01, 0x12, 0x21,
	0x0a, 0x1c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x55, 0x52, 0x53, 0x45, 0x10, 0xce,
	0x01, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x4c,
	0x45, 0x54, 0x10, 0xcf, 0x01, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f,
	0x49, 0x44, 0x10, 0xab, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0xac, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47,
	0x48, 0x10, 0xad, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x03,
	0x12, 0x1d, 0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12,
	0x1b, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x92, 0x03, 0x12, 0x1c, 0x0a, 0x17,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0xf4, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_model_proto_rawDescOnce sync.Once
	file_payment_model_proto_rawDescData = file_payment_model_proto_rawDesc
)

func file_payment_model_proto_rawDescGZIP() []byte {
	file_payment_model_proto_rawDescOnce.Do(func() {
		file_payment_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_model_proto_rawDescData)
	})
	return file_payment_model_proto_rawDescData
}

var file_payment_model_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_payment_model_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_payment_model_proto_goTypes = []interface{}{
	(PaymentChannel)(0),                 // 0: com.elarian.hera.proto.PaymentChannel
	(PaymentMode)(0),                    // 1: com.elarian.hera.proto.PaymentMode
	(PaymentStatus)(0),                  // 2: com.elarian.hera.proto.PaymentStatus
	(*PaymentChannelNumber)(nil),        // 3: com.elarian.hera.proto.PaymentChannelNumber
	(*PendingPaymentTransaction)(nil),   // 4: com.elarian.hera.proto.PendingPaymentTransaction
	(*LedgerBalance)(nil),               // 5: com.elarian.hera.proto.LedgerBalance
	(*PaymentBalance)(nil),              // 6: com.elarian.hera.proto.PaymentBalance
	(*PaymentPurseCounterParty)(nil),    // 7: com.elarian.hera.proto.PaymentPurseCounterParty
	(*PaymentWalletCounterParty)(nil),   // 8: com.elarian.hera.proto.PaymentWalletCounterParty
	(*PaymentCustomerCounterParty)(nil), // 9: com.elarian.hera.proto.PaymentCustomerCounterParty
	(*PaymentChannelCounterParty)(nil),  // 10: com.elarian.hera.proto.PaymentChannelCounterParty
	(*PaymentCounterParty)(nil),         // 11: com.elarian.hera.proto.PaymentCounterParty
	(*PaymentTransaction)(nil),          // 12: com.elarian.hera.proto.PaymentTransaction
	nil,                                 // 13: com.elarian.hera.proto.PaymentBalance.PendingEntry
	(*timestamppb.Timestamp)(nil),       // 14: google.protobuf.Timestamp
	(*Cash)(nil),                        // 15: com.elarian.hera.proto.Cash
	(*CustomerNumber)(nil),              // 16: com.elarian.hera.proto.CustomerNumber
	(*wrapperspb.StringValue)(nil),      // 17: google.protobuf.StringValue
}
var file_payment_model_proto_depIdxs = []int32{
	0,  // 0: com.elarian.hera.proto.PaymentChannelNumber.channel:type_name -> com.elarian.hera.proto.PaymentChannel
	14, // 1: com.elarian.hera.proto.PendingPaymentTransaction.created_at:type_name -> google.protobuf.Timestamp
	15, // 2: com.elarian.hera.proto.PendingPaymentTransaction.value:type_name -> com.elarian.hera.proto.Cash
	15, // 3: com.elarian.hera.proto.PendingPaymentTransaction.converted:type_name -> com.elarian.hera.proto.Cash
	1,  // 4: com.elarian.hera.proto.PendingPaymentTransaction.mode:type_name -> com.elarian.hera.proto.PaymentMode
	15, // 5: com.elarian.hera.proto.LedgerBalance.available:type_name -> com.elarian.hera.proto.Cash
	15, // 6: com.elarian.hera.proto.LedgerBalance.actual:type_name -> com.elarian.hera.proto.Cash
	5,  // 7: com.elarian.hera.proto.PaymentBalance.hosted:type_name -> com.elarian.hera.proto.LedgerBalance
	5,  // 8: com.elarian.hera.proto.PaymentBalance.virtual:type_name -> com.elarian.hera.proto.LedgerBalance
	13, // 9: com.elarian.hera.proto.PaymentBalance.pending:type_name -> com.elarian.hera.proto.PaymentBalance.PendingEntry
	16, // 10: com.elarian.hera.proto.PaymentCustomerCounterParty.customer_number:type_name -> com.elarian.hera.proto.CustomerNumber
	3,  // 11: com.elarian.hera.proto.PaymentCustomerCounterParty.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	3,  // 12: com.elarian.hera.proto.PaymentChannelCounterParty.channel_number:type_name -> com.elarian.hera.proto.PaymentChannelNumber
	17, // 13: com.elarian.hera.proto.PaymentChannelCounterParty.account:type_name -> google.protobuf.StringValue
	9,  // 14: com.elarian.hera.proto.PaymentCounterParty.customer:type_name -> com.elarian.hera.proto.PaymentCustomerCounterParty
	7,  // 15: com.elarian.hera.proto.PaymentCounterParty.purse:type_name -> com.elarian.hera.proto.PaymentPurseCounterParty
	8,  // 16: com.elarian.hera.proto.PaymentCounterParty.wallet:type_name -> com.elarian.hera.proto.PaymentWalletCounterParty
	10, // 17: com.elarian.hera.proto.PaymentCounterParty.channel:type_name -> com.elarian.hera.proto.PaymentChannelCounterParty
	17, // 18: com.elarian.hera.proto.PaymentTransaction.app_id:type_name -> google.protobuf.StringValue
	11, // 19: com.elarian.hera.proto.PaymentTransaction.debit_party:type_name -> com.elarian.hera.proto.PaymentCounterParty
	11, // 20: com.elarian.hera.proto.PaymentTransaction.credit_party:type_name -> com.elarian.hera.proto.PaymentCounterParty
	15, // 21: com.elarian.hera.proto.PaymentTransaction.value:type_name -> com.elarian.hera.proto.Cash
	1,  // 22: com.elarian.hera.proto.PaymentTransaction.mode:type_name -> com.elarian.hera.proto.PaymentMode
	2,  // 23: com.elarian.hera.proto.PaymentTransaction.status:type_name -> com.elarian.hera.proto.PaymentStatus
	14, // 24: com.elarian.hera.proto.PaymentTransaction.created_at:type_name -> google.protobuf.Timestamp
	14, // 25: com.elarian.hera.proto.PaymentTransaction.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 26: com.elarian.hera.proto.PaymentBalance.PendingEntry.value:type_name -> com.elarian.hera.proto.PendingPaymentTransaction
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_payment_model_proto_init() }
func file_payment_model_proto_init() {
	if File_payment_model_proto != nil {
		return
	}
	file_common_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payment_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingPaymentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LedgerBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentPurseCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentWalletCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCustomerCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentChannelCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentCounterParty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_payment_model_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PaymentCounterParty_Customer)(nil),
		(*PaymentCounterParty_Purse)(nil),
		(*PaymentCounterParty_Wallet)(nil),
		(*PaymentCounterParty_Channel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_model_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payment_model_proto_goTypes,
		DependencyIndexes: file_payment_model_proto_depIdxs,
		EnumInfos:         file_payment_model_proto_enumTypes,
		MessageInfos:      file_payment_model_proto_msgTypes,
	}.Build()
	File_payment_model_proto = out.File
	file_payment_model_proto_rawDesc = nil
	file_payment_model_proto_goTypes = nil
	file_payment_model_proto_depIdxs = nil
}
