// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: messaging_model.proto

package com_elarian_hera_proto

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Enums
type MessagingChannel int32

const (
	MessagingChannel_MESSAGING_CHANNEL_UNSPECIFIED  MessagingChannel = 0
	MessagingChannel_MESSAGING_CHANNEL_SMS          MessagingChannel = 1
	MessagingChannel_MESSAGING_CHANNEL_VOICE        MessagingChannel = 2
	MessagingChannel_MESSAGING_CHANNEL_USSD         MessagingChannel = 3
	MessagingChannel_MESSAGING_CHANNEL_FB_MESSENGER MessagingChannel = 4
	MessagingChannel_MESSAGING_CHANNEL_TELEGRAM     MessagingChannel = 5
	MessagingChannel_MESSAGING_CHANNEL_WHATSAPP     MessagingChannel = 6
	MessagingChannel_MESSAGING_CHANNEL_EMAIL        MessagingChannel = 7
)

// Enum value maps for MessagingChannel.
var (
	MessagingChannel_name = map[int32]string{
		0: "MESSAGING_CHANNEL_UNSPECIFIED",
		1: "MESSAGING_CHANNEL_SMS",
		2: "MESSAGING_CHANNEL_VOICE",
		3: "MESSAGING_CHANNEL_USSD",
		4: "MESSAGING_CHANNEL_FB_MESSENGER",
		5: "MESSAGING_CHANNEL_TELEGRAM",
		6: "MESSAGING_CHANNEL_WHATSAPP",
		7: "MESSAGING_CHANNEL_EMAIL",
	}
	MessagingChannel_value = map[string]int32{
		"MESSAGING_CHANNEL_UNSPECIFIED":  0,
		"MESSAGING_CHANNEL_SMS":          1,
		"MESSAGING_CHANNEL_VOICE":        2,
		"MESSAGING_CHANNEL_USSD":         3,
		"MESSAGING_CHANNEL_FB_MESSENGER": 4,
		"MESSAGING_CHANNEL_TELEGRAM":     5,
		"MESSAGING_CHANNEL_WHATSAPP":     6,
		"MESSAGING_CHANNEL_EMAIL":        7,
	}
)

func (x MessagingChannel) Enum() *MessagingChannel {
	p := new(MessagingChannel)
	*p = x
	return p
}

func (x MessagingChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[0].Descriptor()
}

func (MessagingChannel) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[0]
}

func (x MessagingChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingChannel.Descriptor instead.
func (MessagingChannel) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{0}
}

type MessagingConsentUpdate int32

const (
	MessagingConsentUpdate_MESSAGING_CONSENT_UPDATE_UNSPECIFIED MessagingConsentUpdate = 0
	MessagingConsentUpdate_MESSAGING_CONSENT_UPDATE_ALLOW       MessagingConsentUpdate = 1
	MessagingConsentUpdate_MESSAGING_CONSENT_UPDATE_BLOCK       MessagingConsentUpdate = 2
)

// Enum value maps for MessagingConsentUpdate.
var (
	MessagingConsentUpdate_name = map[int32]string{
		0: "MESSAGING_CONSENT_UPDATE_UNSPECIFIED",
		1: "MESSAGING_CONSENT_UPDATE_ALLOW",
		2: "MESSAGING_CONSENT_UPDATE_BLOCK",
	}
	MessagingConsentUpdate_value = map[string]int32{
		"MESSAGING_CONSENT_UPDATE_UNSPECIFIED": 0,
		"MESSAGING_CONSENT_UPDATE_ALLOW":       1,
		"MESSAGING_CONSENT_UPDATE_BLOCK":       2,
	}
)

func (x MessagingConsentUpdate) Enum() *MessagingConsentUpdate {
	p := new(MessagingConsentUpdate)
	*p = x
	return p
}

func (x MessagingConsentUpdate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingConsentUpdate) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[1].Descriptor()
}

func (MessagingConsentUpdate) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[1]
}

func (x MessagingConsentUpdate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingConsentUpdate.Descriptor instead.
func (MessagingConsentUpdate) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{1}
}

type MessagingConsentUpdateStatus int32

const (
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_UNSPECIFIED                MessagingConsentUpdateStatus = 0
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_QUEUED                     MessagingConsentUpdateStatus = 100
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_COMPLETED                  MessagingConsentUpdateStatus = 300
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_INVALID_CHANNEL_NUMBER     MessagingConsentUpdateStatus = 401
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_DECOMMISSIONED_CUSTOMER_ID MessagingConsentUpdateStatus = 402
	MessagingConsentUpdateStatus_MESSAGING_CONSENT_UPDATE_STATUS_APPLICATION_ERROR          MessagingConsentUpdateStatus = 501
)

// Enum value maps for MessagingConsentUpdateStatus.
var (
	MessagingConsentUpdateStatus_name = map[int32]string{
		0:   "MESSAGING_CONSENT_UPDATE_STATUS_UNSPECIFIED",
		100: "MESSAGING_CONSENT_UPDATE_STATUS_QUEUED",
		300: "MESSAGING_CONSENT_UPDATE_STATUS_COMPLETED",
		401: "MESSAGING_CONSENT_UPDATE_STATUS_INVALID_CHANNEL_NUMBER",
		402: "MESSAGING_CONSENT_UPDATE_STATUS_DECOMMISSIONED_CUSTOMER_ID",
		501: "MESSAGING_CONSENT_UPDATE_STATUS_APPLICATION_ERROR",
	}
	MessagingConsentUpdateStatus_value = map[string]int32{
		"MESSAGING_CONSENT_UPDATE_STATUS_UNSPECIFIED":                0,
		"MESSAGING_CONSENT_UPDATE_STATUS_QUEUED":                     100,
		"MESSAGING_CONSENT_UPDATE_STATUS_COMPLETED":                  300,
		"MESSAGING_CONSENT_UPDATE_STATUS_INVALID_CHANNEL_NUMBER":     401,
		"MESSAGING_CONSENT_UPDATE_STATUS_DECOMMISSIONED_CUSTOMER_ID": 402,
		"MESSAGING_CONSENT_UPDATE_STATUS_APPLICATION_ERROR":          501,
	}
)

func (x MessagingConsentUpdateStatus) Enum() *MessagingConsentUpdateStatus {
	p := new(MessagingConsentUpdateStatus)
	*p = x
	return p
}

func (x MessagingConsentUpdateStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingConsentUpdateStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[2].Descriptor()
}

func (MessagingConsentUpdateStatus) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[2]
}

func (x MessagingConsentUpdateStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingConsentUpdateStatus.Descriptor instead.
func (MessagingConsentUpdateStatus) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{2}
}

type MessagingSessionEndReason int32

const (
	MessagingSessionEndReason_MESSAGING_SESSION_END_REASON_UNSPECIFIED     MessagingSessionEndReason = 0
	MessagingSessionEndReason_MESSAGING_SESSION_END_REASON_NORMAL_CLEARING MessagingSessionEndReason = 100
	MessagingSessionEndReason_MESSAGING_SESSION_END_REASON_INACTIVITY      MessagingSessionEndReason = 200
	MessagingSessionEndReason_MESSAGING_SESSION_END_REASON_FAILURE         MessagingSessionEndReason = 300
)

// Enum value maps for MessagingSessionEndReason.
var (
	MessagingSessionEndReason_name = map[int32]string{
		0:   "MESSAGING_SESSION_END_REASON_UNSPECIFIED",
		100: "MESSAGING_SESSION_END_REASON_NORMAL_CLEARING",
		200: "MESSAGING_SESSION_END_REASON_INACTIVITY",
		300: "MESSAGING_SESSION_END_REASON_FAILURE",
	}
	MessagingSessionEndReason_value = map[string]int32{
		"MESSAGING_SESSION_END_REASON_UNSPECIFIED":     0,
		"MESSAGING_SESSION_END_REASON_NORMAL_CLEARING": 100,
		"MESSAGING_SESSION_END_REASON_INACTIVITY":      200,
		"MESSAGING_SESSION_END_REASON_FAILURE":         300,
	}
)

func (x MessagingSessionEndReason) Enum() *MessagingSessionEndReason {
	p := new(MessagingSessionEndReason)
	*p = x
	return p
}

func (x MessagingSessionEndReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessagingSessionEndReason) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[3].Descriptor()
}

func (MessagingSessionEndReason) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[3]
}

func (x MessagingSessionEndReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessagingSessionEndReason.Descriptor instead.
func (MessagingSessionEndReason) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{3}
}

type MessageReaction int32

const (
	MessageReaction_MESSAGE_REACTION_UNSPECIFIED  MessageReaction = 0
	MessageReaction_MESSAGE_REACTION_CLICKED      MessageReaction = 100
	MessageReaction_MESSAGE_REACTION_UNSUBSCRIBED MessageReaction = 200
	MessageReaction_MESSAGE_REACTION_COMPLAINED   MessageReaction = 201
)

// Enum value maps for MessageReaction.
var (
	MessageReaction_name = map[int32]string{
		0:   "MESSAGE_REACTION_UNSPECIFIED",
		100: "MESSAGE_REACTION_CLICKED",
		200: "MESSAGE_REACTION_UNSUBSCRIBED",
		201: "MESSAGE_REACTION_COMPLAINED",
	}
	MessageReaction_value = map[string]int32{
		"MESSAGE_REACTION_UNSPECIFIED":  0,
		"MESSAGE_REACTION_CLICKED":      100,
		"MESSAGE_REACTION_UNSUBSCRIBED": 200,
		"MESSAGE_REACTION_COMPLAINED":   201,
	}
)

func (x MessageReaction) Enum() *MessageReaction {
	p := new(MessageReaction)
	*p = x
	return p
}

func (x MessageReaction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageReaction) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[4].Descriptor()
}

func (MessageReaction) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[4]
}

func (x MessageReaction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageReaction.Descriptor instead.
func (MessageReaction) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{4}
}

type PromptMessageReplyAction int32

const (
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_UNSPECIFIED  PromptMessageReplyAction = 0
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_TEXT         PromptMessageReplyAction = 1
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_PHONE_NUMBER PromptMessageReplyAction = 2
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_EMAIL        PromptMessageReplyAction = 3
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_LOCATION     PromptMessageReplyAction = 4
	PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_URL          PromptMessageReplyAction = 5
)

// Enum value maps for PromptMessageReplyAction.
var (
	PromptMessageReplyAction_name = map[int32]string{
		0: "PROMPT_MESSAGE_REPLY_ACTION_UNSPECIFIED",
		1: "PROMPT_MESSAGE_REPLY_ACTION_TEXT",
		2: "PROMPT_MESSAGE_REPLY_ACTION_PHONE_NUMBER",
		3: "PROMPT_MESSAGE_REPLY_ACTION_EMAIL",
		4: "PROMPT_MESSAGE_REPLY_ACTION_LOCATION",
		5: "PROMPT_MESSAGE_REPLY_ACTION_URL",
	}
	PromptMessageReplyAction_value = map[string]int32{
		"PROMPT_MESSAGE_REPLY_ACTION_UNSPECIFIED":  0,
		"PROMPT_MESSAGE_REPLY_ACTION_TEXT":         1,
		"PROMPT_MESSAGE_REPLY_ACTION_PHONE_NUMBER": 2,
		"PROMPT_MESSAGE_REPLY_ACTION_EMAIL":        3,
		"PROMPT_MESSAGE_REPLY_ACTION_LOCATION":     4,
		"PROMPT_MESSAGE_REPLY_ACTION_URL":          5,
	}
)

func (x PromptMessageReplyAction) Enum() *PromptMessageReplyAction {
	p := new(PromptMessageReplyAction)
	*p = x
	return p
}

func (x PromptMessageReplyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PromptMessageReplyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[5].Descriptor()
}

func (PromptMessageReplyAction) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[5]
}

func (x PromptMessageReplyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PromptMessageReplyAction.Descriptor instead.
func (PromptMessageReplyAction) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{5}
}

type MessageDeliveryStatus int32

const (
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_UNSPECIFIED                 MessageDeliveryStatus = 0
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_QUEUED                      MessageDeliveryStatus = 100
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_SENT                        MessageDeliveryStatus = 101
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DELIVERED                   MessageDeliveryStatus = 300
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_READ                        MessageDeliveryStatus = 301
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_RECEIVED                    MessageDeliveryStatus = 302
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_SESSION_INITIATED           MessageDeliveryStatus = 303
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_FAILED                      MessageDeliveryStatus = 400
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NO_CONSENT                  MessageDeliveryStatus = 401
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NO_CAPABILITY               MessageDeliveryStatus = 402
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_EXPIRED                     MessageDeliveryStatus = 403
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NO_SESSION_IN_PROGRESS      MessageDeliveryStatus = 404
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_OTHER_SESSION_IN_PROGRESS   MessageDeliveryStatus = 405
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TOKEN         MessageDeliveryStatus = 406
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER      MessageDeliveryStatus = 407
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED               MessageDeliveryStatus = 408
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID MessageDeliveryStatus = 409
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID         MessageDeliveryStatus = 410
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST           MessageDeliveryStatus = 411
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND               MessageDeliveryStatus = 412
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND   MessageDeliveryStatus = 413
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID   MessageDeliveryStatus = 414
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_REJECTED                    MessageDeliveryStatus = 415
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INVALID_REQUEST             MessageDeliveryStatus = 416
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_INSUFFICIENT_CREDITS        MessageDeliveryStatus = 417
	MessageDeliveryStatus_MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR           MessageDeliveryStatus = 501
)

// Enum value maps for MessageDeliveryStatus.
var (
	MessageDeliveryStatus_name = map[int32]string{
		0:   "MESSAGE_DELIVERY_STATUS_UNSPECIFIED",
		100: "MESSAGE_DELIVERY_STATUS_QUEUED",
		101: "MESSAGE_DELIVERY_STATUS_SENT",
		300: "MESSAGE_DELIVERY_STATUS_DELIVERED",
		301: "MESSAGE_DELIVERY_STATUS_READ",
		302: "MESSAGE_DELIVERY_STATUS_RECEIVED",
		303: "MESSAGE_DELIVERY_STATUS_SESSION_INITIATED",
		400: "MESSAGE_DELIVERY_STATUS_FAILED",
		401: "MESSAGE_DELIVERY_STATUS_NO_CONSENT",
		402: "MESSAGE_DELIVERY_STATUS_NO_CAPABILITY",
		403: "MESSAGE_DELIVERY_STATUS_EXPIRED",
		404: "MESSAGE_DELIVERY_STATUS_NO_SESSION_IN_PROGRESS",
		405: "MESSAGE_DELIVERY_STATUS_OTHER_SESSION_IN_PROGRESS",
		406: "MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TOKEN",
		407: "MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER",
		408: "MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED",
		409: "MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID",
		410: "MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID",
		411: "MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST",
		412: "MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND",
		413: "MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND",
		414: "MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID",
		415: "MESSAGE_DELIVERY_STATUS_REJECTED",
		416: "MESSAGE_DELIVERY_STATUS_INVALID_REQUEST",
		417: "MESSAGE_DELIVERY_STATUS_INSUFFICIENT_CREDITS",
		501: "MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR",
	}
	MessageDeliveryStatus_value = map[string]int32{
		"MESSAGE_DELIVERY_STATUS_UNSPECIFIED":                 0,
		"MESSAGE_DELIVERY_STATUS_QUEUED":                      100,
		"MESSAGE_DELIVERY_STATUS_SENT":                        101,
		"MESSAGE_DELIVERY_STATUS_DELIVERED":                   300,
		"MESSAGE_DELIVERY_STATUS_READ":                        301,
		"MESSAGE_DELIVERY_STATUS_RECEIVED":                    302,
		"MESSAGE_DELIVERY_STATUS_SESSION_INITIATED":           303,
		"MESSAGE_DELIVERY_STATUS_FAILED":                      400,
		"MESSAGE_DELIVERY_STATUS_NO_CONSENT":                  401,
		"MESSAGE_DELIVERY_STATUS_NO_CAPABILITY":               402,
		"MESSAGE_DELIVERY_STATUS_EXPIRED":                     403,
		"MESSAGE_DELIVERY_STATUS_NO_SESSION_IN_PROGRESS":      404,
		"MESSAGE_DELIVERY_STATUS_OTHER_SESSION_IN_PROGRESS":   405,
		"MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TOKEN":         406,
		"MESSAGE_DELIVERY_STATUS_INVALID_CHANNEL_NUMBER":      407,
		"MESSAGE_DELIVERY_STATUS_NOT_SUPPORTED":               408,
		"MESSAGE_DELIVERY_STATUS_INVALID_REPLY_TO_MESSAGE_ID": 409,
		"MESSAGE_DELIVERY_STATUS_INVALID_CUSTOMER_ID":         410,
		"MESSAGE_DELIVERY_STATUS_DUPLICATE_REQUEST":           411,
		"MESSAGE_DELIVERY_STATUS_TAG_NOT_FOUND":               412,
		"MESSAGE_DELIVERY_STATUS_CUSTOMER_NUMBER_NOT_FOUND":   413,
		"MESSAGE_DELIVERY_STATUS_DECOMMISSIONED_CUSTOMERID":   414,
		"MESSAGE_DELIVERY_STATUS_REJECTED":                    415,
		"MESSAGE_DELIVERY_STATUS_INVALID_REQUEST":             416,
		"MESSAGE_DELIVERY_STATUS_INSUFFICIENT_CREDITS":        417,
		"MESSAGE_DELIVERY_STATUS_APPLICATION_ERROR":           501,
	}
)

func (x MessageDeliveryStatus) Enum() *MessageDeliveryStatus {
	p := new(MessageDeliveryStatus)
	*p = x
	return p
}

func (x MessageDeliveryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageDeliveryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[6].Descriptor()
}

func (MessageDeliveryStatus) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[6]
}

func (x MessageDeliveryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageDeliveryStatus.Descriptor instead.
func (MessageDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{6}
}

type VoiceCallStatus int32

const (
	VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED               VoiceCallStatus = 0
	VoiceCallStatus_VOICE_CALL_STATUS_QUEUED                    VoiceCallStatus = 100
	VoiceCallStatus_VOICE_CALL_STATUS_ANSWERED                  VoiceCallStatus = 101
	VoiceCallStatus_VOICE_CALL_STATUS_RINGING                   VoiceCallStatus = 102
	VoiceCallStatus_VOICE_CALL_STATUS_ACTIVE                    VoiceCallStatus = 200
	VoiceCallStatus_VOICE_CALL_STATUS_DIALING                   VoiceCallStatus = 201
	VoiceCallStatus_VOICE_CALL_STATUS_DIAL_COMPLETED            VoiceCallStatus = 202
	VoiceCallStatus_VOICE_CALL_STATUS_BRIDGED                   VoiceCallStatus = 203
	VoiceCallStatus_VOICE_CALL_STATUS_ENQUEUED                  VoiceCallStatus = 204
	VoiceCallStatus_VOICE_CALL_STATUS_DEQUEUED                  VoiceCallStatus = 205
	VoiceCallStatus_VOICE_CALL_STATUS_TRANSFERRED               VoiceCallStatus = 206
	VoiceCallStatus_VOICE_CALL_STATUS_TRANSFER_COMPLETED        VoiceCallStatus = 207
	VoiceCallStatus_VOICE_CALL_STATUS_COMPLETED                 VoiceCallStatus = 300
	VoiceCallStatus_VOICE_CALL_STATUS_INSUFFICIENT_CREDIT       VoiceCallStatus = 400
	VoiceCallStatus_VOICE_CALL_STATUS_NOT_ANSWERED              VoiceCallStatus = 401
	VoiceCallStatus_VOICE_CALL_STATUS_INVALID_PHONE_NUMBER      VoiceCallStatus = 402
	VoiceCallStatus_VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED VoiceCallStatus = 403
	VoiceCallStatus_VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID VoiceCallStatus = 404
	VoiceCallStatus_VOICE_CALL_STATUS_EXPIRED                   VoiceCallStatus = 405
	VoiceCallStatus_VOICE_CALL_STATUS_INVALID_CHANNEL_NUMBER    VoiceCallStatus = 406
	VoiceCallStatus_VOICE_CALL_STATUS_APPLICATION_ERROR         VoiceCallStatus = 501
)

// Enum value maps for VoiceCallStatus.
var (
	VoiceCallStatus_name = map[int32]string{
		0:   "VOICE_CALL_STATUS_UNSPECIFIED",
		100: "VOICE_CALL_STATUS_QUEUED",
		101: "VOICE_CALL_STATUS_ANSWERED",
		102: "VOICE_CALL_STATUS_RINGING",
		200: "VOICE_CALL_STATUS_ACTIVE",
		201: "VOICE_CALL_STATUS_DIALING",
		202: "VOICE_CALL_STATUS_DIAL_COMPLETED",
		203: "VOICE_CALL_STATUS_BRIDGED",
		204: "VOICE_CALL_STATUS_ENQUEUED",
		205: "VOICE_CALL_STATUS_DEQUEUED",
		206: "VOICE_CALL_STATUS_TRANSFERRED",
		207: "VOICE_CALL_STATUS_TRANSFER_COMPLETED",
		300: "VOICE_CALL_STATUS_COMPLETED",
		400: "VOICE_CALL_STATUS_INSUFFICIENT_CREDIT",
		401: "VOICE_CALL_STATUS_NOT_ANSWERED",
		402: "VOICE_CALL_STATUS_INVALID_PHONE_NUMBER",
		403: "VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED",
		404: "VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID",
		405: "VOICE_CALL_STATUS_EXPIRED",
		406: "VOICE_CALL_STATUS_INVALID_CHANNEL_NUMBER",
		501: "VOICE_CALL_STATUS_APPLICATION_ERROR",
	}
	VoiceCallStatus_value = map[string]int32{
		"VOICE_CALL_STATUS_UNSPECIFIED":               0,
		"VOICE_CALL_STATUS_QUEUED":                    100,
		"VOICE_CALL_STATUS_ANSWERED":                  101,
		"VOICE_CALL_STATUS_RINGING":                   102,
		"VOICE_CALL_STATUS_ACTIVE":                    200,
		"VOICE_CALL_STATUS_DIALING":                   201,
		"VOICE_CALL_STATUS_DIAL_COMPLETED":            202,
		"VOICE_CALL_STATUS_BRIDGED":                   203,
		"VOICE_CALL_STATUS_ENQUEUED":                  204,
		"VOICE_CALL_STATUS_DEQUEUED":                  205,
		"VOICE_CALL_STATUS_TRANSFERRED":               206,
		"VOICE_CALL_STATUS_TRANSFER_COMPLETED":        207,
		"VOICE_CALL_STATUS_COMPLETED":                 300,
		"VOICE_CALL_STATUS_INSUFFICIENT_CREDIT":       400,
		"VOICE_CALL_STATUS_NOT_ANSWERED":              401,
		"VOICE_CALL_STATUS_INVALID_PHONE_NUMBER":      402,
		"VOICE_CALL_STATUS_DESTINATION_NOT_SUPPORTED": 403,
		"VOICE_CALL_STATUS_DECOMMISSIONED_CUSTOMERID": 404,
		"VOICE_CALL_STATUS_EXPIRED":                   405,
		"VOICE_CALL_STATUS_INVALID_CHANNEL_NUMBER":    406,
		"VOICE_CALL_STATUS_APPLICATION_ERROR":         501,
	}
)

func (x VoiceCallStatus) Enum() *VoiceCallStatus {
	p := new(VoiceCallStatus)
	*p = x
	return p
}

func (x VoiceCallStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceCallStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[7].Descriptor()
}

func (VoiceCallStatus) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[7]
}

func (x VoiceCallStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceCallStatus.Descriptor instead.
func (VoiceCallStatus) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{7}
}

type VoiceCallHangupCause int32

const (
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED              VoiceCallHangupCause = 0
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER       VoiceCallHangupCause = 1
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_USER_BUSY                VoiceCallHangupCause = 17
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING          VoiceCallHangupCause = 16
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE         VoiceCallHangupCause = 18
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NO_ANSWER                VoiceCallHangupCause = 19
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT        VoiceCallHangupCause = 20
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED            VoiceCallHangupCause = 21
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED       VoiceCallHangupCause = 31
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE VoiceCallHangupCause = 41
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE      VoiceCallHangupCause = 63
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE VoiceCallHangupCause = 102
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL        VoiceCallHangupCause = 487
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_LOSE_RACE                VoiceCallHangupCause = 502
	VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED      VoiceCallHangupCause = 606
)

// Enum value maps for VoiceCallHangupCause.
var (
	VoiceCallHangupCause_name = map[int32]string{
		0:   "VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED",
		1:   "VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER",
		17:  "VOICE_CALL_HANGUP_CAUSE_USER_BUSY",
		16:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING",
		18:  "VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE",
		19:  "VOICE_CALL_HANGUP_CAUSE_NO_ANSWER",
		20:  "VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT",
		21:  "VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED",
		31:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED",
		41:  "VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE",
		63:  "VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE",
		102: "VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE",
		487: "VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL",
		502: "VOICE_CALL_HANGUP_CAUSE_LOSE_RACE",
		606: "VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED",
	}
	VoiceCallHangupCause_value = map[string]int32{
		"VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED":              0,
		"VOICE_CALL_HANGUP_CAUSE_UNALLOCATED_NUMBER":       1,
		"VOICE_CALL_HANGUP_CAUSE_USER_BUSY":                17,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_CLEARING":          16,
		"VOICE_CALL_HANGUP_CAUSE_NO_USER_RESPONSE":         18,
		"VOICE_CALL_HANGUP_CAUSE_NO_ANSWER":                19,
		"VOICE_CALL_HANGUP_CAUSE_SUBSCRIBER_ABSENT":        20,
		"VOICE_CALL_HANGUP_CAUSE_CALL_REJECTED":            21,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_UNSPECIFIED":       31,
		"VOICE_CALL_HANGUP_CAUSE_NORMAL_TEMPORARY_FAILURE": 41,
		"VOICE_CALL_HANGUP_CAUSE_SERVICE_UNAVAILABLE":      63,
		"VOICE_CALL_HANGUP_CAUSE_RECOVERY_ON_TIMER_EXPIRE": 102,
		"VOICE_CALL_HANGUP_CAUSE_ORIGINATOR_CANCEL":        487,
		"VOICE_CALL_HANGUP_CAUSE_LOSE_RACE":                502,
		"VOICE_CALL_HANGUP_CAUSE_USER_NOT_REGISTERED":      606,
	}
)

func (x VoiceCallHangupCause) Enum() *VoiceCallHangupCause {
	p := new(VoiceCallHangupCause)
	*p = x
	return p
}

func (x VoiceCallHangupCause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoiceCallHangupCause) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[8].Descriptor()
}

func (VoiceCallHangupCause) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[8]
}

func (x VoiceCallHangupCause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoiceCallHangupCause.Descriptor instead.
func (VoiceCallHangupCause) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{8}
}

type TextToSpeechVoice int32

const (
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_UNSPECIFIED TextToSpeechVoice = 0
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_MALE        TextToSpeechVoice = 1
	TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_FEMALE      TextToSpeechVoice = 2
)

// Enum value maps for TextToSpeechVoice.
var (
	TextToSpeechVoice_name = map[int32]string{
		0: "TEXT_TO_SPEECH_VOICE_UNSPECIFIED",
		1: "TEXT_TO_SPEECH_VOICE_MALE",
		2: "TEXT_TO_SPEECH_VOICE_FEMALE",
	}
	TextToSpeechVoice_value = map[string]int32{
		"TEXT_TO_SPEECH_VOICE_UNSPECIFIED": 0,
		"TEXT_TO_SPEECH_VOICE_MALE":        1,
		"TEXT_TO_SPEECH_VOICE_FEMALE":      2,
	}
)

func (x TextToSpeechVoice) Enum() *TextToSpeechVoice {
	p := new(TextToSpeechVoice)
	*p = x
	return p
}

func (x TextToSpeechVoice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextToSpeechVoice) Descriptor() protoreflect.EnumDescriptor {
	return file_messaging_model_proto_enumTypes[9].Descriptor()
}

func (TextToSpeechVoice) Type() protoreflect.EnumType {
	return &file_messaging_model_proto_enumTypes[9]
}

func (x TextToSpeechVoice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextToSpeechVoice.Descriptor instead.
func (TextToSpeechVoice) EnumDescriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{9}
}

type MessagingChannelNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel MessagingChannel `protobuf:"varint,1,opt,name=channel,proto3,enum=com.elarian.hera.proto.MessagingChannel" json:"channel,omitempty"`
	Number  string           `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *MessagingChannelNumber) Reset() {
	*x = MessagingChannelNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagingChannelNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagingChannelNumber) ProtoMessage() {}

func (x *MessagingChannelNumber) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagingChannelNumber.ProtoReflect.Descriptor instead.
func (*MessagingChannelNumber) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{0}
}

func (x *MessagingChannelNumber) GetChannel() MessagingChannel {
	if x != nil {
		return x.Channel
	}
	return MessagingChannel_MESSAGING_CHANNEL_UNSPECIFIED
}

func (x *MessagingChannelNumber) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

type MediaMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string    `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Media MediaType `protobuf:"varint,2,opt,name=media,proto3,enum=com.elarian.hera.proto.MediaType" json:"media,omitempty"`
}

func (x *MediaMessageBody) Reset() {
	*x = MediaMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaMessageBody) ProtoMessage() {}

func (x *MediaMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaMessageBody.ProtoReflect.Descriptor instead.
func (*MediaMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{1}
}

func (x *MediaMessageBody) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaMessageBody) GetMedia() MediaType {
	if x != nil {
		return x.Media
	}
	return MediaType_MEDIA_TYPE_UNSPECIFIED
}

type LocationMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64               `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64               `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Label     *wrappers.StringValue `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Address   *wrappers.StringValue `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *LocationMessageBody) Reset() {
	*x = LocationMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationMessageBody) ProtoMessage() {}

func (x *LocationMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationMessageBody.ProtoReflect.Descriptor instead.
func (*LocationMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{2}
}

func (x *LocationMessageBody) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LocationMessageBody) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LocationMessageBody) GetLabel() *wrappers.StringValue {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *LocationMessageBody) GetAddress() *wrappers.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

type EmailMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject     string   `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	BodyPlain   string   `protobuf:"bytes,2,opt,name=body_plain,json=bodyPlain,proto3" json:"body_plain,omitempty"`
	BodyHtml    string   `protobuf:"bytes,3,opt,name=body_html,json=bodyHtml,proto3" json:"body_html,omitempty"`
	CcList      []string `protobuf:"bytes,4,rep,name=cc_list,json=ccList,proto3" json:"cc_list,omitempty"`
	BccList     []string `protobuf:"bytes,5,rep,name=bcc_list,json=bccList,proto3" json:"bcc_list,omitempty"`
	Attachments []string `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *EmailMessageBody) Reset() {
	*x = EmailMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailMessageBody) ProtoMessage() {}

func (x *EmailMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailMessageBody.ProtoReflect.Descriptor instead.
func (*EmailMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{3}
}

func (x *EmailMessageBody) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *EmailMessageBody) GetBodyPlain() string {
	if x != nil {
		return x.BodyPlain
	}
	return ""
}

func (x *EmailMessageBody) GetBodyHtml() string {
	if x != nil {
		return x.BodyHtml
	}
	return ""
}

func (x *EmailMessageBody) GetCcList() []string {
	if x != nil {
		return x.CcList
	}
	return nil
}

func (x *EmailMessageBody) GetBccList() []string {
	if x != nil {
		return x.BccList
	}
	return nil
}

func (x *EmailMessageBody) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type TemplateMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TemplateMessageBody) Reset() {
	*x = TemplateMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateMessageBody) ProtoMessage() {}

func (x *TemplateMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateMessageBody.ProtoReflect.Descriptor instead.
func (*TemplateMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{4}
}

func (x *TemplateMessageBody) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TemplateMessageBody) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type SayCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string            `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Voice    TextToSpeechVoice `protobuf:"varint,2,opt,name=voice,proto3,enum=com.elarian.hera.proto.TextToSpeechVoice" json:"voice,omitempty"`
	PlayBeep bool              `protobuf:"varint,3,opt,name=play_beep,json=playBeep,proto3" json:"play_beep,omitempty"`
}

func (x *SayCallAction) Reset() {
	*x = SayCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SayCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SayCallAction) ProtoMessage() {}

func (x *SayCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SayCallAction.ProtoReflect.Descriptor instead.
func (*SayCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{5}
}

func (x *SayCallAction) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SayCallAction) GetVoice() TextToSpeechVoice {
	if x != nil {
		return x.Voice
	}
	return TextToSpeechVoice_TEXT_TO_SPEECH_VOICE_UNSPECIFIED
}

func (x *SayCallAction) GetPlayBeep() bool {
	if x != nil {
		return x.PlayBeep
	}
	return false
}

type PlayCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *PlayCallAction) Reset() {
	*x = PlayCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayCallAction) ProtoMessage() {}

func (x *PlayCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayCallAction.ProtoReflect.Descriptor instead.
func (*PlayCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{6}
}

func (x *PlayCallAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetDigitsCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prompt:
	//	*GetDigitsCallAction_Say
	//	*GetDigitsCallAction_Play
	Prompt      isGetDigitsCallAction_Prompt `protobuf_oneof:"prompt"`
	Timeout     *duration.Duration           `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	FinishOnKey *wrappers.StringValue        `protobuf:"bytes,4,opt,name=finish_on_key,json=finishOnKey,proto3" json:"finish_on_key,omitempty"`
	NumDigits   *wrappers.Int32Value         `protobuf:"bytes,5,opt,name=num_digits,json=numDigits,proto3" json:"num_digits,omitempty"`
}

func (x *GetDigitsCallAction) Reset() {
	*x = GetDigitsCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDigitsCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDigitsCallAction) ProtoMessage() {}

func (x *GetDigitsCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDigitsCallAction.ProtoReflect.Descriptor instead.
func (*GetDigitsCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{7}
}

func (m *GetDigitsCallAction) GetPrompt() isGetDigitsCallAction_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *GetDigitsCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetPrompt().(*GetDigitsCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *GetDigitsCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetPrompt().(*GetDigitsCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *GetDigitsCallAction) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GetDigitsCallAction) GetFinishOnKey() *wrappers.StringValue {
	if x != nil {
		return x.FinishOnKey
	}
	return nil
}

func (x *GetDigitsCallAction) GetNumDigits() *wrappers.Int32Value {
	if x != nil {
		return x.NumDigits
	}
	return nil
}

type isGetDigitsCallAction_Prompt interface {
	isGetDigitsCallAction_Prompt()
}

type GetDigitsCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type GetDigitsCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

func (*GetDigitsCallAction_Say) isGetDigitsCallAction_Prompt() {}

func (*GetDigitsCallAction_Play) isGetDigitsCallAction_Prompt() {}

type GetRecordingCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Prompt:
	//	*GetRecordingCallAction_Say
	//	*GetRecordingCallAction_Play
	Prompt      isGetRecordingCallAction_Prompt `protobuf_oneof:"prompt"`
	Timeout     *duration.Duration              `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MaxLength   *duration.Duration              `protobuf:"bytes,4,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	FinishOnKey *wrappers.StringValue           `protobuf:"bytes,5,opt,name=finish_on_key,json=finishOnKey,proto3" json:"finish_on_key,omitempty"`
	PlayBeep    bool                            `protobuf:"varint,6,opt,name=play_beep,json=playBeep,proto3" json:"play_beep,omitempty"`
	TrimSilence bool                            `protobuf:"varint,7,opt,name=trim_silence,json=trimSilence,proto3" json:"trim_silence,omitempty"`
}

func (x *GetRecordingCallAction) Reset() {
	*x = GetRecordingCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordingCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordingCallAction) ProtoMessage() {}

func (x *GetRecordingCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordingCallAction.ProtoReflect.Descriptor instead.
func (*GetRecordingCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{8}
}

func (m *GetRecordingCallAction) GetPrompt() isGetRecordingCallAction_Prompt {
	if m != nil {
		return m.Prompt
	}
	return nil
}

func (x *GetRecordingCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetPrompt().(*GetRecordingCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *GetRecordingCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetPrompt().(*GetRecordingCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *GetRecordingCallAction) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *GetRecordingCallAction) GetMaxLength() *duration.Duration {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *GetRecordingCallAction) GetFinishOnKey() *wrappers.StringValue {
	if x != nil {
		return x.FinishOnKey
	}
	return nil
}

func (x *GetRecordingCallAction) GetPlayBeep() bool {
	if x != nil {
		return x.PlayBeep
	}
	return false
}

func (x *GetRecordingCallAction) GetTrimSilence() bool {
	if x != nil {
		return x.TrimSilence
	}
	return false
}

type isGetRecordingCallAction_Prompt interface {
	isGetRecordingCallAction_Prompt()
}

type GetRecordingCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type GetRecordingCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

func (*GetRecordingCallAction_Say) isGetRecordingCallAction_Prompt() {}

func (*GetRecordingCallAction_Play) isGetRecordingCallAction_Prompt() {}

type RecordSessionCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RecordSessionCallAction) Reset() {
	*x = RecordSessionCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSessionCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSessionCallAction) ProtoMessage() {}

func (x *RecordSessionCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSessionCallAction.ProtoReflect.Descriptor instead.
func (*RecordSessionCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{9}
}

type DialCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNumbers []*CustomerNumber     `protobuf:"bytes,1,rep,name=customer_numbers,json=customerNumbers,proto3" json:"customer_numbers,omitempty"`
	Record          bool                  `protobuf:"varint,2,opt,name=record,proto3" json:"record,omitempty"`
	Sequential      bool                  `protobuf:"varint,3,opt,name=sequential,proto3" json:"sequential,omitempty"`
	RingbackTone    *wrappers.StringValue `protobuf:"bytes,4,opt,name=ringback_tone,json=ringbackTone,proto3" json:"ringback_tone,omitempty"`
	CallerId        *wrappers.StringValue `protobuf:"bytes,5,opt,name=caller_id,json=callerId,proto3" json:"caller_id,omitempty"`
	MaxDuration     *wrappers.Int32Value  `protobuf:"bytes,6,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
}

func (x *DialCallAction) Reset() {
	*x = DialCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialCallAction) ProtoMessage() {}

func (x *DialCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialCallAction.ProtoReflect.Descriptor instead.
func (*DialCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{10}
}

func (x *DialCallAction) GetCustomerNumbers() []*CustomerNumber {
	if x != nil {
		return x.CustomerNumbers
	}
	return nil
}

func (x *DialCallAction) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *DialCallAction) GetSequential() bool {
	if x != nil {
		return x.Sequential
	}
	return false
}

func (x *DialCallAction) GetRingbackTone() *wrappers.StringValue {
	if x != nil {
		return x.RingbackTone
	}
	return nil
}

func (x *DialCallAction) GetCallerId() *wrappers.StringValue {
	if x != nil {
		return x.CallerId
	}
	return nil
}

func (x *DialCallAction) GetMaxDuration() *wrappers.Int32Value {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

type EnqueueCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HoldMusic *wrappers.StringValue `protobuf:"bytes,1,opt,name=hold_music,json=holdMusic,proto3" json:"hold_music,omitempty"`
	QueueName *wrappers.StringValue `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
}

func (x *EnqueueCallAction) Reset() {
	*x = EnqueueCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueCallAction) ProtoMessage() {}

func (x *EnqueueCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueCallAction.ProtoReflect.Descriptor instead.
func (*EnqueueCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{11}
}

func (x *EnqueueCallAction) GetHoldMusic() *wrappers.StringValue {
	if x != nil {
		return x.HoldMusic
	}
	return nil
}

func (x *EnqueueCallAction) GetQueueName() *wrappers.StringValue {
	if x != nil {
		return x.QueueName
	}
	return nil
}

type DequeueCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelNumber *MessagingChannelNumber `protobuf:"bytes,1,opt,name=channel_number,json=channelNumber,proto3" json:"channel_number,omitempty"`
	Record        bool                    `protobuf:"varint,2,opt,name=record,proto3" json:"record,omitempty"`
	QueueName     *wrappers.StringValue   `protobuf:"bytes,3,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
}

func (x *DequeueCallAction) Reset() {
	*x = DequeueCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DequeueCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DequeueCallAction) ProtoMessage() {}

func (x *DequeueCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DequeueCallAction.ProtoReflect.Descriptor instead.
func (*DequeueCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{12}
}

func (x *DequeueCallAction) GetChannelNumber() *MessagingChannelNumber {
	if x != nil {
		return x.ChannelNumber
	}
	return nil
}

func (x *DequeueCallAction) GetRecord() bool {
	if x != nil {
		return x.Record
	}
	return false
}

func (x *DequeueCallAction) GetQueueName() *wrappers.StringValue {
	if x != nil {
		return x.QueueName
	}
	return nil
}

type RejectCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RejectCallAction) Reset() {
	*x = RejectCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectCallAction) ProtoMessage() {}

func (x *RejectCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectCallAction.ProtoReflect.Descriptor instead.
func (*RejectCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{13}
}

type RedirectCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RedirectCallAction) Reset() {
	*x = RedirectCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectCallAction) ProtoMessage() {}

func (x *RedirectCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectCallAction.ProtoReflect.Descriptor instead.
func (*RedirectCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{14}
}

func (x *RedirectCallAction) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type VoiceCallAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*VoiceCallAction_Say
	//	*VoiceCallAction_Play
	//	*VoiceCallAction_GetDigits
	//	*VoiceCallAction_Dial
	//	*VoiceCallAction_RecordSession
	//	*VoiceCallAction_GetRecording
	//	*VoiceCallAction_Enqueue
	//	*VoiceCallAction_Dequeue
	//	*VoiceCallAction_Reject
	//	*VoiceCallAction_Redirect
	Entry isVoiceCallAction_Entry `protobuf_oneof:"entry"`
}

func (x *VoiceCallAction) Reset() {
	*x = VoiceCallAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallAction) ProtoMessage() {}

func (x *VoiceCallAction) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallAction.ProtoReflect.Descriptor instead.
func (*VoiceCallAction) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{15}
}

func (m *VoiceCallAction) GetEntry() isVoiceCallAction_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *VoiceCallAction) GetSay() *SayCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Say); ok {
		return x.Say
	}
	return nil
}

func (x *VoiceCallAction) GetPlay() *PlayCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Play); ok {
		return x.Play
	}
	return nil
}

func (x *VoiceCallAction) GetGetDigits() *GetDigitsCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_GetDigits); ok {
		return x.GetDigits
	}
	return nil
}

func (x *VoiceCallAction) GetDial() *DialCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Dial); ok {
		return x.Dial
	}
	return nil
}

func (x *VoiceCallAction) GetRecordSession() *RecordSessionCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_RecordSession); ok {
		return x.RecordSession
	}
	return nil
}

func (x *VoiceCallAction) GetGetRecording() *GetRecordingCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_GetRecording); ok {
		return x.GetRecording
	}
	return nil
}

func (x *VoiceCallAction) GetEnqueue() *EnqueueCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Enqueue); ok {
		return x.Enqueue
	}
	return nil
}

func (x *VoiceCallAction) GetDequeue() *DequeueCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Dequeue); ok {
		return x.Dequeue
	}
	return nil
}

func (x *VoiceCallAction) GetReject() *RejectCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Reject); ok {
		return x.Reject
	}
	return nil
}

func (x *VoiceCallAction) GetRedirect() *RedirectCallAction {
	if x, ok := x.GetEntry().(*VoiceCallAction_Redirect); ok {
		return x.Redirect
	}
	return nil
}

type isVoiceCallAction_Entry interface {
	isVoiceCallAction_Entry()
}

type VoiceCallAction_Say struct {
	Say *SayCallAction `protobuf:"bytes,1,opt,name=say,proto3,oneof"`
}

type VoiceCallAction_Play struct {
	Play *PlayCallAction `protobuf:"bytes,2,opt,name=play,proto3,oneof"`
}

type VoiceCallAction_GetDigits struct {
	GetDigits *GetDigitsCallAction `protobuf:"bytes,3,opt,name=get_digits,json=getDigits,proto3,oneof"`
}

type VoiceCallAction_Dial struct {
	Dial *DialCallAction `protobuf:"bytes,4,opt,name=dial,proto3,oneof"`
}

type VoiceCallAction_RecordSession struct {
	RecordSession *RecordSessionCallAction `protobuf:"bytes,5,opt,name=record_session,json=recordSession,proto3,oneof"`
}

type VoiceCallAction_GetRecording struct {
	GetRecording *GetRecordingCallAction `protobuf:"bytes,6,opt,name=get_recording,json=getRecording,proto3,oneof"`
}

type VoiceCallAction_Enqueue struct {
	Enqueue *EnqueueCallAction `protobuf:"bytes,7,opt,name=enqueue,proto3,oneof"`
}

type VoiceCallAction_Dequeue struct {
	Dequeue *DequeueCallAction `protobuf:"bytes,8,opt,name=dequeue,proto3,oneof"`
}

type VoiceCallAction_Reject struct {
	Reject *RejectCallAction `protobuf:"bytes,9,opt,name=reject,proto3,oneof"`
}

type VoiceCallAction_Redirect struct {
	Redirect *RedirectCallAction `protobuf:"bytes,10,opt,name=redirect,proto3,oneof"`
}

func (*VoiceCallAction_Say) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Play) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_GetDigits) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Dial) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_RecordSession) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_GetRecording) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Enqueue) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Dequeue) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Reject) isVoiceCallAction_Entry() {}

func (*VoiceCallAction_Redirect) isVoiceCallAction_Entry() {}

type VoiceCallDialplanMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*VoiceCallAction `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *VoiceCallDialplanMessageBody) Reset() {
	*x = VoiceCallDialplanMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallDialplanMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallDialplanMessageBody) ProtoMessage() {}

func (x *VoiceCallDialplanMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallDialplanMessageBody.ProtoReflect.Descriptor instead.
func (*VoiceCallDialplanMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{16}
}

func (x *VoiceCallDialplanMessageBody) GetActions() []*VoiceCallAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type VoiceCallDialInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DestinationNumber string               `protobuf:"bytes,1,opt,name=destination_number,json=destinationNumber,proto3" json:"destination_number,omitempty"`
	StartedAt         *timestamp.Timestamp `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Duration          *duration.Duration   `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *VoiceCallDialInput) Reset() {
	*x = VoiceCallDialInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallDialInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallDialInput) ProtoMessage() {}

func (x *VoiceCallDialInput) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallDialInput.ProtoReflect.Descriptor instead.
func (*VoiceCallDialInput) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{17}
}

func (x *VoiceCallDialInput) GetDestinationNumber() string {
	if x != nil {
		return x.DestinationNumber
	}
	return ""
}

func (x *VoiceCallDialInput) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *VoiceCallDialInput) GetDuration() *duration.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type VoiceCallQueueInput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnqueuedAt          *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=enqueued_at,json=enqueuedAt,proto3" json:"enqueued_at,omitempty"`
	DequeuedAt          *timestamp.Timestamp  `protobuf:"bytes,2,opt,name=dequeued_at,json=dequeuedAt,proto3" json:"dequeued_at,omitempty"`
	DequeuedToNumber    *wrappers.StringValue `protobuf:"bytes,3,opt,name=dequeued_to_number,json=dequeuedToNumber,proto3" json:"dequeued_to_number,omitempty"`
	DequeuedToSessionId *wrappers.StringValue `protobuf:"bytes,4,opt,name=dequeued_to_sessionId,json=dequeuedToSessionId,proto3" json:"dequeued_to_sessionId,omitempty"`
	QueueDuration       *duration.Duration    `protobuf:"bytes,5,opt,name=queue_duration,json=queueDuration,proto3" json:"queue_duration,omitempty"`
}

func (x *VoiceCallQueueInput) Reset() {
	*x = VoiceCallQueueInput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallQueueInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallQueueInput) ProtoMessage() {}

func (x *VoiceCallQueueInput) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallQueueInput.ProtoReflect.Descriptor instead.
func (*VoiceCallQueueInput) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{18}
}

func (x *VoiceCallQueueInput) GetEnqueuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.EnqueuedAt
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedAt() *timestamp.Timestamp {
	if x != nil {
		return x.DequeuedAt
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedToNumber() *wrappers.StringValue {
	if x != nil {
		return x.DequeuedToNumber
	}
	return nil
}

func (x *VoiceCallQueueInput) GetDequeuedToSessionId() *wrappers.StringValue {
	if x != nil {
		return x.DequeuedToSessionId
	}
	return nil
}

func (x *VoiceCallQueueInput) GetQueueDuration() *duration.Duration {
	if x != nil {
		return x.QueueDuration
	}
	return nil
}

type VoiceCallInputMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction    CustomerEventDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=com.elarian.hera.proto.CustomerEventDirection" json:"direction,omitempty"`
	Status       VoiceCallStatus        `protobuf:"varint,2,opt,name=status,proto3,enum=com.elarian.hera.proto.VoiceCallStatus" json:"status,omitempty"`
	StartedAt    *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	HangupCause  VoiceCallHangupCause   `protobuf:"varint,4,opt,name=hangup_cause,json=hangupCause,proto3,enum=com.elarian.hera.proto.VoiceCallHangupCause" json:"hangup_cause,omitempty"`
	DtmfDigits   *wrappers.StringValue  `protobuf:"bytes,5,opt,name=dtmf_digits,json=dtmfDigits,proto3" json:"dtmf_digits,omitempty"`
	RecordingUrl *wrappers.StringValue  `protobuf:"bytes,6,opt,name=recording_url,json=recordingUrl,proto3" json:"recording_url,omitempty"`
	DialData     *VoiceCallDialInput    `protobuf:"bytes,7,opt,name=dial_data,json=dialData,proto3" json:"dial_data,omitempty"`
	QueueData    *VoiceCallQueueInput   `protobuf:"bytes,8,opt,name=queue_data,json=queueData,proto3" json:"queue_data,omitempty"`
}

func (x *VoiceCallInputMessageBody) Reset() {
	*x = VoiceCallInputMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoiceCallInputMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoiceCallInputMessageBody) ProtoMessage() {}

func (x *VoiceCallInputMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoiceCallInputMessageBody.ProtoReflect.Descriptor instead.
func (*VoiceCallInputMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{19}
}

func (x *VoiceCallInputMessageBody) GetDirection() CustomerEventDirection {
	if x != nil {
		return x.Direction
	}
	return CustomerEventDirection_CUSTOMER_EVENT_DIRECTION_UNSPECIFIED
}

func (x *VoiceCallInputMessageBody) GetStatus() VoiceCallStatus {
	if x != nil {
		return x.Status
	}
	return VoiceCallStatus_VOICE_CALL_STATUS_UNSPECIFIED
}

func (x *VoiceCallInputMessageBody) GetStartedAt() *timestamp.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *VoiceCallInputMessageBody) GetHangupCause() VoiceCallHangupCause {
	if x != nil {
		return x.HangupCause
	}
	return VoiceCallHangupCause_VOICE_CALL_HANGUP_CAUSE_UNSPECIFIED
}

func (x *VoiceCallInputMessageBody) GetDtmfDigits() *wrappers.StringValue {
	if x != nil {
		return x.DtmfDigits
	}
	return nil
}

func (x *VoiceCallInputMessageBody) GetRecordingUrl() *wrappers.StringValue {
	if x != nil {
		return x.RecordingUrl
	}
	return nil
}

func (x *VoiceCallInputMessageBody) GetDialData() *VoiceCallDialInput {
	if x != nil {
		return x.DialData
	}
	return nil
}

func (x *VoiceCallInputMessageBody) GetQueueData() *VoiceCallQueueInput {
	if x != nil {
		return x.QueueData
	}
	return nil
}

type UssdMenuMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IsTerminal bool   `protobuf:"varint,2,opt,name=is_terminal,json=isTerminal,proto3" json:"is_terminal,omitempty"`
}

func (x *UssdMenuMessageBody) Reset() {
	*x = UssdMenuMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UssdMenuMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UssdMenuMessageBody) ProtoMessage() {}

func (x *UssdMenuMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UssdMenuMessageBody.ProtoReflect.Descriptor instead.
func (*UssdMenuMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{20}
}

func (x *UssdMenuMessageBody) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *UssdMenuMessageBody) GetIsTerminal() bool {
	if x != nil {
		return x.IsTerminal
	}
	return false
}

type OutboundMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*OutboundMessageBody_Text
	//	*OutboundMessageBody_Media
	//	*OutboundMessageBody_Location
	//	*OutboundMessageBody_Email
	//	*OutboundMessageBody_Template
	//	*OutboundMessageBody_Url
	//	*OutboundMessageBody_Voice
	//	*OutboundMessageBody_Ussd
	Entry isOutboundMessageBody_Entry `protobuf_oneof:"entry"`
}

func (x *OutboundMessageBody) Reset() {
	*x = OutboundMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessageBody) ProtoMessage() {}

func (x *OutboundMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessageBody.ProtoReflect.Descriptor instead.
func (*OutboundMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{21}
}

func (m *OutboundMessageBody) GetEntry() isOutboundMessageBody_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *OutboundMessageBody) GetText() string {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Text); ok {
		return x.Text
	}
	return ""
}

func (x *OutboundMessageBody) GetMedia() *MediaMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Media); ok {
		return x.Media
	}
	return nil
}

func (x *OutboundMessageBody) GetLocation() *LocationMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Location); ok {
		return x.Location
	}
	return nil
}

func (x *OutboundMessageBody) GetEmail() *EmailMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Email); ok {
		return x.Email
	}
	return nil
}

func (x *OutboundMessageBody) GetTemplate() *TemplateMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Template); ok {
		return x.Template
	}
	return nil
}

func (x *OutboundMessageBody) GetUrl() string {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Url); ok {
		return x.Url
	}
	return ""
}

func (x *OutboundMessageBody) GetVoice() *VoiceCallDialplanMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Voice); ok {
		return x.Voice
	}
	return nil
}

func (x *OutboundMessageBody) GetUssd() *UssdMenuMessageBody {
	if x, ok := x.GetEntry().(*OutboundMessageBody_Ussd); ok {
		return x.Ussd
	}
	return nil
}

type isOutboundMessageBody_Entry interface {
	isOutboundMessageBody_Entry()
}

type OutboundMessageBody_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type OutboundMessageBody_Media struct {
	Media *MediaMessageBody `protobuf:"bytes,2,opt,name=media,proto3,oneof"`
}

type OutboundMessageBody_Location struct {
	Location *LocationMessageBody `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

type OutboundMessageBody_Email struct {
	Email *EmailMessageBody `protobuf:"bytes,4,opt,name=email,proto3,oneof"`
}

type OutboundMessageBody_Template struct {
	Template *TemplateMessageBody `protobuf:"bytes,5,opt,name=template,proto3,oneof"`
}

type OutboundMessageBody_Url struct {
	Url string `protobuf:"bytes,6,opt,name=url,proto3,oneof"`
}

type OutboundMessageBody_Voice struct {
	Voice *VoiceCallDialplanMessageBody `protobuf:"bytes,7,opt,name=voice,proto3,oneof"`
}

type OutboundMessageBody_Ussd struct {
	Ussd *UssdMenuMessageBody `protobuf:"bytes,8,opt,name=ussd,proto3,oneof"`
}

func (*OutboundMessageBody_Text) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Media) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Location) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Email) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Template) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Url) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Voice) isOutboundMessageBody_Entry() {}

func (*OutboundMessageBody_Ussd) isOutboundMessageBody_Entry() {}

type PromptMessageMenuItemBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*PromptMessageMenuItemBody_Text
	//	*PromptMessageMenuItemBody_Media
	Entry isPromptMessageMenuItemBody_Entry `protobuf_oneof:"entry"`
}

func (x *PromptMessageMenuItemBody) Reset() {
	*x = PromptMessageMenuItemBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromptMessageMenuItemBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromptMessageMenuItemBody) ProtoMessage() {}

func (x *PromptMessageMenuItemBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromptMessageMenuItemBody.ProtoReflect.Descriptor instead.
func (*PromptMessageMenuItemBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{22}
}

func (m *PromptMessageMenuItemBody) GetEntry() isPromptMessageMenuItemBody_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *PromptMessageMenuItemBody) GetText() string {
	if x, ok := x.GetEntry().(*PromptMessageMenuItemBody_Text); ok {
		return x.Text
	}
	return ""
}

func (x *PromptMessageMenuItemBody) GetMedia() *MediaMessageBody {
	if x, ok := x.GetEntry().(*PromptMessageMenuItemBody_Media); ok {
		return x.Media
	}
	return nil
}

type isPromptMessageMenuItemBody_Entry interface {
	isPromptMessageMenuItemBody_Entry()
}

type PromptMessageMenuItemBody_Text struct {
	Text string `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type PromptMessageMenuItemBody_Media struct {
	Media *MediaMessageBody `protobuf:"bytes,3,opt,name=media,proto3,oneof"`
}

func (*PromptMessageMenuItemBody_Text) isPromptMessageMenuItemBody_Entry() {}

func (*PromptMessageMenuItemBody_Media) isPromptMessageMenuItemBody_Entry() {}

type InboundMessageBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Entry:
	//	*InboundMessageBody_Text
	//	*InboundMessageBody_Media
	//	*InboundMessageBody_Location
	//	*InboundMessageBody_Email
	//	*InboundMessageBody_Voice
	//	*InboundMessageBody_Ussd
	Entry isInboundMessageBody_Entry `protobuf_oneof:"entry"`
}

func (x *InboundMessageBody) Reset() {
	*x = InboundMessageBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InboundMessageBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InboundMessageBody) ProtoMessage() {}

func (x *InboundMessageBody) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InboundMessageBody.ProtoReflect.Descriptor instead.
func (*InboundMessageBody) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{23}
}

func (m *InboundMessageBody) GetEntry() isInboundMessageBody_Entry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (x *InboundMessageBody) GetText() string {
	if x, ok := x.GetEntry().(*InboundMessageBody_Text); ok {
		return x.Text
	}
	return ""
}

func (x *InboundMessageBody) GetMedia() *MediaMessageBody {
	if x, ok := x.GetEntry().(*InboundMessageBody_Media); ok {
		return x.Media
	}
	return nil
}

func (x *InboundMessageBody) GetLocation() *LocationMessageBody {
	if x, ok := x.GetEntry().(*InboundMessageBody_Location); ok {
		return x.Location
	}
	return nil
}

func (x *InboundMessageBody) GetEmail() *EmailMessageBody {
	if x, ok := x.GetEntry().(*InboundMessageBody_Email); ok {
		return x.Email
	}
	return nil
}

func (x *InboundMessageBody) GetVoice() *VoiceCallInputMessageBody {
	if x, ok := x.GetEntry().(*InboundMessageBody_Voice); ok {
		return x.Voice
	}
	return nil
}

func (x *InboundMessageBody) GetUssd() *wrappers.StringValue {
	if x, ok := x.GetEntry().(*InboundMessageBody_Ussd); ok {
		return x.Ussd
	}
	return nil
}

type isInboundMessageBody_Entry interface {
	isInboundMessageBody_Entry()
}

type InboundMessageBody_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type InboundMessageBody_Media struct {
	Media *MediaMessageBody `protobuf:"bytes,2,opt,name=media,proto3,oneof"`
}

type InboundMessageBody_Location struct {
	Location *LocationMessageBody `protobuf:"bytes,3,opt,name=location,proto3,oneof"`
}

type InboundMessageBody_Email struct {
	Email *EmailMessageBody `protobuf:"bytes,4,opt,name=email,proto3,oneof"`
}

type InboundMessageBody_Voice struct {
	Voice *VoiceCallInputMessageBody `protobuf:"bytes,5,opt,name=voice,proto3,oneof"`
}

type InboundMessageBody_Ussd struct {
	Ussd *wrappers.StringValue `protobuf:"bytes,6,opt,name=ussd,proto3,oneof"`
}

func (*InboundMessageBody_Text) isInboundMessageBody_Entry() {}

func (*InboundMessageBody_Media) isInboundMessageBody_Entry() {}

func (*InboundMessageBody_Location) isInboundMessageBody_Entry() {}

func (*InboundMessageBody_Email) isInboundMessageBody_Entry() {}

func (*InboundMessageBody_Voice) isInboundMessageBody_Entry() {}

func (*InboundMessageBody_Ussd) isInboundMessageBody_Entry() {}

type OutboundMessageReplyPrompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action PromptMessageReplyAction     `protobuf:"varint,1,opt,name=action,proto3,enum=com.elarian.hera.proto.PromptMessageReplyAction" json:"action,omitempty"`
	Menu   []*PromptMessageMenuItemBody `protobuf:"bytes,2,rep,name=menu,proto3" json:"menu,omitempty"`
}

func (x *OutboundMessageReplyPrompt) Reset() {
	*x = OutboundMessageReplyPrompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessageReplyPrompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessageReplyPrompt) ProtoMessage() {}

func (x *OutboundMessageReplyPrompt) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessageReplyPrompt.ProtoReflect.Descriptor instead.
func (*OutboundMessageReplyPrompt) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{24}
}

func (x *OutboundMessageReplyPrompt) GetAction() PromptMessageReplyAction {
	if x != nil {
		return x.Action
	}
	return PromptMessageReplyAction_PROMPT_MESSAGE_REPLY_ACTION_UNSPECIFIED
}

func (x *OutboundMessageReplyPrompt) GetMenu() []*PromptMessageMenuItemBody {
	if x != nil {
		return x.Menu
	}
	return nil
}

type OutboundMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body        *OutboundMessageBody        `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Labels      []string                    `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	ProviderTag *wrappers.StringValue       `protobuf:"bytes,3,opt,name=provider_tag,json=providerTag,proto3" json:"provider_tag,omitempty"`
	ReplyToken  *wrappers.StringValue       `protobuf:"bytes,4,opt,name=reply_token,json=replyToken,proto3" json:"reply_token,omitempty"`
	ReplyPrompt *OutboundMessageReplyPrompt `protobuf:"bytes,5,opt,name=reply_prompt,json=replyPrompt,proto3" json:"reply_prompt,omitempty"`
}

func (x *OutboundMessage) Reset() {
	*x = OutboundMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_messaging_model_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboundMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboundMessage) ProtoMessage() {}

func (x *OutboundMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messaging_model_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboundMessage.ProtoReflect.Descriptor instead.
func (*OutboundMessage) Descriptor() ([]byte, []int) {
	return file_messaging_model_proto_rawDescGZIP(), []int{25}
}

func (x *OutboundMessage) GetBody() *OutboundMessageBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *OutboundMessage) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *OutboundMessage) GetProviderTag() *wrappers.StringValue {
	if x != nil {
		return x.ProviderTag
	}
	return nil
}

func (x *OutboundMessage) GetReplyToken() *wrappers.StringValue {
	if x != nil {
		return x.ReplyToken
	}
	return nil
}

func (x *OutboundMessage) GetReplyPrompt() *OutboundMessageReplyPrompt {
	if x != nil {
		return x.ReplyPrompt
	}
	return nil
}

var File_messaging_model_proto protoreflect.FileDescriptor

var file_messaging_model_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x10, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x37, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x13, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x10, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x48, 0x74,
	0x6d, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x63, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x63, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x4f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a,
	0x0d, 0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x62, 0x65, 0x65, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x65, 0x65, 0x70,
	0x22, 0x22, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xcb, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03,
	0x73, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a,
	0x03, 0x73, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x6c, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x62, 0x65, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x42, 0x65, 0x65, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x6d, 0x5f, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x6d,
	0x53, 0x69, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a,
	0x0e, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x69,
	0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x72, 0x69, 0x6e, 0x67, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x75, 0x73, 0x69, 0x63, 0x12, 0x3b, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55,
	0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x3b, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26,
	0x0a, 0x12, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xec, 0x05, 0x0a, 0x0f, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x73, 0x61,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x61, 0x79, 0x12, 0x3c, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65,
	0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x43, 0x61, 0x6c,
	0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x64, 0x69, 0x61, 0x6c, 0x12,
	0x58, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0d, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x45, 0x0a, 0x07, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e,
	0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x61, 0x0a, 0x1c, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x70, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xef, 0x02, 0x0a, 0x13, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x64, 0x65,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x15, 0x64, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x65, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x40, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xcd, 0x04, 0x0a, 0x19, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x68, 0x61,
	0x6e, 0x67, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0b,
	0x68, 0x61, 0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x64,
	0x74, 0x6d, 0x66, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x64, 0x74, 0x6d, 0x66, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a,
	0x09, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x44, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x64, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x73, 0x73, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0xf3,
	0x03, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x05,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x49,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68,
	0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x08, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x05, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x44, 0x69, 0x61, 0x6c,
	0x70, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x75, 0x73, 0x73, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x73, 0x64, 0x4d, 0x65, 0x6e, 0x75, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x73, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x22, 0x7c, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61,
	0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x22, 0x81, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x49, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x49,
	0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x73,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x04, 0x75, 0x73, 0x73, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x22, 0xc1, 0x02, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x12, 0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x55, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x65, 0x6c, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x2e, 0x68, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x52, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x2a, 0x8a, 0x02, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x55, 0x53, 0x53, 0x44, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x46, 0x42, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x57, 0x48, 0x41, 0x54, 0x53, 0x41, 0x50, 0x50, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f,
	0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x07, 0x2a, 0x8a, 0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x02, 0x2a, 0xe1, 0x02, 0x0a, 0x1c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44,
	0x10, 0x64, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xac, 0x02, 0x12, 0x3b, 0x0a, 0x36, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x91, 0x03, 0x12,
	0x3f, 0x0a, 0x3a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45,
	0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x92, 0x03,
	0x12, 0x36, 0x0a, 0x31, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0x03, 0x2a, 0xd4, 0x01, 0x0a, 0x19, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f,
	0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54,
	0x59, 0x10, 0xc8, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0xac, 0x02, 0x2a,
	0x97, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x45,
	0x44, 0x10, 0x64, 0x12, 0x22, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x44, 0x10, 0xc8, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10, 0xc9, 0x01, 0x2a, 0x91, 0x02, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x2c, 0x0a, 0x28, 0x50, 0x52, 0x4f,
	0x4d, 0x50, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e,
	0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x4d, 0x50,
	0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x52, 0x4f, 0x4d, 0x50, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x4d,
	0x50, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x52, 0x4c, 0x10, 0x05, 0x2a, 0xb8, 0x09,
	0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x44, 0x10, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x65, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x21,
	0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xad,
	0x02, 0x12, 0x25, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0xae, 0x02, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0xaf, 0x02, 0x12, 0x23, 0x0a, 0x1e, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x90, 0x03, 0x12, 0x27, 0x0a,
	0x22, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x54, 0x10, 0x91, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x92, 0x03, 0x12, 0x24, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x33, 0x0a, 0x2e, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x94, 0x03, 0x12, 0x36, 0x0a,
	0x31, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x95, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x59, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x96, 0x03, 0x12, 0x33, 0x0a, 0x2e, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x97, 0x03, 0x12, 0x2a, 0x0a, 0x25,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x98, 0x03, 0x12, 0x38, 0x0a, 0x33, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x99, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x49,
	0x44, 0x10, 0x9a, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x9b, 0x03, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9c, 0x03,
	0x12, 0x36, 0x0a, 0x31, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x9d, 0x03, 0x12, 0x36, 0x0a, 0x31, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x45, 0x52, 0x49, 0x44, 0x10, 0x9e, 0x03,
	0x12, 0x25, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x9f, 0x03, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0xa0, 0x03, 0x12, 0x31, 0x0a, 0x2c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52,
	0x45, 0x44, 0x49, 0x54, 0x53, 0x10, 0xa1, 0x03, 0x12, 0x2e, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0x03, 0x2a, 0xa5, 0x06, 0x0a, 0x0f, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x64, 0x12, 0x1e, 0x0a,
	0x1a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x45, 0x44, 0x10, 0x65, 0x12, 0x1d, 0x0a,
	0x19, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x66, 0x12, 0x1d, 0x0a, 0x18,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0xc8, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0xc9, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0xca, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x44, 0x10,
	0xcb, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44,
	0x10, 0xcc, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x44, 0x10, 0xcd, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0xce, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x56, 0x4f, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0xac, 0x02, 0x12, 0x2a, 0x0a, 0x25, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46,
	0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x90,
	0x03, 0x12, 0x23, 0x0a, 0x1e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x91, 0x03, 0x12, 0x2b, 0x0a, 0x26, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x92, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x93, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x45, 0x52, 0x49, 0x44, 0x10, 0x94, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x95, 0x03, 0x12, 0x2d, 0x0a, 0x28, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x4e, 0x55, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x96, 0x03, 0x12, 0x28, 0x0a, 0x23, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xf5, 0x03,
	0x2a, 0xc9, 0x05, 0x0a, 0x14, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x61,
	0x6e, 0x67, 0x75, 0x70, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x11, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41,
	0x52, 0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x12, 0x12, 0x25, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x13, 0x12, 0x2d, 0x0a, 0x29, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x52, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x14, 0x12, 0x29, 0x0a, 0x25, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x15, 0x12, 0x2e, 0x0a, 0x2a, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x1f, 0x12, 0x34, 0x0a, 0x30, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45,
	0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52,
	0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x29, 0x12, 0x2f, 0x0a, 0x2b, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50,
	0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55,
	0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x3f, 0x12, 0x34, 0x0a, 0x30,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55,
	0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x10, 0x66, 0x12, 0x2e, 0x0a, 0x29, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0xe7, 0x03, 0x12, 0x26, 0x0a, 0x21, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x30, 0x0a, 0x2b, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x47, 0x55, 0x50, 0x5f,
	0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52,
	0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0xde, 0x04, 0x2a, 0x79, 0x0a, 0x11,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x56, 0x6f, 0x69, 0x63,
	0x65, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f,
	0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x46,
	0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_messaging_model_proto_rawDescOnce sync.Once
	file_messaging_model_proto_rawDescData = file_messaging_model_proto_rawDesc
)

func file_messaging_model_proto_rawDescGZIP() []byte {
	file_messaging_model_proto_rawDescOnce.Do(func() {
		file_messaging_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_messaging_model_proto_rawDescData)
	})
	return file_messaging_model_proto_rawDescData
}

var file_messaging_model_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_messaging_model_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_messaging_model_proto_goTypes = []interface{}{
	(MessagingChannel)(0),                // 0: com.elarian.hera.proto.MessagingChannel
	(MessagingConsentUpdate)(0),          // 1: com.elarian.hera.proto.MessagingConsentUpdate
	(MessagingConsentUpdateStatus)(0),    // 2: com.elarian.hera.proto.MessagingConsentUpdateStatus
	(MessagingSessionEndReason)(0),       // 3: com.elarian.hera.proto.MessagingSessionEndReason
	(MessageReaction)(0),                 // 4: com.elarian.hera.proto.MessageReaction
	(PromptMessageReplyAction)(0),        // 5: com.elarian.hera.proto.PromptMessageReplyAction
	(MessageDeliveryStatus)(0),           // 6: com.elarian.hera.proto.MessageDeliveryStatus
	(VoiceCallStatus)(0),                 // 7: com.elarian.hera.proto.VoiceCallStatus
	(VoiceCallHangupCause)(0),            // 8: com.elarian.hera.proto.VoiceCallHangupCause
	(TextToSpeechVoice)(0),               // 9: com.elarian.hera.proto.TextToSpeechVoice
	(*MessagingChannelNumber)(nil),       // 10: com.elarian.hera.proto.MessagingChannelNumber
	(*MediaMessageBody)(nil),             // 11: com.elarian.hera.proto.MediaMessageBody
	(*LocationMessageBody)(nil),          // 12: com.elarian.hera.proto.LocationMessageBody
	(*EmailMessageBody)(nil),             // 13: com.elarian.hera.proto.EmailMessageBody
	(*TemplateMessageBody)(nil),          // 14: com.elarian.hera.proto.TemplateMessageBody
	(*SayCallAction)(nil),                // 15: com.elarian.hera.proto.SayCallAction
	(*PlayCallAction)(nil),               // 16: com.elarian.hera.proto.PlayCallAction
	(*GetDigitsCallAction)(nil),          // 17: com.elarian.hera.proto.GetDigitsCallAction
	(*GetRecordingCallAction)(nil),       // 18: com.elarian.hera.proto.GetRecordingCallAction
	(*RecordSessionCallAction)(nil),      // 19: com.elarian.hera.proto.RecordSessionCallAction
	(*DialCallAction)(nil),               // 20: com.elarian.hera.proto.DialCallAction
	(*EnqueueCallAction)(nil),            // 21: com.elarian.hera.proto.EnqueueCallAction
	(*DequeueCallAction)(nil),            // 22: com.elarian.hera.proto.DequeueCallAction
	(*RejectCallAction)(nil),             // 23: com.elarian.hera.proto.RejectCallAction
	(*RedirectCallAction)(nil),           // 24: com.elarian.hera.proto.RedirectCallAction
	(*VoiceCallAction)(nil),              // 25: com.elarian.hera.proto.VoiceCallAction
	(*VoiceCallDialplanMessageBody)(nil), // 26: com.elarian.hera.proto.VoiceCallDialplanMessageBody
	(*VoiceCallDialInput)(nil),           // 27: com.elarian.hera.proto.VoiceCallDialInput
	(*VoiceCallQueueInput)(nil),          // 28: com.elarian.hera.proto.VoiceCallQueueInput
	(*VoiceCallInputMessageBody)(nil),    // 29: com.elarian.hera.proto.VoiceCallInputMessageBody
	(*UssdMenuMessageBody)(nil),          // 30: com.elarian.hera.proto.UssdMenuMessageBody
	(*OutboundMessageBody)(nil),          // 31: com.elarian.hera.proto.OutboundMessageBody
	(*PromptMessageMenuItemBody)(nil),    // 32: com.elarian.hera.proto.PromptMessageMenuItemBody
	(*InboundMessageBody)(nil),           // 33: com.elarian.hera.proto.InboundMessageBody
	(*OutboundMessageReplyPrompt)(nil),   // 34: com.elarian.hera.proto.OutboundMessageReplyPrompt
	(*OutboundMessage)(nil),              // 35: com.elarian.hera.proto.OutboundMessage
	nil,                                  // 36: com.elarian.hera.proto.TemplateMessageBody.ParamsEntry
	(MediaType)(0),                       // 37: com.elarian.hera.proto.MediaType
	(*wrappers.StringValue)(nil),         // 38: google.protobuf.StringValue
	(*duration.Duration)(nil),            // 39: google.protobuf.Duration
	(*wrappers.Int32Value)(nil),          // 40: google.protobuf.Int32Value
	(*CustomerNumber)(nil),               // 41: com.elarian.hera.proto.CustomerNumber
	(*timestamp.Timestamp)(nil),          // 42: google.protobuf.Timestamp
	(CustomerEventDirection)(0),          // 43: com.elarian.hera.proto.CustomerEventDirection
}
var file_messaging_model_proto_depIdxs = []int32{
	0,  // 0: com.elarian.hera.proto.MessagingChannelNumber.channel:type_name -> com.elarian.hera.proto.MessagingChannel
	37, // 1: com.elarian.hera.proto.MediaMessageBody.media:type_name -> com.elarian.hera.proto.MediaType
	38, // 2: com.elarian.hera.proto.LocationMessageBody.label:type_name -> google.protobuf.StringValue
	38, // 3: com.elarian.hera.proto.LocationMessageBody.address:type_name -> google.protobuf.StringValue
	36, // 4: com.elarian.hera.proto.TemplateMessageBody.params:type_name -> com.elarian.hera.proto.TemplateMessageBody.ParamsEntry
	9,  // 5: com.elarian.hera.proto.SayCallAction.voice:type_name -> com.elarian.hera.proto.TextToSpeechVoice
	15, // 6: com.elarian.hera.proto.GetDigitsCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	16, // 7: com.elarian.hera.proto.GetDigitsCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	39, // 8: com.elarian.hera.proto.GetDigitsCallAction.timeout:type_name -> google.protobuf.Duration
	38, // 9: com.elarian.hera.proto.GetDigitsCallAction.finish_on_key:type_name -> google.protobuf.StringValue
	40, // 10: com.elarian.hera.proto.GetDigitsCallAction.num_digits:type_name -> google.protobuf.Int32Value
	15, // 11: com.elarian.hera.proto.GetRecordingCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	16, // 12: com.elarian.hera.proto.GetRecordingCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	39, // 13: com.elarian.hera.proto.GetRecordingCallAction.timeout:type_name -> google.protobuf.Duration
	39, // 14: com.elarian.hera.proto.GetRecordingCallAction.max_length:type_name -> google.protobuf.Duration
	38, // 15: com.elarian.hera.proto.GetRecordingCallAction.finish_on_key:type_name -> google.protobuf.StringValue
	41, // 16: com.elarian.hera.proto.DialCallAction.customer_numbers:type_name -> com.elarian.hera.proto.CustomerNumber
	38, // 17: com.elarian.hera.proto.DialCallAction.ringback_tone:type_name -> google.protobuf.StringValue
	38, // 18: com.elarian.hera.proto.DialCallAction.caller_id:type_name -> google.protobuf.StringValue
	40, // 19: com.elarian.hera.proto.DialCallAction.max_duration:type_name -> google.protobuf.Int32Value
	38, // 20: com.elarian.hera.proto.EnqueueCallAction.hold_music:type_name -> google.protobuf.StringValue
	38, // 21: com.elarian.hera.proto.EnqueueCallAction.queue_name:type_name -> google.protobuf.StringValue
	10, // 22: com.elarian.hera.proto.DequeueCallAction.channel_number:type_name -> com.elarian.hera.proto.MessagingChannelNumber
	38, // 23: com.elarian.hera.proto.DequeueCallAction.queue_name:type_name -> google.protobuf.StringValue
	15, // 24: com.elarian.hera.proto.VoiceCallAction.say:type_name -> com.elarian.hera.proto.SayCallAction
	16, // 25: com.elarian.hera.proto.VoiceCallAction.play:type_name -> com.elarian.hera.proto.PlayCallAction
	17, // 26: com.elarian.hera.proto.VoiceCallAction.get_digits:type_name -> com.elarian.hera.proto.GetDigitsCallAction
	20, // 27: com.elarian.hera.proto.VoiceCallAction.dial:type_name -> com.elarian.hera.proto.DialCallAction
	19, // 28: com.elarian.hera.proto.VoiceCallAction.record_session:type_name -> com.elarian.hera.proto.RecordSessionCallAction
	18, // 29: com.elarian.hera.proto.VoiceCallAction.get_recording:type_name -> com.elarian.hera.proto.GetRecordingCallAction
	21, // 30: com.elarian.hera.proto.VoiceCallAction.enqueue:type_name -> com.elarian.hera.proto.EnqueueCallAction
	22, // 31: com.elarian.hera.proto.VoiceCallAction.dequeue:type_name -> com.elarian.hera.proto.DequeueCallAction
	23, // 32: com.elarian.hera.proto.VoiceCallAction.reject:type_name -> com.elarian.hera.proto.RejectCallAction
	24, // 33: com.elarian.hera.proto.VoiceCallAction.redirect:type_name -> com.elarian.hera.proto.RedirectCallAction
	25, // 34: com.elarian.hera.proto.VoiceCallDialplanMessageBody.actions:type_name -> com.elarian.hera.proto.VoiceCallAction
	42, // 35: com.elarian.hera.proto.VoiceCallDialInput.started_at:type_name -> google.protobuf.Timestamp
	39, // 36: com.elarian.hera.proto.VoiceCallDialInput.duration:type_name -> google.protobuf.Duration
	42, // 37: com.elarian.hera.proto.VoiceCallQueueInput.enqueued_at:type_name -> google.protobuf.Timestamp
	42, // 38: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_at:type_name -> google.protobuf.Timestamp
	38, // 39: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_to_number:type_name -> google.protobuf.StringValue
	38, // 40: com.elarian.hera.proto.VoiceCallQueueInput.dequeued_to_sessionId:type_name -> google.protobuf.StringValue
	39, // 41: com.elarian.hera.proto.VoiceCallQueueInput.queue_duration:type_name -> google.protobuf.Duration
	43, // 42: com.elarian.hera.proto.VoiceCallInputMessageBody.direction:type_name -> com.elarian.hera.proto.CustomerEventDirection
	7,  // 43: com.elarian.hera.proto.VoiceCallInputMessageBody.status:type_name -> com.elarian.hera.proto.VoiceCallStatus
	42, // 44: com.elarian.hera.proto.VoiceCallInputMessageBody.started_at:type_name -> google.protobuf.Timestamp
	8,  // 45: com.elarian.hera.proto.VoiceCallInputMessageBody.hangup_cause:type_name -> com.elarian.hera.proto.VoiceCallHangupCause
	38, // 46: com.elarian.hera.proto.VoiceCallInputMessageBody.dtmf_digits:type_name -> google.protobuf.StringValue
	38, // 47: com.elarian.hera.proto.VoiceCallInputMessageBody.recording_url:type_name -> google.protobuf.StringValue
	27, // 48: com.elarian.hera.proto.VoiceCallInputMessageBody.dial_data:type_name -> com.elarian.hera.proto.VoiceCallDialInput
	28, // 49: com.elarian.hera.proto.VoiceCallInputMessageBody.queue_data:type_name -> com.elarian.hera.proto.VoiceCallQueueInput
	11, // 50: com.elarian.hera.proto.OutboundMessageBody.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	12, // 51: com.elarian.hera.proto.OutboundMessageBody.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	13, // 52: com.elarian.hera.proto.OutboundMessageBody.email:type_name -> com.elarian.hera.proto.EmailMessageBody
	14, // 53: com.elarian.hera.proto.OutboundMessageBody.template:type_name -> com.elarian.hera.proto.TemplateMessageBody
	26, // 54: com.elarian.hera.proto.OutboundMessageBody.voice:type_name -> com.elarian.hera.proto.VoiceCallDialplanMessageBody
	30, // 55: com.elarian.hera.proto.OutboundMessageBody.ussd:type_name -> com.elarian.hera.proto.UssdMenuMessageBody
	11, // 56: com.elarian.hera.proto.PromptMessageMenuItemBody.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	11, // 57: com.elarian.hera.proto.InboundMessageBody.media:type_name -> com.elarian.hera.proto.MediaMessageBody
	12, // 58: com.elarian.hera.proto.InboundMessageBody.location:type_name -> com.elarian.hera.proto.LocationMessageBody
	13, // 59: com.elarian.hera.proto.InboundMessageBody.email:type_name -> com.elarian.hera.proto.EmailMessageBody
	29, // 60: com.elarian.hera.proto.InboundMessageBody.voice:type_name -> com.elarian.hera.proto.VoiceCallInputMessageBody
	38, // 61: com.elarian.hera.proto.InboundMessageBody.ussd:type_name -> google.protobuf.StringValue
	5,  // 62: com.elarian.hera.proto.OutboundMessageReplyPrompt.action:type_name -> com.elarian.hera.proto.PromptMessageReplyAction
	32, // 63: com.elarian.hera.proto.OutboundMessageReplyPrompt.menu:type_name -> com.elarian.hera.proto.PromptMessageMenuItemBody
	31, // 64: com.elarian.hera.proto.OutboundMessage.body:type_name -> com.elarian.hera.proto.OutboundMessageBody
	38, // 65: com.elarian.hera.proto.OutboundMessage.provider_tag:type_name -> google.protobuf.StringValue
	38, // 66: com.elarian.hera.proto.OutboundMessage.reply_token:type_name -> google.protobuf.StringValue
	34, // 67: com.elarian.hera.proto.OutboundMessage.reply_prompt:type_name -> com.elarian.hera.proto.OutboundMessageReplyPrompt
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_messaging_model_proto_init() }
func file_messaging_model_proto_init() {
	if File_messaging_model_proto != nil {
		return
	}
	file_common_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_messaging_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessagingChannelNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SayCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDigitsCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordingCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSessionCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DequeueCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RejectCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallDialplanMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallDialInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallQueueInput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoiceCallInputMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UssdMenuMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromptMessageMenuItemBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InboundMessageBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessageReplyPrompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_messaging_model_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboundMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_messaging_model_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetDigitsCallAction_Say)(nil),
		(*GetDigitsCallAction_Play)(nil),
	}
	file_messaging_model_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetRecordingCallAction_Say)(nil),
		(*GetRecordingCallAction_Play)(nil),
	}
	file_messaging_model_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*VoiceCallAction_Say)(nil),
		(*VoiceCallAction_Play)(nil),
		(*VoiceCallAction_GetDigits)(nil),
		(*VoiceCallAction_Dial)(nil),
		(*VoiceCallAction_RecordSession)(nil),
		(*VoiceCallAction_GetRecording)(nil),
		(*VoiceCallAction_Enqueue)(nil),
		(*VoiceCallAction_Dequeue)(nil),
		(*VoiceCallAction_Reject)(nil),
		(*VoiceCallAction_Redirect)(nil),
	}
	file_messaging_model_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*OutboundMessageBody_Text)(nil),
		(*OutboundMessageBody_Media)(nil),
		(*OutboundMessageBody_Location)(nil),
		(*OutboundMessageBody_Email)(nil),
		(*OutboundMessageBody_Template)(nil),
		(*OutboundMessageBody_Url)(nil),
		(*OutboundMessageBody_Voice)(nil),
		(*OutboundMessageBody_Ussd)(nil),
	}
	file_messaging_model_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*PromptMessageMenuItemBody_Text)(nil),
		(*PromptMessageMenuItemBody_Media)(nil),
	}
	file_messaging_model_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*InboundMessageBody_Text)(nil),
		(*InboundMessageBody_Media)(nil),
		(*InboundMessageBody_Location)(nil),
		(*InboundMessageBody_Email)(nil),
		(*InboundMessageBody_Voice)(nil),
		(*InboundMessageBody_Ussd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_messaging_model_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messaging_model_proto_goTypes,
		DependencyIndexes: file_messaging_model_proto_depIdxs,
		EnumInfos:         file_messaging_model_proto_enumTypes,
		MessageInfos:      file_messaging_model_proto_msgTypes,
	}.Build()
	File_messaging_model_proto = out.File
	file_messaging_model_proto_rawDesc = nil
	file_messaging_model_proto_goTypes = nil
	file_messaging_model_proto_depIdxs = nil
}
